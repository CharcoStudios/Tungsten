<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tungsten.Universal</name>
    </assembly>
    <members>
        <member name="T:W.ActionQueue`1">
            <summary><para>
            Allows the programmer to enqueue items for processing on a separate thread.  The ActionQueue will process items sequentially whenever an item is added.
            </para></summary>
            <typeparam name="T">The type of data to enqueue and process</typeparam>
        </member>
        <member name="P:W.ActionQueue`1.Count">
            <summary>
            Returns the number of items currently in the queue
            </summary>
        </member>
        <member name="M:W.ActionQueue`1.Enqueue(`0)">
            <summary>
            Places an item in the queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:W.ActionQueue`1.Cancel">
            <summary>
            Cancels processing of the queue
            </summary>
        </member>
        <member name="M:W.ActionQueue`1.Dispose">
            <summary>
            Releases resources related to the ActionQueue
            </summary>
        </member>
        <member name="P:W.ActionQueue`1.Queue">
            <summary>
            The reference to the ConcurrentQueue being used
            </summary>
        </member>
        <member name="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Creates a new ActionQueue
            </summary>
            <param name="onItemAdded">A callback which is called whenever an item has been enqueued</param>
        </member>
        <member name="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)">
            <summary>
            Creates a new ActionQueue
            </summary>
            <param name="onItemAdded">A callback which is called whenever an item has been enqueued</param>
        </member>
        <member name="M:W.ActionQueue`1.Finalize">
            <summary>
            Disposes the ActionQueue
            </summary>
        </member>
        <member name="T:W.AsExtensions">
            <summary>
            Extensions which convert objects of one type to another
            </summary>
        </member>
        <member name="M:W.AsExtensions.As``1(System.Object)">
            <summary>
            Use Generic syntax for the <bold>as</bold> operator.
            </summary>
            <typeparam name="TType">The type to convert the item reference to.</typeparam>
            <param name="this">The item to convert to type TType</param>
            <returns>Null if @this cannot be referenced as TType.  Otherwise, the item as TType</returns>
            <example><code>expression as type</code> becomes <code>expression&lt;type&gt;()</code></example>
        </member>
        <member name="M:W.AsExtensions.AsBase64(System.String)">
            <summary>
            Converts a string to Base64 encoding
            </summary>
            <param name="this">The string to convert to Base64 encoding</param>
            <returns>The Base64 encoded string</returns>
        </member>
        <member name="M:W.AsExtensions.AsBase64(System.Byte[])">
            <summary>
            Converts a byte array to Base64 encoding
            </summary>
            <param name="this">The byte array to convert to Base64</param>
            <returns></returns>
        </member>
        <member name="M:W.AsExtensions.AsBytes(System.String)">
            <summary>
            Converts a string to an encoded byte array
            </summary>
            <param name="this">The string to convert to an encoded byte array</param>
            <returns>A byte array encoding of the specified string</returns>
        </member>
        <member name="M:W.AsExtensions.AsString(System.Byte[])">
            <summary>
            Converts an encoded byte array to a string
            </summary>
            <param name="this">The encoded byte array to conver to a string</param>
            <returns>The string representation of the encoded byte array</returns>
        </member>
        <member name="M:W.AsExtensions.AsString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an encoded byte array to a string
            </summary>
            <param name="this">The encoded byte array to conver to a string</param>
            <param name="index">The starting index</param>
            <param name="count">The number of bytes to convert</param>
            <returns>The string representation of the encoded byte array</returns>
        </member>
        <member name="M:W.AsExtensions.AsStream(System.Byte[])">
            <summary>
            Creates a MemoryStream object and initializes it with the specified byte array
            </summary>
            <param name="this">The byte array used in creating the MemoryStream</param>
            <returns>A new MemoryStream initialized with the specified byte array</returns>
        </member>
        <member name="M:W.AsExtensions.AsStream(System.String)">
            <summary>
            Creates a MemoryStream object and initializes it with the specified string
            </summary>
            <param name="this">The string used in creating the MemoryStream</param>
            <returns>A new MemoryStream initilized with the specified string</returns>
        </member>
        <member name="M:W.AsExtensions.AsJson``1(System.Object)">
            <summary>
            Serializes an object to a Json string
            </summary>
            <typeparam name="TType">The type of object to serialize</typeparam>
            <param name="this">The object to serialize to Json</param>
            <returns>A Json formatted string representation of the specified object</returns>
        </member>
        <member name="M:W.AsExtensions.AsXml``1(System.Object)">
            <summary>
            Serializes an object to an xml string
            </summary>
            <typeparam name="TType">The type of object to serialize</typeparam>
            <param name="this">The object to serialize</param>
            <returns></returns>
        </member>
        <member name="M:W.AsExtensions.AsCompressed(System.Byte[])">
            <summary>
            Compresses the byte array using System.IO.Compression.DeflateStream
            </summary>
            <param name="bytes">The byte array to compress</param>
            <returns>A byte array of compressed data</returns>
        </member>
        <member name="M:W.AsExtensions.AsCompressed(System.String)">
            <summary>
            Compresses the string using System.IO.Compression.DeflateStream
            </summary>
            <param name="item">The string to compress</param>
            <returns>A compressed string</returns>
        </member>
        <member name="M:W.AsExtensions.AsDecompressed(System.Byte[])">
            <summary>
            Decompresses the byte array using System.IO.Compression.DeflateStream
            </summary>
            <param name="bytes">The byte array containing compressed data</param>
            <returns>A byte array of the decompressed data</returns>
        </member>
        <member name="M:W.AsExtensions.AsDecompressed(System.String)">
            <summary>
            Decompresses the string using System.IO.Compression.DeflateStream
            </summary>
            <param name="item">The string containing compressed data</param>
            <returns>A string of decompressed data</returns>
        </member>
        <member name="T:W.CallResult`1">
            <summary>
            <para>
            Generic class to be used as a return value.  CallResult encapsulates a success/failure, an exception and a return value.
            </para>
            </summary>
            <typeparam name="TResult">The type to be used for the Result member (the return value of the function)</typeparam>
        </member>
        <member name="P:W.CallResult`1.Result">
            <summary>
            The return value
            </summary>
        </member>
        <member name="M:W.CallResult`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W.CallResult`1.#ctor(System.Boolean)">
            <summary>
            Constructor accepting an initial Success value
            </summary>
            <param name="success">The initial Success value</param>
        </member>
        <member name="M:W.CallResult`1.#ctor(System.Boolean,`0)">
            <summary>
            Constructor accepting an initial Success value and an initial Result value
            </summary>
            <param name="success">The initial Success value</param>
            <param name="result">The initial Result value</param>
        </member>
        <member name="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)">
            <summary>
            Constructor accepting an initial Success value, an initial Result value and an initial Exception value
            </summary>
            <param name="success">The initial Success value</param>
            <param name="result">The initial Result value</param>
            <param name="e">An exception object if one has occured</param>
        </member>
        <member name="P:W.CallResult`1.Empty">
            <summary>
            Provides a new instance of an uninitialized CallResult&lt;TResult&gt;
            </summary>
        </member>
        <member name="T:W.CallResult">
            <summary>
            A non-generic return value for a function.  CallResult encapsulates a success/failure and an exception.
            </summary>
        </member>
        <member name="P:W.CallResult.Success">
            <summary>
            Set to True if the function succeeds, otherwise False
            </summary>
        </member>
        <member name="P:W.CallResult.Exception">
            <summary>
            Provide exception data to the caller if desired
            </summary>
        </member>
        <member name="M:W.CallResult.#ctor">
            <summary>
            Default constructor, initializes Success to false
            </summary>
        </member>
        <member name="M:W.CallResult.#ctor(System.Boolean)">
            <summary>
            Constructor which accepts an initial value for Success
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:W.CallResult.#ctor(System.Boolean,System.Exception)">
            <summary>
            Constructor which accepts an initial value for Success and an initial value for Exception
            </summary>
            <param name="success">The initial value for Success</param>
            <param name="e">The initial value for Exception</param>
        </member>
        <member name="P:W.CallResult.Empty">
            <summary>
            Provides a new instance of an uninitialized CallResult
            </summary>
        </member>
        <member name="T:W.InvokeExtensions">
            <summary>
            Extension methods to provide code shortcuts to evaluate InvokeRequired and run code appropriately
            </summary>
        </member>
        <member name="M:W.InvokeExtensions.InvokeEx``1(``0,System.Action)">
            <summary>
            Runs the provided Action on the UI thread
            </summary>
            <param name="this">The form or control which supports Dispatcher</param>
            <param name="action">The code to be executed on the UI thread</param>
            <typeparam name="T">The form or control who's thread will execute the code</typeparam>
        </member>
        <member name="M:W.InvokeExtensions.InvokeAsync``1(``0,System.Action)">
            <summary>
            Asynchronously runs the provided Action on the UI thread
            </summary>
            <param name="this">The form or control which supports Dispatcher</param>
            <param name="action">The code to be executed on the UI thread</param>
            <typeparam name="T">The form or control who's thread will execute the code</typeparam>
        </member>
        <member name="T:W.Lockable`1">
            <summary>
            <para>
            Provides thread safety via locking
            </para>
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:W.Lockable`1.LockObject">
            <summary>
            The object used internally for lock statements
            </summary>
        </member>
        <member name="P:W.Lockable`1.Value">
            <summary>
            <para>
            Provides automatic locking during read/writes
            </para>
            </summary>
        </member>
        <member name="P:W.Lockable`1.UnlockedValue">
            <summary>
            <para>
            To be used by caller, with LockObject, to batch read/writes under one lock)
            </para>
            </summary>
        </member>
        <member name="M:W.Lockable`1.#ctor">
            <summary>
            <para>
            Constructor which initializes Value with the default of TValue
            </para>
            </summary>
        </member>
        <member name="M:W.Lockable`1.#ctor(`0)">
            <summary>
            Constructor which initializes Value with the specified value
            </summary>
            <param name="value">The initial value for Value</param>
        </member>
        <member name="T:W.Logging.Log">
            <summary>
            Exposes static methods for logging.  LogTheMessage can be assigned a new value for customized logging.
            </summary>
        </member>
        <member name="P:W.Logging.Log.LogTheMessage">
            <summary>
            Configure this Action to log messages the way you like to
            </summary>
        </member>
        <member name="T:W.Logging.Log.LogMessageCategory">
            <summary>
            The log message type
            </summary>
        </member>
        <member name="F:W.Logging.Log.LogMessageCategory.Verbose">
            <summary>
            Denotes verbose message
            </summary>
        </member>
        <member name="F:W.Logging.Log.LogMessageCategory.Information">
            <summary>
            Denotes a informational message
            </summary>
        </member>
        <member name="F:W.Logging.Log.LogMessageCategory.Warning">
            <summary>
            Denotes a warning message
            </summary>
        </member>
        <member name="F:W.Logging.Log.LogMessageCategory.Error">
            <summary>
            Denotes an error message
            </summary>
        </member>
        <member name="M:W.Logging.Log.e(System.Exception)">
            <summary>
            Log an Exception
            </summary>
            <param name="e">The exception to log.  This will be boxed with ToString().</param>
        </member>
        <member name="M:W.Logging.Log.e(System.String,System.Object[])">
            <summary>
            Log a formatted exception message. This method uses string.Format to format the message.
            </summary>
            <param name="format">Format of the message</param>
            <param name="args">Parameters to be passed during message formatting</param>
        </member>
        <member name="M:W.Logging.Log.w(System.String,System.Object[])">
            <summary>
            Log a formatted warning message. This method uses string.Format to format the message.
            </summary>
            <param name="format">Format of the message</param>
            <param name="args">Parameters to be passed during message formatting</param>
        </member>
        <member name="M:W.Logging.Log.i(System.String,System.Object[])">
            <summary>
            Log a formatted informational message. This method uses string.Format to format the message.
            </summary>
            <param name="format">Format of the message</param>
            <param name="args">Parameters to be passed during message formatting</param>
        </member>
        <member name="M:W.Logging.Log.v(System.String,System.Object[])">
            <summary>
            Log a formatted verbose message. This method uses string.Format to format the message.
            </summary>
            <param name="format">Format of the message</param>
            <param name="args">Parameters to be passed during message formatting</param>
        </member>
        <member name="T:W.PropertyChangedNotifier">
            <summary>
            <para>
            This is a base class for supporting INotifyPropertyChanged
            </para>
            </summary>
        </member>
        <member name="E:W.PropertyChangedNotifier.PropertyChanged">
            <summary>
            Raised when a property changes
            </summary>
        </member>
        <member name="M:W.PropertyChangedNotifier.GetValue">
            <summary>
            <para>
            Override this method to provide Get functionality
            </para>
            </summary>
            <returns>Unless overridden, this function will always return null</returns>
        </member>
        <member name="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)">
            <summary>
            <para>
            Calls OnPropertyChanged.  This method does not make assignments.  Override this method to make assignments.
            </para>
            </summary>
            <param name="value"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)">
            <summary>
            <para>
            Calls RaisePropertyChanged to raise the PropertyChanged event
            </para>
            </summary>
            <param name="propertyName">The name of the property which changed</param>
        </member>
        <member name="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)">
            <summary>
            <para>
            Raises the PropertyChanged event
            </para>
            </summary>
            <param name="sender">The sender is the owner of the property</param>
            <param name="propertyName">The name of the property which changed</param>
        </member>
        <member name="T:W.PropertyHost">
            <summary>
            <para>
            Provides a base class to automate the IsDirty, MarkAsClean and InitializeProperties functionality
            Note that this class does not support INotifyPropertyChanged and is not intented to host owned properties (though nothing prevents you from doing so)
            </para>
            </summary>
        </member>
        <member name="P:W.PropertyHost.IsDirty">
            <summary>
            Finds all Properties and checks their IsDirty flag
            </summary>
            <returns>True if any Property's IsDirty flag is true. Otherwise false.</returns>
        </member>
        <member name="M:W.PropertyHost.MarkAsClean">
            <summary>
            Uses reflection to find all Properties and mark them as clean (call Property.MarkAsClean())
            </summary>
        </member>
        <member name="M:W.PropertyHost.#ctor">
            <summary>
            Calls PropertyHostMethods.InitializeProperties so you don't have to
            </summary>
        </member>
        <member name="T:W.PropertyHostMethods">
            <summary>
            Exposes static PropertyHost extension methods
            </summary>
        </member>
        <member name="M:W.PropertyHostMethods.InitializeProperties(System.Object)">
            <summary>
            <para>
            Scans the fields and properties of "owner" and sets the member's Owner property to "owner"
            This method should be called in the constructor of any class which has IOwnedProperty members
            </para>
            </summary>
            <param name="this"></param>
        </member>
        <member name="M:W.PropertyHostMethods.IsDirty(System.Object)">
            <summary>
            <para>
            Scans the IsDirty value of each field and property of type IProperty 
            </para>
            </summary>
            <returns>True if any IProperty member's IsDirty value is true, otherwise false</returns>
        </member>
        <member name="M:W.PropertyHostMethods.MarkAsClean(System.Object)">
            <summary>
            <para>
            Scans each field and property of type IProperty and sets it's IsDirty flag to false
            </para>
            </summary>
        </member>
        <member name="T:W.IOwnedProperty">
            <summary><para>
            Used by PropertyHostMethods.InitializeProperties to find properties on which to set the owner.  This interface is not used by self-owned properties.
            </para></summary>
        </member>
        <member name="M:W.IOwnedProperty.SetOwner(System.Object)">
            <summary>
            Sets the property owner to the specified value
            </summary>
            <param name="owner">The new property owner</param>
        </member>
        <member name="T:W.IProperty`1">
            <summary>
            The base interface which Property must support
            </summary>
            <typeparam name="TValue">The type of value for the property</typeparam>
        </member>
        <member name="P:W.IProperty`1.Value">
            <summary>
            The value of the property
            </summary>
        </member>
        <member name="T:W.IProperty">
            <summary>
            The base interface which Property must support
            </summary>
        </member>
        <member name="P:W.IProperty.IsDirty">
            <summary>
            True if the property's value has changed since initialization or since the last call to MarkAsClean
            </summary>
        </member>
        <member name="T:W.Property`2">
            <summary>
            A generic Property with an owner
            </summary>
            <typeparam name="TOwner">The type of owner</typeparam>
            <typeparam name="TValue">The type of the property value</typeparam>
        </member>
        <member name="M:W.Property`2.#ctor">
            <summary>
            Constructs a new Property
            </summary>
        </member>
        <member name="M:W.Property`2.#ctor(`1)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="defaultValue">The default and initial value of the property</param>
        </member>
        <member name="M:W.Property`2.#ctor(W.PropertyBase{`0,`1}.OnValueChangedDelegate)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="onValueChanged">A callback for when the property value changes</param>
        </member>
        <member name="M:W.Property`2.#ctor(`0)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="owner">The owner of the property</param>
        </member>
        <member name="M:W.Property`2.#ctor(`0,`1)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="owner">The owner of the property</param>
            <param name="defaultValue">The default and initial value of the property</param>
        </member>
        <member name="M:W.Property`2.#ctor(`0,W.PropertyBase{`0,`1}.OnValueChangedDelegate)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="owner">The owner of the property</param>
            <param name="onValueChanged">A callback for when the property value changes</param>
        </member>
        <member name="M:W.Property`2.#ctor(`0,`1,W.PropertyBase{`0,`1}.OnValueChangedDelegate)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="owner">The owner of the property</param>
            <param name="defaultValue">The default and initial value of the property</param>
            <param name="onValueChanged">A callback for when the property value changes</param>
        </member>
        <member name="T:W.Property`1">
            <summary>
            A generic Property with no owner (self-owned)
            </summary>
            <typeparam name="TValue">The type of the property value</typeparam>
        </member>
        <member name="M:W.Property`1.#ctor">
            <summary>
            Constructs a new Property
            </summary>
        </member>
        <member name="M:W.Property`1.#ctor(`0)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="defaultValue">The default and initial value of the property value</param>
        </member>
        <member name="M:W.Property`1.#ctor(W.PropertyBase{W.Property{`0},`0}.OnValueChangedDelegate)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="onValueChanged">A callback for when the property value changes</param>
        </member>
        <member name="M:W.Property`1.#ctor(`0,W.PropertyBase{W.Property{`0},`0}.OnValueChangedDelegate)">
            <summary>
            Constructs a new Property
            </summary>
            <param name="defaultValue">The default and initial value of the property value</param>
            <param name="onValueChanged">A callback for when the property value changes</param>
        </member>
        <member name="T:W.PropertyBase`2">
            <summary>
            Provides the functionality for the Property classes
            </summary>
            <typeparam name="TOwner">The type of the property owner</typeparam>
            <typeparam name="TValue">The type of the property value</typeparam>
        </member>
        <member name="T:W.PropertyBase`2.PropertyValueChangingDelegate">
            <summary>
            Raised prior to the value of the property changing.  Allows the programmer to cancel the change.
            </summary>
            <param name="owner">The owner of the property</param>
            <param name="oldValue">The old value</param>
            <param name="newValue">The expected new value</param>
            <param name="cancel">Set to True to prevent the property value from changing</param>
        </member>
        <member name="T:W.PropertyBase`2.PropertyValueChangedDelegate">
            <summary>
            Raised when the value of the property changes
            </summary>
            <param name="sender"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:W.PropertyBase`2.OnValueChangedDelegate">
            <summary>
            Used by the constructor to handle the property change via a callback rather than the events
            </summary>
            <param name="owner">The property owner</param>
            <param name="oldValue">The previous value</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="E:W.PropertyBase`2.ValueChanged">
            <summary>
            Raised after Value has changed
            </summary>
        </member>
        <member name="E:W.PropertyBase`2.ValueChanging">
            <summary>
            Raised before Value has changed.  To prevent Value from changing set cancel to true.
            </summary>
        </member>
        <member name="F:W.PropertyBase`2.OnValueChanged">
            <summary>
            Callback type for use in the constructor (if one wants to avoid using the event)
            </summary>
        </member>
        <member name="P:W.PropertyBase`2.IsDirty">
            <summary>
            True if Value has changed since initialization or since the last call to MarkAsClean
            </summary>
        </member>
        <member name="P:W.PropertyBase`2.Owner">
            <summary>
            The property owner
            </summary>
        </member>
        <member name="P:W.PropertyBase`2.DefaultValue">
            <summary><para>
            Allows the programmer to assign a default value which can be reset via the ResetToDefaultValue method. This value does not have to be the initial value.
            </para></summary>
        </member>
        <member name="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)">
            <summary>
            Resets the Value to the value provided by DefaultValue
            </summary>
            <param name="raise">If True, raise OnPropertyChanged event and call the OnValueChanged callback</param>
        </member>
        <member name="P:W.PropertyBase`2.Value">
            <summary>
            Get/Set the actual value of the Property
            </summary>
        </member>
        <member name="M:W.PropertyBase`2.WaitForChanged(System.Int32)">
            <summary>
            Allows the caller to suspend it's thread until Value changes
            </summary>
            <param name="msTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:W.PropertyBase`2.LoadValue(`1)">
            <summary>
            Loads Value without raising events or calling the OnValueChanged callback
            </summary>
            <remarks>Calling LoadValue sets IsDirty to false</remarks>
            <param name="value">The new value</param>
        </member>
        <member name="M:W.PropertyBase`2.GetValue">
            <summary>
            Gets the property value
            </summary>
            <returns>The property value</returns>
        </member>
        <member name="M:W.PropertyBase`2.SetValue(System.Object,System.String)">
            <summary>
            Sets the property value
            </summary>
            <param name="value">The new property value</param>
            <param name="callerMemberName">For logging purposes; it's not necessary to set</param>
        </member>
        <member name="M:W.PropertyBase`2.OnPropertyChanged(System.String)">
            <summary>
            Raises the OnPropertyChanged event
            </summary>
            <param name="propertyName">The name of the property which changed</param>
        </member>
        <member name="M:W.PropertyBase`2.ExecuteOnValueChanged(`1,`1)">
            <summary>
            Calls the OnValueChanged callback
            </summary>
            <param name="oldValue">The old property value</param>
            <param name="newValue">The new property value</param>
        </member>
        <member name="M:W.PropertyBase`2.RaisePropertyValueChanging(`1,`1,System.Boolean@)">
            <summary>
            Raises the ValueChanging event
            </summary>
            <param name="oldValue">The old property value</param>
            <param name="newValue">The expected new property value</param>
            <param name="cancel">Set to True to cancel the property change</param>
        </member>
        <member name="M:W.PropertyBase`2.RaisePropertyValueChanged(`1,`1)">
            <summary>
            Raises the PropertyValueChanged event
            </summary>
            <param name="oldValue">The old property value</param>
            <param name="newValue">The new property value</param>
        </member>
        <member name="M:W.PropertyBase`2.Dispose">
            <summary>
            Disposes the object and releases resources
            </summary>
        </member>
        <member name="M:W.PropertyBase`2.Finalize">
            <summary>
            Disposes the PropertyBase
            </summary>
        </member>
        <member name="M:W.PropertyMethods.SetValue``1(System.Object,``0@,``0,System.Action{``0,``0,System.String},System.String)">
            <summary>
            Provides thread-safe assignment of a variable and invoking a handler when the change occurs
            </summary>
            <returns>True if the assignment was made, otherwise false</returns>
        </member>
        <member name="M:W.PropertyMethods.LoadValue``1(System.Object,``0@,``0)">
            <summary>
            Provides thread-safe assignment of a variable
            </summary>
            <returns>True if the assignment was made, otherwise false</returns>
        </member>
        <member name="M:W.PropertyMethods.SetValue``1(W.Lockable{``0},``0,System.Action{``0,``0,System.String},System.String)">
            <summary>
            Provides thread-safe assignment of a Lockable object and invoking a handler when the change occurs
            </summary>
            <returns>True if the assignment was made, otherwise false</returns>
        </member>
        <member name="M:W.PropertyMethods.LoadValue``1(W.Lockable{``0},``0)">
            <summary>
            Provides thread-safe assignment of a Lockable object
            </summary>
            <returns>True if the assignment was made, otherwise false</returns>
        </member>
        <member name="T:W.Threading.ThreadExtensions">
            <summary>
            Contains a generic extension method to quickly start a new thread
            </summary>
        </member>
        <member name="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
            <summary>
            Starts a new thread
            </summary>
            <param name="@this">The custom data to be passed to the thread (Action)</param>
            <param name="action">Action to call on a thread</param>
            <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
            <returns>Returns a reference to the new Thread</returns>
        </member>
        <member name="T:W.Threading.Gate">
            <summary>
            <para>
            A Gated thread.  Execution of the Action will proceed when the Run method is called.
            </para>
            </summary>
        </member>
        <member name="M:W.Threading.Gate.CallInvokeAction">
            <summary>
            <para>
            Used to wrap the call to InvokeAction with try/catch handlers.  This method should call InvokeAction.
            </para>
            </summary>
            <returns>An Exception if on occurs, otherwise null</returns>
        </member>
        <member name="M:W.Threading.Gate.Run">
            <summary>
            Allows the Action to be called
            </summary>
        </member>
        <member name="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
            <summary>
            Construct a Gate
            </summary>
            <param name="action"></param>
            <param name="onComplete"></param>
        </member>
        <member name="T:W.Threading.Gate`1">
            <summary>
            <para>
            A Gated thread.  Execution of the Action will proceed when the Run method is called.
            </para>
            </summary>
        </member>
        <member name="M:W.Threading.Gate`1.CallInvokeAction">
            <summary>
            <para>
            Used to wrap the call to InvokeAction with try/catch handlers.  This method should call InvokeAction.
            </para>
            </summary>
            <returns>An Exception if on occurs, otherwise null</returns>
        </member>
        <member name="M:W.Threading.Gate`1.Run">
            <summary>
            Allows the Action to be called
            </summary>
        </member>
        <member name="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
            <summary>
            Construct a Gate
            </summary>
            <param name="action"></param>
            <param name="onComplete"></param>
            <param name="args">Arguments to pass into the underlying thread</param>
        </member>
        <member name="T:W.Threading.Thread">
            <summary>
            A thread wrapper which makes multi-threading easier
            </summary>
        </member>
        <member name="P:W.Threading.Thread.Task">
            <summary>
            The Task/Thread which was created
            </summary>
        </member>
        <member name="M:W.Threading.Thread.CallInvokeAction">
            <summary>
            Called by the host thread procedure, this method calls the Action
            </summary>
            <returns>An Exception object, if an exception ocurred</returns>
        </member>
        <member name="M:W.Threading.Thread.Join">
            <summary>
            Blocks the calling thread until the thread terminates
            </summary>
        </member>
        <member name="M:W.Threading.Thread.Join(System.Int32)">
            <summary>
            Blocks the calling thread until either the thread terminates or the specified milliseconds elapse
            </summary>
            <param name="msTimeout">The number of milliseconds to wait for the thread to terminate</param>
            <returns>True if the thread terminates within the timeout specified, otherwise false</returns>
        </member>
        <member name="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
            <summary>
            Constructs the Thread object
            </summary>
            <param name="action">The Action to be called on a new thread</param>
            <param name="onComplete">The Action to be called when the thread completes</param>
        </member>
        <member name="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
            <summary>
            Starts a new thread
            </summary>
            <param name="action">Action to call on a thread</param>
            <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
            <returns></returns>
        </member>
        <member name="T:W.Threading.Thread`1">
            <summary>
            A thread wrapper which makes multi-threading easier
            </summary>
            <typeparam name="TCustomData">The type of custom data to pass to the thread Action</typeparam>
        </member>
        <member name="P:W.Threading.Thread`1.CustomData">
            <summary>
            The custom data to pass into the Action
            </summary>
        </member>
        <member name="P:W.Threading.Thread`1.Action">
            <summary>
            The Action to be run on a new thread
            </summary>
        </member>
        <member name="M:W.Threading.Thread`1.InvokeAction">
            <summary>
            Invokes the Action
            </summary>
        </member>
        <member name="M:W.Threading.Thread`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
            <summary>
            Constructs a new Thread object
            </summary>
            <param name="action">The Action to be called in the thread</param>
            <param name="onComplete">The Action to be called when the thread completes</param>
            <param name="customData">The custom data to be passed into the thread</param>
        </member>
        <member name="M:W.Threading.Thread`1.Create``1(System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)">
            <summary>
            Starts a new thread
            </summary>
            <param name="action">Action to call on a thread</param>
            <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
            <returns>A new thread with custom data of type TCustomData</returns>
        </member>
        <member name="T:W.Threading.ThreadBase">
            <summary>
            A base class for Thread which should work for all compiler Target types
            </summary>
        </member>
        <member name="P:W.Threading.ThreadBase.Action">
            <summary>
            The Action to execute on the thread
            </summary>
        </member>
        <member name="P:W.Threading.ThreadBase.OnComplete">
            <summary>
            The Action to execute when the thread completes
            </summary>
        </member>
        <member name="P:W.Threading.ThreadBase.Cts">
            <summary>
            The CancellationTokenSource which can be used to cancel the thread
            </summary>
        </member>
        <member name="P:W.Threading.ThreadBase.IsBusy">
            <summary>
            Value is True if the thread is currently running, otherwise False
            </summary>
        </member>
        <member name="P:W.Threading.ThreadBase.Success">
            <summary>
            The Value to send to the OnComplete Action.  True if the thread returns successfully, otherwise False.
            </summary>
        </member>
        <member name="M:W.Threading.ThreadBase.InvokeAction">
            <summary>
            Invokes the Action. Virtual for customization.
            </summary>
        </member>
        <member name="M:W.Threading.ThreadBase.InvokeOnComplete(System.Exception)">
            <summary>
            Invokes the OnComplete action.  Virtual for customization.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:W.Threading.ThreadBase.CallInvokeAction">
            <summary>
            Must be overridden to provide exception handling
            </summary>
            <returns>An Exception object, if an exception ocurred</returns>
        </member>
        <member name="M:W.Threading.ThreadBase.CallInvokeOnComplete(System.Exception)">
            <summary>
            Calls the OnComplete Action when the thread returns
            </summary>
            <param name="e">An Exception object, if an exception ocurred</param>
        </member>
        <member name="M:W.Threading.ThreadBase.ThreadProc">
            <summary>
            The host thread procedure.  This method calls the Action and subsequent OnComplete.
            </summary>
        </member>
        <member name="M:W.Threading.ThreadBase.Cancel">
            <summary>
            <para>
            Cancels the thread by calling Cancel on the CancellationTokenSource.  The value should be checked in the code in the specified Action parameter.
            </para>
            </summary>
        </member>
        <member name="P:W.Threading.ThreadBase.IsRunning">
            <summary>
            True if the thread is running, otherwise false
            </summary>
        </member>
        <member name="M:W.Threading.ThreadBase.Join">
            <summary>
            Blocks the calling thread until the thread terminates
            </summary>
        </member>
        <member name="M:W.Threading.ThreadBase.Join(System.Int32)">
            <summary>
            Blocks the calling thread until either the thread terminates or the specified milliseconds elapse
            </summary>
            <param name="msTimeout">The number of milliseconds to wait for the thread to terminate</param>
            <returns>True if the thread terminates within the timeout specified, otherwise false</returns>
        </member>
        <member name="M:W.Threading.ThreadBase.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
            <summary>
            Starts a new thread
            </summary>
            <param name="action">Action to call on a thread</param>
            <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
            <returns></returns>
        </member>
        <member name="M:W.Threading.ThreadBase.Finalize">
            <summary>
            Destructs the ThreadBase object.  Calls Dispose.
            </summary>
        </member>
        <member name="M:W.Threading.ThreadBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
    </members>
</doc>
