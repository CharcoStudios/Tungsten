<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tungsten.RPC</name>
    </assembly>
    <members>
        <member name="T:W.RPC.Client">
            <summary>
            Provides simple access to a Tungsten RPC Server
            </summary>
        </member>
        <member name="E:W.RPC.Client.Connected">
            <summary>
            Raised when the Client has connected to the Server
            </summary>
        </member>
        <member name="E:W.RPC.Client.Disconnected">
            <summary>
            Raised when the Client has disconnected from the Server
            </summary>
        </member>
        <member name="P:W.RPC.Client.IsConnected">
            <summary>
            True if the Client is currently connected to a Tungsten RPC Server, otherwise False
            </summary>
        </member>
        <member name="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0})">
            <summary>
            Calls a method on the Tungsten RPC Server
            </summary>
            <param name="methodName">The name of the method to call, including full namespace and class name</param>
            <param name="onResponse">A callback where </param>
            <typeparam name="T">The result from the call</typeparam>
            <returns>A ManualResetEvent which can be joined (with or without a timeout) to block the calling thread until a respoonse is received.</returns>
        </member>
        <member name="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])">
            <summary>
            Calls a method on the Tungsten RPC Server
            </summary>
            <param name="methodName">The name of the method to call, including full namespace and class name</param>
            <param name="onResponse">A callback where </param>
            <param name="args">Optional parameters to be passed into the method</param>
            <typeparam name="T">The result from the call</typeparam>
            <returns>A ManualResetEvent which can be joined (with or without a timeout) to block the calling thread until a respoonse is received.</returns>
        </member>
        <member name="M:W.RPC.Client.MakeRPCCall(System.String,System.Action,System.Object[])">
            <summary>
            Not sure I should keep this method.  Shouldn't all RPC calls have a result?  Otherwise, the client wouldn't know if it succeeded.
            </summary>
            <param name="onResponse"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:W.RPC.Client.Connect(System.String,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
            <summary>
            Attempts to connect to a local or remote Tungsten RPC Server
            </summary>
            <param name="remoteAddress">The IP address of the Tungsten RPC Server</param>
            <param name="remotePort">The port on which the Tungsten RPC Server is listening</param>
            <param name="msTimeout">The call will fail if the client can't connect within the specified elapsed time (in milliseconds)</param>
            <returns>A CallResult specifying success/failure and an Exception if one ocurred</returns>
        </member>
        <member name="M:W.RPC.Client.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
            <summary>
            Attempts to connect to a local or remote Tungsten RPC Server
            </summary>
            <param name="remoteAddress">The IP address of the Tungsten RPC Server</param>
            <param name="remotePort">The port on which the Tungsten RPC Server is listening</param>
            <param name="msTimeout">The call will fail if the client can't connect within the specified elapsed time (in milliseconds)</param>
            <returns>A CallResult specifying success/failure and an Exception if one ocurred</returns>
        </member>
        <member name="M:W.RPC.Client.ConnectAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Attempts to connect to a local or remote Tungsten RPC Server asynchronously
            </summary>
            <param name="remoteAddress">The IP address of the Tungsten RPC Server</param>
            <param name="remotePort">The port on which the Tungsten RPC Server is listening</param>
            <param name="msTimeout">The call will fail if the client can't connect within the specified elapsed time (in milliseconds)</param>
            <returns>A Task which can be awaited</returns>
        </member>
        <member name="M:W.RPC.Client.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Attempts to connect to a local or remote Tungsten RPC Server asynchronously
            </summary>
            <param name="remoteAddress">The IP address of the Tungsten RPC Server</param>
            <param name="remotePort">The port on which the Tungsten RPC Server is listening</param>
            <param name="msTimeout">The call will fail if the client can't connect within the specified elapsed time (in milliseconds)</param>
            <returns>A Task which can be awaited</returns>
        </member>
        <member name="M:W.RPC.Client.Disconnect">
            <summary>
            Disconnects from the Server
            </summary>
        </member>
        <member name="M:W.RPC.Client.#ctor">
            <summary>
            Constructs a new Tungsten RPC Client
            </summary>
        </member>
        <member name="M:W.RPC.Client.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a new Tungsten RPC Client and automatically connects to the specified remote server
            </summary>
            <param name="remoteAddress">The IP address of the Tungsten RPC Server</param>
            <param name="remotePort">The port on which the Tungsten RPC Server is listening</param>
            <param name="msTimeout">The call will fail if the client can't connect within the specified elapsed time (in milliseconds)</param>
        </member>
        <member name="M:W.RPC.Client.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Constructs a new Tungsten RPC Client and automatically connects to the specified remote server
            </summary>
            <param name="remoteAddress">The IP address of the Tungsten RPC Server</param>
            <param name="remotePort">The port on which the Tungsten RPC Server is listening</param>
            <param name="msTimeout">The call will fail if the client can't connect within the specified elapsed time (in milliseconds)</param>
        </member>
        <member name="M:W.RPC.Client.Finalize">
            <summary>
            Destructs the Tungsten RPC Client.  Calls Dispose.
            </summary>
        </member>
        <member name="M:W.RPC.Client.Dispose">
            <summary>Disconnects from a Tungsten RPC Server if connected.  Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:W.RPC.Server">
            <summary>
            Hosts an RPC instance
            </summary>
        </member>
        <member name="M:W.RPC.Server.#ctor">
            <summary>
            Constructor for the Server class.  This constructor does not start listening for clients.
            </summary>
        </member>
        <member name="M:W.RPC.Server.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructor for the Server class which automatically starts listening on the specified IP Address and Port
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:W.RPC.Server.Finalize">
            <summary>
            Destructor for the Server class.  Calls Dispose.
            </summary>
        </member>
        <member name="M:W.RPC.Server.Start(System.Net.IPAddress,System.Int32)">
            <summary>
            Starts listening for client connections
            </summary>
            <remarks><para>This method will use reflection to inspect all loaded dlls for classes supporting the RPCClass and RPCMethod attributes</para></remarks>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:W.RPC.Server.Stop">
            <summary>
            Stops listening for client connections
            </summary>
        </member>
        <member name="M:W.RPC.Server.Create(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new Server instance and starts listening on the specified ipAddress and port
            </summary>
            <param name="ipAddress">The network address on which to listen</param>
            <param name="port">The port on which to listen</param>
            <returns>The new Server instance</returns>
        </member>
        <member name="M:W.RPC.Server.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
    </members>
</doc>
