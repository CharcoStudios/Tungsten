<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Tungsten</name>
  </assembly>
  <members>
    <member name="P:W.ActionQueue`1.Count">
      <summary>
            Returns the number of items currently in the queue
            </summary>
    </member>
    <member name="M:W.ActionQueue`1.Enqueue(`0)">
      <summary>
            Places an item in the queue
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:W.ActionQueue`1.Cancel">
      <summary>
            Cancels processing of the queue
            </summary>
    </member>
    <member name="P:W.ActionQueue`1.Queue">
      <summary>
            The reference to the ConcurrentQueue being used
            </summary>
    </member>
    <member name="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)">
      <summary>
            Creates a new ActionQueue
            </summary>
      <param name="onItemAdded">A callback which is called whenever an item has been enqueued</param>
    </member>
    <member name="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)">
      <summary>
            Creates a new ActionQueue
            </summary>
      <param name="onItemAdded">A callback which is called whenever an item has been enqueued</param>
    </member>
    <member name="T:W.CallResult`1">
      <summary>
        <para>
            Generic class to be used as a return value.  CallResult encapsulates a success/failure, an exception and a return value.
            </para>
      </summary>
      <typeparam name="TResult">The type to be used for the Result member (the return value of the function)</typeparam>
    </member>
    <member name="P:W.CallResult`1.Result">
      <summary>
            The return value
            </summary>
    </member>
    <member name="M:W.CallResult`1.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:W.CallResult`1.#ctor(System.Boolean)">
      <summary>
            Constructor accepting an initial Success value
            </summary>
      <param name="success">The initial Success value</param>
    </member>
    <member name="M:W.CallResult`1.#ctor(System.Boolean,`0)">
      <summary>
            Constructor accepting an initial Success value and an initial Result value
            </summary>
      <param name="success">The initial Success value</param>
      <param name="result">The initial Result value</param>
    </member>
    <member name="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)">
      <summary>
            Constructor accepting an initial Success value, an initial Result value and an initial Exception value
            </summary>
      <param name="success">The initial Success value</param>
      <param name="result">The initial Result value</param>
    </member>
    <member name="P:W.CallResult`1.Empty">
      <summary>
            Provides a new instance of an uninitialized CallResult&lt;TResult&gt;
            </summary>
    </member>
    <member name="T:W.CallResult">
      <summary>
            A non-generic return value for a function.  CallResult encapsulates a success/failure and an exception.
            </summary>
    </member>
    <member name="P:W.CallResult.Success">
      <summary>
            Set to True if the function succeeds, otherwise False
            </summary>
    </member>
    <member name="P:W.CallResult.Exception">
      <summary>
            Provide exception data to the caller if desired
            </summary>
    </member>
    <member name="M:W.CallResult.#ctor">
      <summary>
            Default constructor, initializes Success to false
            </summary>
    </member>
    <member name="M:W.CallResult.#ctor(System.Boolean)">
      <summary>
            Constructor which accepts an initial value for Success
            </summary>
      <param name="success">
      </param>
    </member>
    <member name="M:W.CallResult.#ctor(System.Boolean,System.Exception)">
      <summary>
            Constructor which accepts an initial value for Success and an initial value for Exception
            </summary>
      <param name="success">The initial value for Success</param>
      <param name="e">The initial value for Exception</param>
    </member>
    <member name="P:W.CallResult.Empty">
      <summary>
            Provides a new instance of an uninitialized CallResult
            </summary>
    </member>
    <member name="T:W.Lockable`1">
      <summary>
        <para>
            Provides thread safety via locking
            </para>
      </summary>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="P:W.Lockable`1.Value">
      <summary>
        <para>
            Provides automatic locking during read/writes
            </para>
      </summary>
    </member>
    <member name="P:W.Lockable`1.UnlockedValue">
      <summary>
        <para>
            To be used by caller, with LockObject, to batch read/writes under one lock)
            </para>
      </summary>
    </member>
    <member name="M:W.Lockable`1.#ctor">
      <summary>
        <para>
            Constructor which initializes Value with the default of TValue
            </para>
      </summary>
    </member>
    <member name="M:W.Lockable`1.#ctor(`0)">
      <summary>
            Constructor which initializes Value with the specified value
            </summary>
      <param name="value">The initial value for Value</param>
    </member>
    <member name="T:W.Logging.Log">
      <summary>
            Exposes static methods for logging.  LogTheMessage can be assigned a new value for customized logging.
            </summary>
    </member>
    <member name="P:W.Logging.Log.LogTheMessage">
      <summary>
            Configure this Action to log messages the way you like to
            </summary>
    </member>
    <member name="T:W.Logging.Log.LogMessageCategory">
      <summary>
            The log message type
            </summary>
    </member>
    <member name="M:W.Logging.Log.e(System.Exception)">
      <summary>
            Log an Exception
            </summary>
      <param name="e">The exception to log.  This will be boxed with ToString().</param>
    </member>
    <member name="M:W.Logging.Log.e(System.String,System.Object[])">
      <summary>
            Log a formatted exception message. This method uses string.Format to format the message.
            </summary>
      <param name="format">Format of the message</param>
      <param name="args">Parameters to be passed during message formatting</param>
    </member>
    <member name="M:W.Logging.Log.w(System.String,System.Object[])">
      <summary>
            Log a formatted warning message. This method uses string.Format to format the message.
            </summary>
      <param name="format">Format of the message</param>
      <param name="args">Parameters to be passed during message formatting</param>
    </member>
    <member name="M:W.Logging.Log.i(System.String,System.Object[])">
      <summary>
            Log a formatted informational message. This method uses string.Format to format the message.
            </summary>
      <param name="format">Format of the message</param>
      <param name="args">Parameters to be passed during message formatting</param>
    </member>
    <member name="M:W.Logging.Log.v(System.String,System.Object[])">
      <summary>
            Log a formatted verbose message. This method uses string.Format to format the message.
            </summary>
      <param name="format">Format of the message</param>
      <param name="args">Parameters to be passed during message formatting</param>
    </member>
    <member name="T:W.PropertyChangedNotifier">
      <summary>
        <para>
            This is a base class for supporting INotifyPropertyChanged
            </para>
      </summary>
    </member>
    <member name="M:W.PropertyChangedNotifier.GetValue">
      <summary>
        <para>
            Override this method to provide Get functionality
            </para>
      </summary>
      <returns>Unless overridden, this function will always return null</returns>
    </member>
    <member name="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)">
      <summary>
        <para>
            Calls OnPropertyChanged.  This method does not make assignments.  Override this method to make assignments.
            </para>
      </summary>
      <param name="value">
      </param>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)">
      <summary>
        <para>
            Calls RaisePropertyChanged to raise the PropertyChanged event
            </para>
      </summary>
      <param name="propertyName">The name of the property which changed</param>
    </member>
    <member name="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)">
      <summary>
        <para>
            Raises the PropertyChanged event
            </para>
      </summary>
      <param name="sender">The sender is the owner of the property</param>
      <param name="propertyName">The name of the property which changed</param>
    </member>
    <member name="T:W.PropertyHostNotifier">
      <summary>
        <para>
            Provides a base class to automate the IsDirty, MarkAsClean and InitializeProperties functionality
            Note that this class inherits PropertyChangedNotifier for INotifyPropertyChanged support
            </para>
      </summary>
    </member>
    <member name="P:W.PropertyHostNotifier.IsDirty">
      <summary>
            Finds all Properties and checks their IsDirty flag
            </summary>
      <returns>True if any Property's IsDirty flag is true. Otherwise false.</returns>
    </member>
    <member name="M:W.PropertyHostNotifier.MarkAsClean">
      <summary>
            Uses reflection to find all Properties and mark them as clean (call Property.MarkAsClean())
            </summary>
    </member>
    <member name="M:W.PropertyHostNotifier.#ctor">
      <summary>
            Calls PropertyHostMethods.InitializeProperties so you don't have to
            </summary>
    </member>
    <member name="E:W.PropertyBase`2.ValueChanged">
      <summary>
            Raised after Value has changed
            </summary>
    </member>
    <member name="E:W.PropertyBase`2.ValueChanging">
      <summary>
            Raised before Value has changed.  To prevent Value from changing set cancel to true.
            </summary>
    </member>
    <member name="M:W.PropertyBase`2.WaitForChanged(System.Int32)">
      <summary>
            Allows the caller to suspend it's thread until Value changes
            </summary>
      <param name="msTimeout">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:W.PropertyBase`2.LoadValue(`1)">
      <summary>
            Loads Value without raising events or calling the OnValueChanged callback
            </summary>
      <remarks>Calling LoadValue sets IsDirty to false</remarks>
      <param name="value">The new value</param>
    </member>
    <member name="T:W.PropertyHost">
      <summary>
        <para>
            Provides a base class to automate the IsDirty, MarkAsClean and InitializeProperties functionality
            Note that this class does not support INotifyPropertyChanged and is not intented to host owned properties (though nothing prevents you from doing so)
            </para>
      </summary>
    </member>
    <member name="P:W.PropertyHost.IsDirty">
      <summary>
            Finds all Properties and checks their IsDirty flag
            </summary>
      <returns>True if any Property's IsDirty flag is true. Otherwise false.</returns>
    </member>
    <member name="M:W.PropertyHost.MarkAsClean">
      <summary>
            Uses reflection to find all Properties and mark them as clean (call Property.MarkAsClean())
            </summary>
    </member>
    <member name="M:W.PropertyHost.#ctor">
      <summary>
            Calls PropertyHostMethods.InitializeProperties so you don't have to
            </summary>
    </member>
    <member name="T:W.PropertyHostMethods">
      <summary>
            Exposes static PropertyHost extension methods
            </summary>
    </member>
    <member name="M:W.PropertyHostMethods.InitializeProperties(System.Object)">
      <summary>
        <para>
            Scans the fields and properties of "owner" and sets the member's Owner property to "owner"
            This method should be called in the constructor of any class which has IOwnedProperty members
            </para>
      </summary>
      <param name="this">
      </param>
    </member>
    <member name="M:W.PropertyHostMethods.IsDirty(System.Object)">
      <summary>
        <para>
            Scans the IsDirty value of each field and property of type IProperty 
            </para>
      </summary>
      <returns>True if any IProperty member's IsDirty value is true, otherwise false</returns>
    </member>
    <member name="M:W.PropertyHostMethods.MarkAsClean(System.Object)">
      <summary>
        <para>
            Scans each field and property of type IProperty and sets it's IsDirty flag to false
            </para>
      </summary>
    </member>
    <member name="M:W.PropertyMethods.SetValue``1(System.Object,``0@,``0,System.Action{``0,``0,System.String},System.String)">
      <summary>
            Provides thread-safe assignment of a variable and invoking a handler when the change occurs
            </summary>
      <returns>True if the assignment was made, otherwise false</returns>
    </member>
    <member name="M:W.PropertyMethods.LoadValue``1(System.Object,``0@,``0)">
      <summary>
            Provides thread-safe assignment of a variable
            </summary>
      <returns>True if the assignment was made, otherwise false</returns>
    </member>
    <member name="M:W.PropertyMethods.SetValue``1(W.Lockable{``0},``0,System.Action{``0,``0,System.String},System.String)">
      <summary>
            Provides thread-safe assignment of a Lockable object and invoking a handler when the change occurs
            </summary>
      <returns>True if the assignment was made, otherwise false</returns>
    </member>
    <member name="M:W.PropertyMethods.LoadValue``1(W.Lockable{``0},``0)">
      <summary>
            Provides thread-safe assignment of a Lockable object
            </summary>
      <returns>True if the assignment was made, otherwise false</returns>
    </member>
    <member name="T:W.Threading.Gate">
      <summary>
        <para>
            A Gated thread.  Execution of the Action will proceed when the Run method is called.
            </para>
      </summary>
    </member>
    <member name="M:W.Threading.Gate.CallInvokeAction">
      <summary>
        <para>
            Used to wrap the call to InvokeAction with try/catch handlers.  This method should call InvokeAction.
            </para>
      </summary>
      <returns>An Exception if on occurs, otherwise null</returns>
    </member>
    <member name="M:W.Threading.Gate.Run">
      <summary>
            Allows the Action to be called
            </summary>
    </member>
    <member name="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <summary>
            Construct a Gate
            </summary>
      <param name="action">
      </param>
      <param name="onComplete">
      </param>
    </member>
    <member name="T:W.Threading.Gate`1">
      <summary>
        <para>
            A Gated thread.  Execution of the Action will proceed when the Run method is called.
            </para>
      </summary>
    </member>
    <member name="M:W.Threading.Gate`1.CallInvokeAction">
      <summary>
        <para>
            Used to wrap the call to InvokeAction with try/catch handlers.  This method should call InvokeAction.
            </para>
      </summary>
      <returns>An Exception if on occurs, otherwise null</returns>
    </member>
    <member name="M:W.Threading.Gate`1.Run">
      <summary>
            Allows the Action to be called
            </summary>
    </member>
    <member name="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
      <summary>
            Construct a Gate
            </summary>
      <param name="action">
      </param>
      <param name="onComplete">
      </param>
    </member>
    <member name="T:W.Threading.Thread">
      <summary>
            A thread wrapper which makes multi-threading easier
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:W.Threading.Thread.CallInvokeAction">
      <summary>
            Wraps the call to InvokeAction with try/catch block to catch exceptions
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:W.Threading.Thread.Cancel">
      <summary>
        <para>
            Cancels the thread by calling Cancel on the CancellationTokenSource.  The value should be checked in the code in the specified Action parameter.
            </para>
      </summary>
      <param name="msForceAbortDelay">Abort the thread if it doesn't terminate before the specified number of milliseconds elapse</param>
    </member>
    <member name="M:W.Threading.Thread.Cancel(System.Int32)">
      <summary>
        <para>
            Cancels the thread by calling Cancel on the CancellationTokenSource.  The value should be checked in the code in the specified Action parameter.
            </para>
      </summary>
      <param name="msForceAbortDelay">Abort the thread if it doesn't terminate before the specified number of milliseconds elapse</param>
    </member>
    <member name="M:W.Threading.Thread.Join">
      <summary>
            Blocks the calling thread until the thread terminates
            </summary>
    </member>
    <member name="M:W.Threading.Thread.Join(System.Int32)">
      <summary>
            Blocks the calling thread until either the thread terminates or the specified milliseconds elapse
            </summary>
      <param name="msTimeout">The number of milliseconds to wait for the thread to terminate</param>
      <returns>True if the thread terminates within the timeout specified, otherwise false</returns>
    </member>
    <member name="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <summary>
            Starts a new thread
            </summary>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <returns>
      </returns>
    </member>
    <member name="M:W.Threading.Thread.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <summary>
            Starts a new thread
            </summary>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <returns>
      </returns>
    </member>
    <member name="T:W.Threading.Thread`1">
      <summary>
            A thread wrapper which makes multi-threading easier
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:W.Threading.Thread`1.InvokeAction">
      <summary>
            Overridden implementation which calls Action with CustomData
            </summary>
    </member>
    <member name="M:W.Threading.Thread`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
      <summary>
            Starts a new thread
            </summary>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <param name="customData">The data to pass to the call to the thread (Action)</param>
      <returns>
      </returns>
    </member>
    <member name="M:W.Threading.Thread`1.Create(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
      <summary>
            Starts a new thread
            </summary>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <param name="customData">The custom data to pass to the thread (Action)</param>
      <returns>
      </returns>
    </member>
    <member name="T:W.Threading.ThreadBase">
      <summary>
            A base class for Thread which should work for all compiler Target types
            </summary>
    </member>
    <member name="M:W.Threading.ThreadBase.InvokeAction">
      <summary>
            Invokes the Action. Virtual for customization.
            </summary>
    </member>
    <member name="M:W.Threading.ThreadBase.InvokeOnComplete(System.Exception)">
      <summary>
            Invokes the OnComplete action.  Virtual for customization.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:W.Threading.ThreadBase.CallInvokeAction">
      <summary>
            Must be overridden to provide exception handling
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:W.Threading.ThreadBase.Cancel">
      <summary>
        <para>
            Cancels the thread by calling Cancel on the CancellationTokenSource.  The value should be checked in the code in the specified Action parameter.
            </para>
      </summary>
    </member>
    <member name="P:W.Threading.ThreadBase.IsRunning">
      <summary>
            True if the thread is running, otherwise false
            </summary>
    </member>
    <member name="M:W.Threading.ThreadBase.Join">
      <summary>
            Blocks the calling thread until the thread terminates
            </summary>
    </member>
    <member name="M:W.Threading.ThreadBase.Join(System.Int32)">
      <summary>
            Blocks the calling thread until either the thread terminates or the specified milliseconds elapse
            </summary>
      <param name="msTimeout">The number of milliseconds to wait for the thread to terminate</param>
      <returns>True if the thread terminates within the timeout specified, otherwise false</returns>
    </member>
    <member name="M:W.Threading.ThreadBase.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <summary>
            Starts a new thread
            </summary>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <returns>
      </returns>
    </member>
    <member name="M:W.Threading.ThreadBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:W.Threading.ThreadExtensions">
      <summary>
            Contains a generic extension method to quickly start a new thread
            </summary>
    </member>
    <member name="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <summary>
            Starts a new thread
            </summary>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <returns>A reference to the new W.Threading.Thread&lt;T&gt;</returns>
    </member>
    <member name="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)">
      <summary>
            Starts a new thread
            </summary>
      <param name="this">
      </param>
      <param name="action">Action to call on a thread</param>
      <param name="onComplete">Action to call upon comletion.  Executes on the same thread as Action.</param>
      <param name="customData">The data to pass to the thread (Action)</param>
      <typeparam name="T">
      </typeparam>
      <returns>A reference to the new W.Threading.Thread&lt;T&gt;</returns>
    </member>
    <member name="M:W.Threading.GateMethods.CreateGate(System.Action{System.Threading.CancellationTokenSource})">
      <summary>
            Creates a Gate with the supplied action
            </summary>
      <param name="action">The Action to call when the gate is relased (when Run is called)</param>
      <returns>A reference to a new Gate</returns>
    </member>
    <member name="M:W.Threading.GateMethods.CreateGate``1(System.Action{``0,System.Threading.CancellationTokenSource})">
      <summary>
            Creates a Gate with the supplied action
            </summary>
      <param name="action">The Action to call when the gate is relased (when Run is called)</param>
      <returns>A reference to a new Gate</returns>
    </member>
    <member name="N:W">
      <summary />
    </member>
    <member name="N:W.Logging">
      <summary />
    </member>
    <member name="N:W.Threading">
      <summary />
    </member>
  </members>
</doc>