<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Tungsten.Domains">
      <assemblydata version="1.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Tungsten.LiteDb">
      <assemblydata version="1.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Tungsten.RPC.Interfaces">
      <assemblydata version="1.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Tungsten.RPC">
      <assemblydata version="1.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Tungsten">
      <assemblydata version="1.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:W">
      <apidata name="W" group="namespace" />
      <elements>
        <element api="T:W.ActionQueue`1" />
        <element api="T:W.CallResult`1" />
        <element api="T:W.CallResult" />
        <element api="T:W.InvokeExtensions" />
        <element api="T:W.Lockable`1" />
        <element api="T:W.PropertyChangedNotifier" />
        <element api="T:W.PropertyHostNotifier" />
        <element api="T:W.IOwnedProperty" />
        <element api="T:W.IProperty`1" />
        <element api="T:W.IProperty" />
        <element api="T:W.Property`2" />
        <element api="T:W.Property`1" />
        <element api="T:W.PropertyBase`2" />
        <element api="T:W.PropertyBase`2.PropertyValueChangingDelegate" />
        <element api="T:W.PropertyBase`2.PropertyValueChangedDelegate" />
        <element api="T:W.PropertyBase`2.OnValueChangedDelegate" />
        <element api="T:W.PropertyHost" />
        <element api="T:W.PropertyHostMethods" />
      </elements>
    </api>
    <api id="T:W.ActionQueue`1">
      <apidata name="ActionQueue" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:W.ActionQueue`1.Enqueue(`0)" />
        <element api="M:W.ActionQueue`1.Cancel" />
        <element api="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)" />
        <element api="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)" />
        <element api="P:W.ActionQueue`1.Count" />
        <element api="P:W.ActionQueue`1.Queue" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onItemAdded">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.ActionQueue`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onItemAdded">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.ActionQueue`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.Cancel">
      <apidata name="Cancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.ActionQueue`1.Count">
      <apidata name="Count" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Count" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.Enqueue(`0)">
      <apidata name="Enqueue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:W.ActionQueue`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.ActionQueue`1.Queue">
      <apidata name="Queue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Queue" />
      <returns>
        <type api="T:System.Collections.Concurrent.ConcurrentQueue`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:W.ActionQueue`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.CallResult">
      <apidata name="CallResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.CallResult`1" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:W.CallResult.#ctor" />
        <element api="M:W.CallResult.#ctor(System.Boolean)" />
        <element api="M:W.CallResult.#ctor(System.Boolean,System.Exception)" />
        <element api="P:W.CallResult.Success" />
        <element api="P:W.CallResult.Exception" />
        <element api="P:W.CallResult.Empty" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.CallResult.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult.#ctor(System.Boolean,System.Exception)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult.Empty">
      <apidata name="Empty" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Empty" />
      <returns>
        <type api="T:W.CallResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult.Exception">
      <apidata name="Exception" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Exception" />
      <setter name="set_Exception" />
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult.Success">
      <apidata name="Success" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Success" />
      <setter name="set_Success" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="T:W.CallResult`1">
      <apidata name="CallResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.CallResult" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TResult" />
      </templates>
      <elements>
        <element api="M:W.CallResult`1.#ctor" />
        <element api="M:W.CallResult`1.#ctor(System.Boolean)" />
        <element api="M:W.CallResult`1.#ctor(System.Boolean,`0)" />
        <element api="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)" />
        <element api="P:W.CallResult`1.Result" />
        <element api="P:W.CallResult`1.Empty" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor(System.Boolean,`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="result">
          <template name="TResult" index="0" api="T:W.CallResult`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="result">
          <template name="TResult" index="0" api="T:W.CallResult`1" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult`1.Empty">
      <apidata name="Empty" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Empty" />
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="T:W.CallResult`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult`1.Result">
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Result" />
      <setter name="set_Result" />
      <returns>
        <template name="TResult" index="0" api="T:W.CallResult`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.InvokeExtensions">
      <apidata name="InvokeExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" />
        <element api="M:W.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
        <element api="M:W.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})">
      <apidata name="InvokeEx" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ComponentModel.ISynchronizeInvoke" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.InvokeExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})">
      <apidata name="InvokeEx" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ComponentModel.ISynchronizeInvoke" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.InvokeExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})">
      <apidata name="InvokeEx" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ComponentModel.ISynchronizeInvoke" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="U" />
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
              <template name="U" index="1" api="M:W.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="U" index="1" api="M:W.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.InvokeExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:W.IOwnedProperty">
      <apidata name="IOwnedProperty" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.Property`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.IOwnedProperty.SetOwner(System.Object)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.IOwnedProperty.SetOwner(System.Object)">
      <apidata name="SetOwner" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="owner">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.IOwnedProperty" ref="true" />
      </containers>
    </api>
    <api id="T:W.IProperty">
      <apidata name="IProperty" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.IProperty`1" ref="true" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </implementors>
      <elements>
        <element api="P:W.IProperty.IsDirty" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="P:W.IProperty.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDirty" />
      <setter name="set_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.IProperty" ref="true" />
      </containers>
    </api>
    <api id="T:W.IProperty`1">
      <apidata name="IProperty" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:W.IProperty" ref="true" />
      </implements>
      <implementors>
        <type api="T:W.PropertyBase`2" ref="true" />
      </implementors>
      <elements>
        <element api="P:W.IProperty`1.Value" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="P:W.IProperty`1.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <template name="TValue" index="0" api="T:W.IProperty`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.IProperty`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Lockable`1">
      <apidata name="Lockable" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:W.Lockable`1.#ctor" />
        <element api="M:W.Lockable`1.#ctor(`0)" />
        <element api="P:W.Lockable`1.LockObject" />
        <element api="P:W.Lockable`1.Value" />
        <element api="P:W.Lockable`1.UnlockedValue" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="value">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.Lockable`1.LockObject">
      <apidata name="LockObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LockObject" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.Lockable`1.UnlockedValue">
      <apidata name="UnlockedValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UnlockedValue" />
      <setter name="set_UnlockedValue" />
      <returns>
        <template name="TValue" index="0" api="T:W.Lockable`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.Lockable`1.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <template name="TValue" index="0" api="T:W.Lockable`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Property`1">
      <apidata name="Property" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <type api="T:W.Property`1" ref="true">
                <specialization>
                  <template name="TValue" index="0" api="T:W.Property`1" />
                </specialization>
              </type>
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:W.PropertyChangedNotifier" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:W.Property`1.#ctor" />
        <element api="M:W.Property`1.#ctor(`0)" />
        <element api="M:W.Property`1.#ctor(W.PropertyBase{W.Property{`0},`0}.OnValueChangedDelegate)" />
        <element api="M:W.Property`1.#ctor(`0,W.PropertyBase{W.Property{`0},`0}.OnValueChangedDelegate)" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="0" api="T:W.Property`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor(`0,W.PropertyBase{W.Property{`0},`0}.OnValueChangedDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="0" api="T:W.Property`1" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:W.PropertyBase`2.OnValueChangedDelegate" ref="true">
            <type api="T:W.PropertyBase`2" ref="true">
              <specialization>
                <type api="T:W.Property`1" ref="true">
                  <specialization>
                    <template name="TValue" index="0" api="T:W.Property`1" />
                  </specialization>
                </type>
                <template name="TValue" index="0" api="T:W.Property`1" />
              </specialization>
            </type>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor(W.PropertyBase{W.Property{`0},`0}.OnValueChangedDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged">
          <type api="T:W.PropertyBase`2.OnValueChangedDelegate" ref="true">
            <type api="T:W.PropertyBase`2" ref="true">
              <specialization>
                <type api="T:W.Property`1" ref="true">
                  <specialization>
                    <template name="TValue" index="0" api="T:W.Property`1" />
                  </specialization>
                </type>
                <template name="TValue" index="0" api="T:W.Property`1" />
              </specialization>
            </type>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Property`2">
      <apidata name="Property" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <template name="TOwner" index="0" api="T:W.Property`2" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:W.PropertyChangedNotifier" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TOwner">
          <constrained ref="true" />
        </template>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:W.IOwnedProperty" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Property`2.#ctor" />
        <element api="M:W.Property`2.#ctor(`1)" />
        <element api="M:W.Property`2.#ctor(W.PropertyBase{`0,`1}.OnValueChangedDelegate)" />
        <element api="M:W.Property`2.#ctor(`0)" />
        <element api="M:W.Property`2.#ctor(`0,`1)" />
        <element api="M:W.Property`2.#ctor(`0,W.PropertyBase{`0,`1}.OnValueChangedDelegate)" />
        <element api="M:W.Property`2.#ctor(`0,`1,W.PropertyBase{`0,`1}.OnValueChangedDelegate)" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0,`1)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0,`1,W.PropertyBase{`0,`1}.OnValueChangedDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:W.PropertyBase`2.OnValueChangedDelegate" ref="true">
            <type api="T:W.PropertyBase`2" ref="true">
              <specialization>
                <template name="TOwner" index="0" api="T:W.Property`2" />
                <template name="TValue" index="1" api="T:W.Property`2" />
              </specialization>
            </type>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0,W.PropertyBase{`0,`1}.OnValueChangedDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
        <parameter name="onValueChanged" optional="true">
          <type api="T:W.PropertyBase`2.OnValueChangedDelegate" ref="true">
            <type api="T:W.PropertyBase`2" ref="true">
              <specialization>
                <template name="TOwner" index="0" api="T:W.Property`2" />
                <template name="TValue" index="1" api="T:W.Property`2" />
              </specialization>
            </type>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`1)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(W.PropertyBase{`0,`1}.OnValueChangedDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged" optional="true">
          <type api="T:W.PropertyBase`2.OnValueChangedDelegate" ref="true">
            <type api="T:W.PropertyBase`2" ref="true">
              <specialization>
                <template name="TOwner" index="0" api="T:W.Property`2" />
                <template name="TValue" index="1" api="T:W.Property`2" />
              </specialization>
            </type>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyBase`2">
      <apidata name="PropertyBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyChangedNotifier" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Property`2" ref="true" />
          <type api="T:W.Property`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TOwner">
          <constrained ref="true" />
        </template>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:W.IProperty`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:W.PropertyBase`2" />
          </specialization>
        </type>
        <type api="T:W.IProperty" ref="true" />
      </implements>
      <elements>
        <element api="F:W.PropertyBase`2.OnValueChanged" />
        <element api="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)" />
        <element api="M:W.PropertyBase`2.WaitForChanged(System.Int32)" />
        <element api="M:W.PropertyBase`2.LoadValue(`1)" />
        <element api="M:W.PropertyBase`2.GetValue" />
        <element api="M:W.PropertyBase`2.SetValue(System.Object,System.String)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyBase`2.ExecuteOnValueChanged(`1,`1)" />
        <element api="M:W.PropertyBase`2.RaisePropertyValueChanging(`1,`1,System.Boolean@)" />
        <element api="M:W.PropertyBase`2.RaisePropertyValueChanged(`1,`1)" />
        <element api="M:W.PropertyBase`2.#ctor" />
        <element api="P:W.PropertyBase`2.IsDirty" />
        <element api="P:W.PropertyBase`2.Owner" />
        <element api="P:W.PropertyBase`2.DefaultValue" />
        <element api="P:W.PropertyBase`2.Value" />
        <element api="E:W.PropertyBase`2.ValueChanged" />
        <element api="E:W.PropertyBase`2.ValueChanging" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.DefaultValue">
      <apidata name="DefaultValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DefaultValue" />
      <setter name="set_DefaultValue" />
      <returns>
        <template name="TValue" index="1" api="T:W.PropertyBase`2" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.ExecuteOnValueChanged(`1,`1)">
      <apidata name="ExecuteOnValueChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.GetValue">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.PropertyChangedNotifier.GetValue">
          <type api="T:W.PropertyChangedNotifier" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDirty" />
      <setter name="set_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:W.IProperty.IsDirty">
          <type api="T:W.IProperty" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.LoadValue(`1)">
      <apidata name="LoadValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.OnPropertyChanged(System.String)">
      <apidata name="OnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)">
          <type api="T:W.PropertyChangedNotifier" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="F:W.PropertyBase`2.OnValueChanged">
      <apidata name="OnValueChanged" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.PropertyBase`2.OnValueChangedDelegate" ref="true">
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.Owner">
      <apidata name="Owner" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Owner" />
      <setter name="set_Owner" />
      <returns>
        <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.RaisePropertyValueChanged(`1,`1)">
      <apidata name="RaisePropertyValueChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.RaisePropertyValueChanging(`1,`1,System.Boolean@)">
      <apidata name="RaisePropertyValueChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="cancel">
          <referenceTo>
            <type api="T:System.Boolean" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)">
      <apidata name="ResetToDefaultValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="raise">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.SetValue(System.Object,System.String)">
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)">
          <type api="T:W.PropertyChangedNotifier" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <template name="TValue" index="1" api="T:W.PropertyBase`2" />
      </returns>
      <implements>
        <member api="P:W.IProperty`1.Value">
          <type api="T:W.IProperty`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="E:W.PropertyBase`2.ValueChanged">
      <apidata name="ValueChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ValueChanged" />
      <remover name="remove_ValueChanged" />
      <eventhandler>
        <type api="T:W.PropertyBase`2.PropertyValueChangedDelegate" ref="true">
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="E:W.PropertyBase`2.ValueChanging">
      <apidata name="ValueChanging" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ValueChanging" />
      <remover name="remove_ValueChanging" />
      <eventhandler>
        <type api="T:W.PropertyBase`2.PropertyValueChangingDelegate" ref="true">
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.WaitForChanged(System.Int32)">
      <apidata name="WaitForChanged" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyBase`2.OnValueChangedDelegate">
      <apidata name="OnValueChangedDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyBase`2.PropertyValueChangedDelegate">
      <apidata name="PropertyValueChangedDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyBase`2.PropertyValueChangingDelegate">
      <apidata name="PropertyValueChangingDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="cancel">
          <referenceTo>
            <type api="T:System.Boolean" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyChangedNotifier">
      <apidata name="PropertyChangedNotifier" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.PropertyHostNotifier" ref="true" />
          <type api="T:W.PropertyBase`2" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
      </implements>
      <elements>
        <element api="M:W.PropertyChangedNotifier.GetValue" />
        <element api="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)" />
        <element api="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="M:W.PropertyChangedNotifier.#ctor" />
        <element api="E:W.PropertyChangedNotifier.PropertyChanged" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.GetValue">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)">
      <apidata name="OnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="E:W.PropertyChangedNotifier.PropertyChanged">
      <apidata name="PropertyChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanged" />
      <remover name="remove_PropertyChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
          <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)">
      <apidata name="RaiseOnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)">
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyHost">
      <apidata name="PropertyHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.PropertyHost.MarkAsClean" />
        <element api="M:W.PropertyHost.#ctor" />
        <element api="P:W.PropertyHost.IsDirty" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyHost.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHost" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyHost.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHost" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyHost.MarkAsClean">
      <apidata name="MarkAsClean" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHost" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyHostMethods">
      <apidata name="PropertyHostMethods" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" />
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" />
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.PropertyHostMethods.InitializeProperties(System.Object)">
      <apidata name="InitializeProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.PropertyHostMethods.IsDirty(System.Object)">
      <apidata name="IsDirty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.PropertyHostMethods.MarkAsClean(System.Object)">
      <apidata name="MarkAsClean" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:W.PropertyHostNotifier">
      <apidata name="PropertyHostNotifier" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyChangedNotifier" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.PropertyHostNotifier.MarkAsClean" />
        <element api="M:W.PropertyHostNotifier.#ctor" />
        <element api="P:W.PropertyHostNotifier.IsDirty" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyHostNotifier.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostNotifier" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyHostNotifier.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyHostNotifier.MarkAsClean">
      <apidata name="MarkAsClean" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostNotifier" ref="true" />
      </containers>
    </api>
    <api id="N:W.Domains">
      <apidata name="W.Domains" group="namespace" />
      <elements>
        <element api="T:W.Domains.IDomainLoader" />
        <element api="T:W.Domains.DomainLoader" />
      </elements>
    </api>
    <api id="T:W.Domains.DomainLoader">
      <apidata name="DomainLoader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:W.Domains.IDomainLoader" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Domains.DomainLoader.#ctor(System.String,System.Boolean)" />
        <element api="M:W.Domains.DomainLoader.#ctor(System.String,System.String,System.Boolean)" />
        <element api="M:W.Domains.DomainLoader.Finalize" />
        <element api="M:W.Domains.DomainLoader.Dispose" />
        <element api="M:W.Domains.DomainLoader.Unload" />
        <element api="M:W.Domains.DomainLoader.Load" />
        <element api="M:W.Domains.DomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.DomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.DomainLoader.Execute``1(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.DomainLoader.Execute(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.DomainLoader.Create``1(System.String)" />
        <element api="M:W.Domains.DomainLoader.Create(System.String)" />
        <element api="M:W.Domains.DomainLoader.DoCallback(System.Action)" />
        <element api="M:W.Domains.DomainLoader.SetData(System.String,System.Object)" />
        <element api="M:W.Domains.DomainLoader.GetData``1(System.String)" />
        <element api="P:W.Domains.DomainLoader.DomainName" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.#ctor(System.String,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="relativeSubFolderForDomain">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="useShadowCopy" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.#ctor(System.String,System.String,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="domainName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="relativeSubFolderForDomain">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="useShadowCopy" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Create``1(System.String)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TInterfaceType" />
      </templates>
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TInterfaceType" index="0" api="M:W.Domains.DomainLoader.Create``1(System.String)" />
      </returns>
      <implements>
        <member api="M:W.Domains.IDomainLoader.Create``1(System.String)">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Create(System.String)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Domains.IDomainLoader.Create(System.String)">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:W.Domains.IDomainLoader.Dispose">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.DoCallback(System.Action)">
      <apidata name="DoCallback" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="P:W.Domains.DomainLoader.DomainName">
      <apidata name="DomainName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DomainName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Execute``1(System.String,System.String,System.Object[])">
      <apidata name="Execute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Domains.DomainLoader.Execute``1(System.String,System.String,System.Object[])" />
      </returns>
      <implements>
        <member api="M:W.Domains.IDomainLoader.Execute``1(System.String,System.String,System.Object[])">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Execute(System.String,System.String,System.Object[])">
      <apidata name="Execute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Domains.IDomainLoader.Execute(System.String,System.String,System.Object[])">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
      <apidata name="ExecuteStaticMethod" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="staticMethodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Domains.DomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])" />
      </returns>
      <implements>
        <member api="M:W.Domains.IDomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
      <apidata name="ExecuteStaticMethod" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="staticMethodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Domains.IDomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.GetData``1(System.String)">
      <apidata name="GetData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TData" />
      </templates>
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TData" index="0" api="M:W.Domains.DomainLoader.GetData``1(System.String)" />
      </returns>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Load">
      <apidata name="Load" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:W.Domains.IDomainLoader.Load">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.SetData(System.String,System.Object)">
      <apidata name="SetData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="data">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.DomainLoader.Unload">
      <apidata name="Unload" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:W.Domains.IDomainLoader.Unload">
          <type api="T:W.Domains.IDomainLoader" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </containers>
    </api>
    <api id="T:W.Domains.IDomainLoader">
      <apidata name="IDomainLoader" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.Domains.DomainLoader" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.Domains.IDomainLoader.Load" />
        <element api="M:W.Domains.IDomainLoader.Unload" />
        <element api="M:W.Domains.IDomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.IDomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.IDomainLoader.Execute``1(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.IDomainLoader.Execute(System.String,System.String,System.Object[])" />
        <element api="M:W.Domains.IDomainLoader.Create(System.String)" />
        <element api="M:W.Domains.IDomainLoader.Create``1(System.String)" />
        <element api="M:W.Domains.IDomainLoader.Dispose" />
      </elements>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Create(System.String)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Create``1(System.String)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TInterfaceType" />
      </templates>
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TInterfaceType" index="0" api="M:W.Domains.IDomainLoader.Create``1(System.String)" />
      </returns>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Execute``1(System.String,System.String,System.Object[])">
      <apidata name="Execute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Domains.IDomainLoader.Execute``1(System.String,System.String,System.Object[])" />
      </returns>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Execute(System.String,System.String,System.Object[])">
      <apidata name="Execute" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
      <apidata name="ExecuteStaticMethod" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="staticMethodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Domains.IDomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])" />
      </returns>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
      <apidata name="ExecuteStaticMethod" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="staticMethodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Load">
      <apidata name="Load" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="M:W.Domains.IDomainLoader.Unload">
      <apidata name="Unload" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.Domains" module="Tungsten.Domains" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Domains" />
        <type api="T:W.Domains.IDomainLoader" ref="true" />
      </containers>
    </api>
    <api id="N:W.LiteDb">
      <apidata name="W.LiteDb" group="namespace" />
      <elements>
        <element api="T:W.LiteDb.ILiteDbItem" />
        <element api="T:W.LiteDb.LiteDbItem" />
        <element api="T:W.LiteDb.LiteDbMethods" />
      </elements>
    </api>
    <api id="T:W.LiteDb.ILiteDbItem">
      <apidata name="ILiteDbItem" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.LiteDb.LiteDbItem" ref="true" />
      </implementors>
      <elements>
        <element api="P:W.LiteDb.ILiteDbItem._id" />
      </elements>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
      </containers>
    </api>
    <api id="P:W.LiteDb.ILiteDbItem._id">
      <apidata name="_id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get__id" />
      <setter name="set__id" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.ILiteDbItem" ref="true" />
      </containers>
    </api>
    <api id="T:W.LiteDb.LiteDbItem">
      <apidata name="LiteDbItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:W.LiteDb.ILiteDbItem" ref="true" />
      </implements>
      <elements>
        <element api="M:W.LiteDb.LiteDbItem.#ctor" />
        <element api="P:W.LiteDb.LiteDbItem._id" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbItem.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbItem" ref="true" />
      </containers>
    </api>
    <api id="P:W.LiteDb.LiteDbItem._id">
      <apidata name="_id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get__id" />
      <setter name="set__id" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:W.LiteDb.ILiteDbItem._id">
          <type api="T:W.LiteDb.ILiteDbItem" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbItem" ref="true" />
      </containers>
    </api>
    <api id="T:W.LiteDb.LiteDbMethods">
      <apidata name="LiteDbMethods" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,``1},System.String,System.String,System.Int32)" />
        <element api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
        <element api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteTransaction,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
        <element api="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(LiteDB.LiteDatabase,System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(LiteDB.LiteCollection{``0},System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(System.String,System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.Exists``1(System.String,System.String,System.Object)" />
        <element api="M:W.LiteDb.LiteDbMethods.Exists``1(System.String,System.Func{``0,System.Boolean})" />
        <element api="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.String,System.Object)" />
        <element api="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.Func{``0,System.Boolean})" />
        <element api="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.String,System.Object)" />
        <element api="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.Func{``0,System.Boolean})" />
        <element api="M:W.LiteDb.LiteDbMethods.Find``1(System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.Save``1(System.String,``0)" />
        <element api="M:W.LiteDb.LiteDbMethods.Save``1(System.String,System.Collections.Generic.List{``0})" />
        <element api="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.Int32)" />
        <element api="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.String,System.Object)" />
        <element api="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.Func{``0,System.Boolean})" />
        <element api="M:W.LiteDb.LiteDbMethods.Drop``1(System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.FileSize(System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.SaveBitmap(System.String,System.String,System.Drawing.Bitmap)" />
        <element api="M:W.LiteDb.LiteDbMethods.DownloadAndSaveBitmap(System.String,System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.LoadBitmap(System.String,System.String)" />
        <element api="M:W.LiteDb.LiteDbMethods.DeleteBitmap(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.Func{``0,System.Boolean})">
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="match">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.Func{``0,System.Boolean})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.Int32)">
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Delete``1(System.String,System.String,System.Object)">
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldValue">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.DeleteBitmap(System.String,System.String)">
      <apidata name="DeleteBitmap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="url">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.DownloadAndSaveBitmap(System.String,System.String)">
      <apidata name="DownloadAndSaveBitmap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="url">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Drop``1(System.String)">
      <apidata name="Drop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(LiteDB.LiteCollection{``0},System.String)">
      <apidata name="EnsureIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TItemType">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="collection">
          <type api="T:LiteDB.LiteCollection`1" ref="true">
            <specialization>
              <template name="TItemType" index="0" api="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(LiteDB.LiteCollection{``0},System.String)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(LiteDB.LiteDatabase,System.String)">
      <apidata name="EnsureIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TItemType">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="db">
          <type api="T:LiteDB.LiteDatabase" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.EnsureIndex``1(System.String,System.String)">
      <apidata name="EnsureIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TItemType">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Exists``1(System.String,System.Func{``0,System.Boolean})">
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="match">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Exists``1(System.String,System.Func{``0,System.Boolean})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Exists``1(System.String,System.String,System.Object)">
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldValue">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.FileSize(System.String)">
      <apidata name="FileSize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Find``1(System.String)">
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Find``1(System.String)" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.Func{``0,System.Boolean})">
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="match">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.Func{``0,System.Boolean})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.Func{``0,System.Boolean})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.String,System.Object)">
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldValue">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Find``1(System.String,System.String,System.Object)" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.Func{``0,System.Boolean})">
      <apidata name="FindOne" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="match">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.Func{``0,System.Boolean})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.Func{``0,System.Boolean})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.String,System.Object)">
      <apidata name="FindOne" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldValue">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.FindOne``1(System.String,System.String,System.Object)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,``1},System.String,System.String,System.Int32)">
      <apidata name="LiteDbAction" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
        <template name="U" />
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:LiteDB.LiteDatabase" ref="true" />
              <template name="U" index="1" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,``1},System.String,System.String,System.Int32)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerFilePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerLineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="U" index="1" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,``1},System.String,System.String,System.Int32)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)">
      <apidata name="LiteDbAction" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
        <template name="U" />
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <type api="T:LiteDB.LiteDatabase" ref="true" />
              <type api="T:LiteDB.LiteCollection`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
                </specialization>
              </type>
              <template name="U" index="1" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerFilePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerLineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="U" index="1" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteTransaction,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)">
      <apidata name="LiteDbAction" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true" />
        </template>
        <template name="U" />
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <type api="T:LiteDB.LiteDatabase" ref="true" />
              <type api="T:LiteDB.LiteTransaction" ref="true" />
              <type api="T:LiteDB.LiteCollection`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteTransaction,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
                </specialization>
              </type>
              <template name="U" index="1" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteTransaction,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerFilePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerLineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="U" index="1" api="M:W.LiteDb.LiteDbMethods.LiteDbAction``2(System.String,System.Func{LiteDB.LiteDatabase,LiteDB.LiteTransaction,LiteDB.LiteCollection{``0},``1},System.String,System.String,System.Int32)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.LoadBitmap(System.String,System.String)">
      <apidata name="LoadBitmap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="url">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Bitmap" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Save``1(System.String,System.Collections.Generic.List{``0})">
      <apidata name="Save" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" ctor="true">
            <implements>
              <type api="T:W.LiteDb.ILiteDbItem" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="items">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Save``1(System.String,System.Collections.Generic.List{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Save``1(System.String,System.Collections.Generic.List{``0})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.Save``1(System.String,``0)">
      <apidata name="Save" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ctor="true">
            <implements>
              <type api="T:W.LiteDb.ILiteDbItem" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="item">
          <template name="T" index="0" api="M:W.LiteDb.LiteDbMethods.Save``1(System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.LiteDb.LiteDbMethods.SaveBitmap(System.String,System.String,System.Drawing.Bitmap)">
      <apidata name="SaveBitmap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="url">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="bitmap">
          <type api="T:System.Drawing.Bitmap" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Bitmap" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.LiteDb" module="Tungsten.LiteDb" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LiteDb" />
        <type api="T:W.LiteDb.LiteDbMethods" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.Logging">
      <apidata name="W.Logging" group="namespace" />
      <elements>
        <element api="T:W.Logging.Log" />
        <element api="T:W.Logging.Log.LogMessageCategory" />
      </elements>
    </api>
    <api id="T:W.Logging.Log">
      <apidata name="Log" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Logging.Log.e(System.Exception)" />
        <element api="M:W.Logging.Log.e(System.String,System.Object[])" />
        <element api="M:W.Logging.Log.w(System.String,System.Object[])" />
        <element api="M:W.Logging.Log.i(System.String,System.Object[])" />
        <element api="M:W.Logging.Log.v(System.String,System.Object[])" />
        <element api="P:W.Logging.Log.LogTheMessage" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.e(System.Exception)">
      <apidata name="e" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.e(System.String,System.Object[])">
      <apidata name="e" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.i(System.String,System.Object[])">
      <apidata name="i" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogTheMessage">
      <apidata name="LogTheMessage" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogTheMessage" />
      <setter name="set_LogTheMessage" />
      <returns>
        <type api="T:System.Action`2" ref="true">
          <specialization>
            <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
              <type api="T:W.Logging.Log" ref="true" />
            </type>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.v(System.String,System.Object[])">
      <apidata name="v" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.w(System.String,System.Object[])">
      <apidata name="w" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="T:W.Logging.Log.LogMessageCategory">
      <apidata name="LogMessageCategory" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:W.Logging.Log.LogMessageCategory.Verbose" />
        <element api="F:W.Logging.Log.LogMessageCategory.Information" />
        <element api="F:W.Logging.Log.LogMessageCategory.Warning" />
        <element api="F:W.Logging.Log.LogMessageCategory.Error" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Error">
      <apidata name="Error" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Information">
      <apidata name="Information" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Verbose">
      <apidata name="Verbose" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Warning">
      <apidata name="Warning" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="N:W.RPC">
      <apidata name="W.RPC" group="namespace" />
      <elements>
        <element api="T:W.RPC.Constants" />
        <element api="T:W.RPC.Delegates" />
        <element api="T:W.RPC.Delegates.ConnectionTimeoutDelegate" />
        <element api="T:W.RPC.Delegates.ConnectedDelegate" />
        <element api="T:W.RPC.Delegates.DisconnectedDelegate" />
        <element api="T:W.RPC.ISocketClient" />
        <element api="T:W.RPC.IClient" />
        <element api="T:W.RPC.Client" />
        <element api="T:W.RPC.Server" />
        <element api="T:W.RPC.RPCClassAttribute" />
        <element api="T:W.RPC.RPCMethodAttribute" />
      </elements>
    </api>
    <api id="T:W.RPC.Client">
      <apidata name="Client" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:W.RPC.IClient" ref="true" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </implements>
      <elements>
        <element api="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0})" />
        <element api="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])" />
        <element api="M:W.RPC.Client.MakeRPCCall(System.String,System.Action,System.Object[])" />
        <element api="M:W.RPC.Client.Connect(System.String,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})" />
        <element api="M:W.RPC.Client.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})" />
        <element api="M:W.RPC.Client.ConnectAsync(System.String,System.Int32,System.Int32)" />
        <element api="M:W.RPC.Client.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)" />
        <element api="M:W.RPC.Client.Disconnect" />
        <element api="M:W.RPC.Client.#ctor" />
        <element api="M:W.RPC.Client.#ctor(System.String,System.Int32,System.Int32)" />
        <element api="M:W.RPC.Client.#ctor(System.Net.IPAddress,System.Int32,System.Int32)" />
        <element api="M:W.RPC.Client.Finalize" />
        <element api="M:W.RPC.Client.Dispose" />
        <element api="P:W.RPC.Client.IsConnected" />
        <element api="E:W.RPC.Client.Connected" />
        <element api="E:W.RPC.Client.Disconnected" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.#ctor(System.String,System.Int32,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
      <apidata name="Connect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
        <parameter name="onConnection" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:W.RPC.ISocketClient" ref="true" />
              <type api="T:System.Net.IPAddress" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="onException" optional="true">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:W.RPC.ISocketClient.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.Connect(System.String,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
      <apidata name="Connect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
        <parameter name="onConnection" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:W.RPC.ISocketClient" ref="true" />
              <type api="T:System.Net.IPAddress" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="onException" optional="true">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:W.RPC.ISocketClient.Connect(System.String,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)">
      <apidata name="ConnectAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.RPC.ISocketClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.ConnectAsync(System.String,System.Int32,System.Int32)">
      <apidata name="ConnectAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.RPC.ISocketClient.ConnectAsync(System.String,System.Int32,System.Int32)">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="E:W.RPC.Client.Connected">
      <apidata name="Connected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Connected" />
      <remover name="remove_Connected" />
      <eventhandler>
        <type api="T:W.RPC.Delegates.ConnectedDelegate" ref="true">
          <type api="T:W.RPC.Delegates" ref="true" />
        </type>
      </eventhandler>
      <implements>
        <member api="E:W.RPC.ISocketClient.Connected">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.Disconnect">
      <apidata name="Disconnect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:W.RPC.ISocketClient.Disconnect">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="E:W.RPC.Client.Disconnected">
      <apidata name="Disconnected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Disconnected" />
      <remover name="remove_Disconnected" />
      <eventhandler>
        <type api="T:W.RPC.Delegates.DisconnectedDelegate" ref="true">
          <type api="T:W.RPC.Delegates" ref="true" />
        </type>
      </eventhandler>
      <implements>
        <member api="E:W.RPC.ISocketClient.Disconnected">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
        <member api="M:W.RPC.IClient.Dispose">
          <type api="T:W.RPC.IClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="P:W.RPC.Client.IsConnected">
      <apidata name="IsConnected" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsConnected" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:W.RPC.ISocketClient.IsConnected">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.MakeRPCCall(System.String,System.Action,System.Object[])">
      <apidata name="MakeRPCCall" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="onResponse">
          <type api="T:System.Action" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.ManualResetEvent" ref="true" />
      </returns>
      <implements>
        <member api="M:W.RPC.IClient.MakeRPCCall(System.String,System.Action,System.Object[])">
          <type api="T:W.RPC.IClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0})">
      <apidata name="MakeRPCCall" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="onResponse">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.ManualResetEvent" ref="true" />
      </returns>
      <implements>
        <member api="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0})">
          <type api="T:W.RPC.IClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])">
      <apidata name="MakeRPCCall" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="onResponse">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.RPC.Client.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.ManualResetEvent" ref="true" />
      </returns>
      <implements>
        <member api="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])">
          <type api="T:W.RPC.IClient" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Client" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.Constants">
      <apidata name="Constants" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:W.RPC.Constants.DefaultConnectTimeout" />
        <element api="F:W.RPC.Constants.DefaultMakeRPCCallTimeout" />
        <element api="M:W.RPC.Constants.#ctor" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.Constants.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Constants" ref="true" />
      </containers>
    </api>
    <api id="F:W.RPC.Constants.DefaultConnectTimeout">
      <apidata name="DefaultConnectTimeout" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>10000</value>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Constants" ref="true" />
      </containers>
    </api>
    <api id="F:W.RPC.Constants.DefaultMakeRPCCallTimeout">
      <apidata name="DefaultMakeRPCCallTimeout" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>30000</value>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Constants" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.Delegates">
      <apidata name="Delegates" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.RPC.Delegates.#ctor" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.Delegates.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Delegates" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.Delegates.ConnectedDelegate">
      <apidata name="ConnectedDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="client">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Delegates" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.Delegates.ConnectionTimeoutDelegate">
      <apidata name="ConnectionTimeoutDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="client">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Delegates" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.Delegates.DisconnectedDelegate">
      <apidata name="DisconnectedDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="client">
          <type api="T:W.RPC.ISocketClient" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Delegates" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.IClient">
      <apidata name="IClient" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </implements>
      <implementors>
        <type api="T:W.RPC.Client" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0})" />
        <element api="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])" />
        <element api="M:W.RPC.IClient.MakeRPCCall(System.String,System.Action,System.Object[])" />
        <element api="M:W.RPC.IClient.Dispose" />
      </elements>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.IClient.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.IClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.IClient.MakeRPCCall(System.String,System.Action,System.Object[])">
      <apidata name="MakeRPCCall" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="onResponse">
          <type api="T:System.Action" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.ManualResetEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.IClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0})">
      <apidata name="MakeRPCCall" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="onResponse">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.ManualResetEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.IClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])">
      <apidata name="MakeRPCCall" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="onResponse">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.RPC.IClient.MakeRPCCall``1(System.String,System.Action{``0},System.Object[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.ManualResetEvent" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.IClient" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.ISocketClient">
      <apidata name="ISocketClient" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.RPC.IClient" ref="true" />
        <type api="T:W.RPC.Client" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.RPC.ISocketClient.Connect(System.String,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})" />
        <element api="M:W.RPC.ISocketClient.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})" />
        <element api="M:W.RPC.ISocketClient.ConnectAsync(System.String,System.Int32,System.Int32)" />
        <element api="M:W.RPC.ISocketClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)" />
        <element api="M:W.RPC.ISocketClient.Disconnect" />
        <element api="P:W.RPC.ISocketClient.IsConnected" />
        <element api="E:W.RPC.ISocketClient.Connected" />
        <element api="E:W.RPC.ISocketClient.Disconnected" />
      </elements>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.ISocketClient.Connect(System.Net.IPAddress,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
      <apidata name="Connect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
        <parameter name="onConnection" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:W.RPC.ISocketClient" ref="true" />
              <type api="T:System.Net.IPAddress" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="onException" optional="true">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.ISocketClient.Connect(System.String,System.Int32,System.Int32,System.Action{W.RPC.ISocketClient,System.Net.IPAddress},System.Action{System.Exception})">
      <apidata name="Connect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
        <parameter name="onConnection" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:W.RPC.ISocketClient" ref="true" />
              <type api="T:System.Net.IPAddress" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="onException" optional="true">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.ISocketClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)">
      <apidata name="ConnectAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.ISocketClient.ConnectAsync(System.String,System.Int32,System.Int32)">
      <apidata name="ConnectAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remotePort">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>10000</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="E:W.RPC.ISocketClient.Connected">
      <apidata name="Connected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Connected" />
      <remover name="remove_Connected" />
      <eventhandler>
        <type api="T:W.RPC.Delegates.ConnectedDelegate" ref="true">
          <type api="T:W.RPC.Delegates" ref="true" />
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.ISocketClient.Disconnect">
      <apidata name="Disconnect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="E:W.RPC.ISocketClient.Disconnected">
      <apidata name="Disconnected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Disconnected" />
      <remover name="remove_Disconnected" />
      <eventhandler>
        <type api="T:W.RPC.Delegates.DisconnectedDelegate" ref="true">
          <type api="T:W.RPC.Delegates" ref="true" />
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="P:W.RPC.ISocketClient.IsConnected">
      <apidata name="IsConnected" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsConnected" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.ISocketClient" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.RPCClassAttribute">
      <apidata name="RPCClassAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.RPC.RPCClassAttribute.#ctor" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.RPCClassAttribute.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.RPCClassAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.RPCMethodAttribute">
      <apidata name="RPCMethodAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.RPC.RPCMethodAttribute.#ctor" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.RPCMethodAttribute.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.RPCMethodAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:W.RPC.Server">
      <apidata name="Server" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.MarshalByRefObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:W.RPC.Interfaces.IServer" ref="true" />
      </implements>
      <elements>
        <element api="M:W.RPC.Server.#ctor" />
        <element api="M:W.RPC.Server.#ctor(System.Net.IPAddress,System.Int32)" />
        <element api="M:W.RPC.Server.Finalize" />
        <element api="M:W.RPC.Server.Start(System.Net.IPAddress,System.Int32)" />
        <element api="M:W.RPC.Server.Stop" />
        <element api="M:W.RPC.Server.Create(System.Net.IPAddress,System.Int32)" />
        <element api="M:W.RPC.Server.Dispose" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.#ctor(System.Net.IPAddress,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="ipAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="port">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.Create(System.Net.IPAddress,System.Int32)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="ipAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="port">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.RPC.Server" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
        <member api="M:W.RPC.Interfaces.IServer.Dispose">
          <type api="T:W.RPC.Interfaces.IServer" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.Start(System.Net.IPAddress,System.Int32)">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="ipAddress">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="port">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.RPC.Interfaces.IServer.Start(System.Net.IPAddress,System.Int32)">
          <type api="T:W.RPC.Interfaces.IServer" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Server.Stop">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:W.RPC.Interfaces.IServer.Stop">
          <type api="T:W.RPC.Interfaces.IServer" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten.RPC" module="Tungsten.RPC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC" />
        <type api="T:W.RPC.Server" ref="true" />
      </containers>
    </api>
    <api id="N:W.RPC.Interfaces">
      <apidata name="W.RPC.Interfaces" group="namespace" />
      <elements>
        <element api="T:W.RPC.Interfaces.IServer" />
      </elements>
    </api>
    <api id="T:W.RPC.Interfaces.IServer">
      <apidata name="IServer" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.RPC.Server" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.RPC.Interfaces.IServer.Start(System.Net.IPAddress,System.Int32)" />
        <element api="M:W.RPC.Interfaces.IServer.Stop" />
        <element api="M:W.RPC.Interfaces.IServer.Dispose" />
      </elements>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC.Interfaces" />
      </containers>
    </api>
    <api id="M:W.RPC.Interfaces.IServer.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC.Interfaces" />
        <type api="T:W.RPC.Interfaces.IServer" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Interfaces.IServer.Start(System.Net.IPAddress,System.Int32)">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="address">
          <type api="T:System.Net.IPAddress" ref="true" />
        </parameter>
        <parameter name="port">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC.Interfaces" />
        <type api="T:W.RPC.Interfaces.IServer" ref="true" />
      </containers>
    </api>
    <api id="M:W.RPC.Interfaces.IServer.Stop">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten.RPC.Interfaces" module="Tungsten.RPC.Interfaces" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.RPC.Interfaces" />
        <type api="T:W.RPC.Interfaces.IServer" ref="true" />
      </containers>
    </api>
    <api id="N:W.Threading">
      <apidata name="W.Threading" group="namespace" />
      <elements>
        <element api="T:W.Threading.Gate" />
        <element api="T:W.Threading.Gate`1" />
        <element api="T:W.Threading.Thread" />
        <element api="T:W.Threading.Thread`1" />
        <element api="T:W.Threading.ThreadBase" />
        <element api="T:W.Threading.ThreadExtensions" />
      </elements>
    </api>
    <api id="T:W.Threading.Gate">
      <apidata name="Gate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Thread" ref="true" />
          <type api="T:W.Threading.ThreadBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Threading.Gate.CallInvokeAction" />
        <element api="M:W.Threading.Gate.Run" />
        <element api="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.CallInvokeAction">
      <apidata name="CallInvokeAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.Thread.CallInvokeAction">
          <type api="T:W.Threading.Thread" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.Run">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Gate`1">
      <apidata name="Gate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Thread`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.Threading.Gate`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Thread" ref="true" />
          <type api="T:W.Threading.ThreadBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:W.Threading.Gate`1.CallInvokeAction" />
        <element api="M:W.Threading.Gate`1.Run" />
        <element api="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.Threading.Gate`1" />
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="args" optional="true">
          <template name="T" index="0" api="T:W.Threading.Gate`1" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.CallInvokeAction">
      <apidata name="CallInvokeAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.Thread.CallInvokeAction">
          <type api="T:W.Threading.Thread" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.Run">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Thread">
      <apidata name="Thread" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.ThreadBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Gate" ref="true" />
          <type api="T:W.Threading.Thread`1" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:W.Threading.Thread.CallInvokeAction" />
        <element api="M:W.Threading.Thread.Cancel" />
        <element api="M:W.Threading.Thread.Cancel(System.Int32)" />
        <element api="M:W.Threading.Thread.Join" />
        <element api="M:W.Threading.Thread.Join(System.Int32)" />
        <element api="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
        <element api="M:W.Threading.Thread.Dispose" />
        <element api="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.CallInvokeAction">
      <apidata name="CallInvokeAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.ThreadBase.CallInvokeAction">
          <type api="T:W.Threading.ThreadBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Cancel">
      <apidata name="Cancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.ThreadBase.Cancel">
          <type api="T:W.Threading.ThreadBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Cancel(System.Int32)">
      <apidata name="Cancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msForceAbortDelay">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Thread" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.ThreadBase.Dispose">
          <type api="T:W.Threading.ThreadBase" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Join">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.ThreadBase.Join">
          <type api="T:W.Threading.ThreadBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Join(System.Int32)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.ThreadBase.Join(System.Int32)">
          <type api="T:W.Threading.ThreadBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Thread`1">
      <apidata name="Thread" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Thread" ref="true" />
          <type api="T:W.Threading.ThreadBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Gate`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:W.Threading.Thread`1.InvokeAction" />
        <element api="M:W.Threading.Thread`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)" />
        <element api="M:W.Threading.Thread`1.Create(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)" />
        <element api="P:W.Threading.Thread`1.CustomData" />
        <element api="P:W.Threading.Thread`1.Action" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread`1.#ctor(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.Threading.Thread`1" />
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="customData" optional="true">
          <template name="T" index="0" api="T:W.Threading.Thread`1" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Thread`1.Action">
      <apidata name="Action" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Action" />
      <setter name="set_Action" />
      <returns>
        <type api="T:System.Action`2" ref="true">
          <specialization>
            <template name="T" index="0" api="T:W.Threading.Thread`1" />
            <type api="T:System.Threading.CancellationTokenSource" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread`1.Create(System.Action{`0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},`0)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.Threading.Thread`1" />
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="customData" optional="true">
          <template name="T" index="0" api="T:W.Threading.Thread`1" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Thread`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:W.Threading.Thread`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Thread`1.CustomData">
      <apidata name="CustomData" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CustomData" />
      <returns>
        <type api="T:W.Lockable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:W.Threading.Thread`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread`1.InvokeAction">
      <apidata name="InvokeAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.ThreadBase.InvokeAction">
          <type api="T:W.Threading.ThreadBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.ThreadBase">
      <apidata name="ThreadBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Thread" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.ThreadBase.InvokeAction" />
        <element api="M:W.Threading.ThreadBase.InvokeOnComplete(System.Exception)" />
        <element api="M:W.Threading.ThreadBase.CallInvokeAction" />
        <element api="M:W.Threading.ThreadBase.CallInvokeOnComplete(System.Exception)" />
        <element api="M:W.Threading.ThreadBase.ThreadProc" />
        <element api="M:W.Threading.ThreadBase.Cancel" />
        <element api="M:W.Threading.ThreadBase.Join" />
        <element api="M:W.Threading.ThreadBase.Join(System.Int32)" />
        <element api="M:W.Threading.ThreadBase.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
        <element api="M:W.Threading.ThreadBase.Finalize" />
        <element api="M:W.Threading.ThreadBase.Dispose" />
        <element api="P:W.Threading.ThreadBase.Action" />
        <element api="P:W.Threading.ThreadBase.OnComplete" />
        <element api="P:W.Threading.ThreadBase.Cts" />
        <element api="P:W.Threading.ThreadBase.IsBusy" />
        <element api="P:W.Threading.ThreadBase.Success" />
        <element api="P:W.Threading.ThreadBase.IsRunning" />
        <element api="M:W.PropertyHostMethods.InitializeProperties(System.Object)" source="extension">
          <apidata name="InitializeProperties" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.IsDirty(System.Object)" source="extension">
          <apidata name="IsDirty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.PropertyHostMethods.MarkAsClean(System.Object)" source="extension">
          <apidata name="MarkAsClean" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W" />
            <type api="T:W.PropertyHostMethods" ref="true" />
          </containers>
        </element>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" source="extension">
          <apidata name="CreateThread" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="action">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
                  <type api="T:System.Threading.CancellationTokenSource" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="onComplete">
              <type api="T:System.Action`2" ref="true">
                <specialization>
                  <type api="T:System.Boolean" ref="false" />
                  <type api="T:System.Exception" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="customData">
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:W.Threading.Thread`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:W.Threading" />
            <type api="T:W.Threading.ThreadExtensions" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.#ctor(System.Action{System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete" optional="true">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadBase.Action">
      <apidata name="Action" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Action" />
      <setter name="set_Action" />
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <type api="T:System.Threading.CancellationTokenSource" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.CallInvokeAction">
      <apidata name="CallInvokeAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.CallInvokeOnComplete(System.Exception)">
      <apidata name="CallInvokeOnComplete" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.Cancel">
      <apidata name="Cancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadBase.Cts">
      <apidata name="Cts" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Cts" />
      <setter name="set_Cts" />
      <returns>
        <type api="T:System.Threading.CancellationTokenSource" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.InvokeAction">
      <apidata name="InvokeAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.InvokeOnComplete(System.Exception)">
      <apidata name="InvokeOnComplete" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadBase.IsBusy">
      <apidata name="IsBusy" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsBusy" />
      <setter name="set_IsBusy" />
      <returns>
        <type api="T:W.Lockable`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadBase.IsRunning">
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.Join">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.Join(System.Int32)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadBase.OnComplete">
      <apidata name="OnComplete" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_OnComplete" />
      <setter name="set_OnComplete" />
      <returns>
        <type api="T:System.Action`2" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
            <type api="T:System.Exception" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadBase.Success">
      <apidata name="Success" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Success" />
      <setter name="set_Success" />
      <returns>
        <type api="T:W.Lockable`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadBase.ThreadProc">
      <apidata name="ThreadProc" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadBase" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.ThreadExtensions">
      <apidata name="ThreadExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
        <element api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)">
      <apidata name="CreateThread" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="customData">
          <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Thread`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(System.Object,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception},``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})">
      <apidata name="CreateThread" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
              <type api="T:System.Threading.CancellationTokenSource" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="onComplete">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Boolean" ref="false" />
              <type api="T:System.Exception" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Thread`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:W.Threading.ThreadExtensions.CreateThread``1(``0,System.Action{``0,System.Threading.CancellationTokenSource},System.Action{System.Boolean,System.Exception})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
  </apis>
</reflection>