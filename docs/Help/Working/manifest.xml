<?xml version="1.0" encoding="utf-8"?>
<topics>
  <topic id="N:W" type="API" />
  <topic id="T:W.ActionQueue`1" type="API" />
  <topic id="Methods.T:W.ActionQueue`1" type="API" />
  <topic id="Properties.T:W.ActionQueue`1" type="API" />
  <topic id="Overload:W.ActionQueue`1.#ctor" type="API" />
  <topic id="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)" type="API" />
  <topic id="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)" type="API" />
  <topic id="M:W.ActionQueue`1.Cancel" type="API" />
  <topic id="P:W.ActionQueue`1.Count" type="API" />
  <topic id="M:W.ActionQueue`1.Dispose" type="API" />
  <topic id="M:W.ActionQueue`1.Enqueue(`0)" type="API" />
  <topic id="M:W.ActionQueue`1.Finalize" type="API" />
  <topic id="P:W.ActionQueue`1.Queue" type="API" />
  <topic id="T:W.ArrayMethods" type="API" />
  <topic id="Methods.T:W.ArrayMethods" type="API" />
  <topic id="M:W.ArrayMethods.Append``1(``0[]@,``0[])" type="API" />
  <topic id="M:W.ArrayMethods.Insert``1(``0[]@,``0[],System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.Peek``1(``0[],System.Int32,System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.PeekEnd``1(``0[],System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.PeekStart``1(``0[],System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.Take``1(``0[]@,System.Int32,System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.TakeFromEnd``1(``0[]@,System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.TakeFromStart``1(``0[]@,System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.Trim``1(``0[]@,System.Int32,System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.TrimEnd``1(``0[]@,System.Int32)" type="API" />
  <topic id="M:W.ArrayMethods.TrimStart``1(``0[]@,System.Int32)" type="API" />
  <topic id="T:W.CallResult" type="API" />
  <topic id="Methods.T:W.CallResult" type="API" />
  <topic id="Properties.T:W.CallResult" type="API" />
  <topic id="Overload:W.CallResult.#ctor" type="API" />
  <topic id="M:W.CallResult.#ctor" type="API" />
  <topic id="M:W.CallResult.#ctor(System.Boolean)" type="API" />
  <topic id="M:W.CallResult.#ctor(System.Boolean,System.Exception)" type="API" />
  <topic id="P:W.CallResult.Empty" type="API" />
  <topic id="P:W.CallResult.Exception" type="API" />
  <topic id="P:W.CallResult.Success" type="API" />
  <topic id="T:W.CallResult`1" type="API" />
  <topic id="Methods.T:W.CallResult`1" type="API" />
  <topic id="Properties.T:W.CallResult`1" type="API" />
  <topic id="Overload:W.CallResult`1.#ctor" type="API" />
  <topic id="M:W.CallResult`1.#ctor" type="API" />
  <topic id="M:W.CallResult`1.#ctor(System.Boolean)" type="API" />
  <topic id="M:W.CallResult`1.#ctor(System.Boolean,`0)" type="API" />
  <topic id="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)" type="API" />
  <topic id="P:W.CallResult`1.Empty" type="API" />
  <topic id="P:W.CallResult`1.Result" type="API" />
  <topic id="T:W.Disposable" type="API" />
  <topic id="Methods.T:W.Disposable" type="API" />
  <topic id="Fields.T:W.Disposable" type="API" />
  <topic id="M:W.Disposable.#ctor" type="API" />
  <topic id="M:W.Disposable.Dispose" type="API" />
  <topic id="F:W.Disposable.IsDisposed" type="API" />
  <topic id="F:W.Disposable.IsDisposing" type="API" />
  <topic id="M:W.Disposable.OnDispose" type="API" />
  <topic id="M:W.Disposable.OnDisposeUnmanaged" type="API" />
  <topic id="T:W.Disposer" type="API" />
  <topic id="Methods.T:W.Disposer" type="API" />
  <topic id="Properties.T:W.Disposer" type="API" />
  <topic id="Overload:W.Disposer.Cleanup" type="API" />
  <topic id="M:W.Disposer.#ctor" type="API" />
  <topic id="M:W.Disposer.Cleanup(System.Action)" type="API" />
  <topic id="M:W.Disposer.Cleanup(System.Object,System.Action)" type="API" />
  <topic id="P:W.Disposer.IsDisposed" type="API" />
  <topic id="T:W.EventTemplate" type="API" />
  <topic id="Methods.T:W.EventTemplate" type="API" />
  <topic id="Events.T:W.EventTemplate" type="API" />
  <topic id="M:W.EventTemplate.#ctor" type="API" />
  <topic id="E:W.EventTemplate.OnRaised" type="API" />
  <topic id="M:W.EventTemplate.Raise(System.Object,System.String,System.Object[])" type="API" />
  <topic id="T:W.EventTemplate`1" type="API" />
  <topic id="Methods.T:W.EventTemplate`1" type="API" />
  <topic id="Events.T:W.EventTemplate`1" type="API" />
  <topic id="M:W.EventTemplate`1.#ctor" type="API" />
  <topic id="E:W.EventTemplate`1.OnRaised" type="API" />
  <topic id="M:W.EventTemplate`1.Raise(System.Object,`0,System.String)" type="API" />
  <topic id="T:W.EventTemplate`2" type="API" />
  <topic id="Methods.T:W.EventTemplate`2" type="API" />
  <topic id="Events.T:W.EventTemplate`2" type="API" />
  <topic id="M:W.EventTemplate`2.#ctor" type="API" />
  <topic id="E:W.EventTemplate`2.OnRaised" type="API" />
  <topic id="M:W.EventTemplate`2.Raise(System.Object,`0,`1,System.String)" type="API" />
  <topic id="T:W.EventTemplate`3" type="API" />
  <topic id="Methods.T:W.EventTemplate`3" type="API" />
  <topic id="Events.T:W.EventTemplate`3" type="API" />
  <topic id="M:W.EventTemplate`3.#ctor" type="API" />
  <topic id="E:W.EventTemplate`3.OnRaised" type="API" />
  <topic id="M:W.EventTemplate`3.Raise(System.Object,`0,`1,`2,System.String)" type="API" />
  <topic id="T:W.EventTemplate`4" type="API" />
  <topic id="Methods.T:W.EventTemplate`4" type="API" />
  <topic id="Events.T:W.EventTemplate`4" type="API" />
  <topic id="M:W.EventTemplate`4.#ctor" type="API" />
  <topic id="E:W.EventTemplate`4.OnRaised" type="API" />
  <topic id="M:W.EventTemplate`4.Raise(System.Object,`0,`1,`2,`3,System.String)" type="API" />
  <topic id="T:W.EventTemplate`5" type="API" />
  <topic id="Methods.T:W.EventTemplate`5" type="API" />
  <topic id="Events.T:W.EventTemplate`5" type="API" />
  <topic id="M:W.EventTemplate`5.#ctor" type="API" />
  <topic id="E:W.EventTemplate`5.OnRaised" type="API" />
  <topic id="M:W.EventTemplate`5.Raise(System.Object,`0,`1,`2,`3,`4,System.String)" type="API" />
  <topic id="T:W.EventTemplateDelegate" type="API" />
  <topic id="T:W.EventTemplateDelegate`1" type="API" />
  <topic id="T:W.EventTemplateDelegate`2" type="API" />
  <topic id="T:W.EventTemplateDelegate`3" type="API" />
  <topic id="T:W.EventTemplateDelegate`4" type="API" />
  <topic id="T:W.EventTemplateDelegate`5" type="API" />
  <topic id="T:W.IOwnedProperty" type="API" />
  <topic id="Methods.T:W.IOwnedProperty" type="API" />
  <topic id="M:W.IOwnedProperty.SetOwner(System.Object)" type="API" />
  <topic id="T:W.IProperty" type="API" />
  <topic id="Properties.T:W.IProperty" type="API" />
  <topic id="P:W.IProperty.IsDirty" type="API" />
  <topic id="T:W.IProperty`1" type="API" />
  <topic id="Properties.T:W.IProperty`1" type="API" />
  <topic id="P:W.IProperty`1.Value" type="API" />
  <topic id="T:W.Lockable`1" type="API" />
  <topic id="Methods.T:W.Lockable`1" type="API" />
  <topic id="Properties.T:W.Lockable`1" type="API" />
  <topic id="Events.T:W.Lockable`1" type="API" />
  <topic id="Fields.T:W.Lockable`1" type="API" />
  <topic id="Overload:W.Lockable`1.#ctor" type="API" />
  <topic id="M:W.Lockable`1.#ctor" type="API" />
  <topic id="M:W.Lockable`1.#ctor(System.Action{System.Object,`0,`0})" type="API" />
  <topic id="M:W.Lockable`1.#ctor(`0)" type="API" />
  <topic id="M:W.Lockable`1.#ctor(`0,System.Action{System.Object,`0,`0})" type="API" />
  <topic id="M:W.Lockable`1.Dispose" type="API" />
  <topic id="M:W.Lockable`1.InformWaiters" type="API" />
  <topic id="M:W.Lockable`1.OnValueChanged(System.Object,`0,`0)" type="API" />
  <topic id="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)" type="API" />
  <topic id="M:W.Lockable`1.SetValue(`0)" type="API" />
  <topic id="E:W.Lockable`1.ValueChanged" type="API" />
  <topic id="M:W.Lockable`1.WaitForValueChanged(System.Int32)" type="API" />
  <topic id="T:W.LockableSlim`1" type="API" />
  <topic id="Methods.T:W.LockableSlim`1" type="API" />
  <topic id="Properties.T:W.LockableSlim`1" type="API" />
  <topic id="Fields.T:W.LockableSlim`1" type="API" />
  <topic id="Overload:W.LockableSlim`1.#ctor" type="API" />
  <topic id="M:W.LockableSlim`1.#ctor" type="API" />
  <topic id="M:W.LockableSlim`1.#ctor(`0)" type="API" />
  <topic id="M:W.LockableSlim`1.GetValue" type="API" />
  <topic id="M:W.LockableSlim`1.SetValue(`0)" type="API" />
  <topic id="P:W.LockableSlim`1.Value" type="API" />
  <topic id="T:W.Property`1" type="API" />
  <topic id="Methods.T:W.Property`1" type="API" />
  <topic id="Properties.T:W.Property`1" type="API" />
  <topic id="Events.T:W.Property`1" type="API" />
  <topic id="Fields.T:W.Property`1" type="API" />
  <topic id="Overload:W.Property`1.#ctor" type="API" />
  <topic id="M:W.Property`1.#ctor" type="API" />
  <topic id="M:W.Property`1.#ctor(System.Action{System.Object,`0,`0})" type="API" />
  <topic id="M:W.Property`1.#ctor(`0)" type="API" />
  <topic id="M:W.Property`1.#ctor(`0,System.Action{System.Object,`0,`0})" type="API" />
  <topic id="T:W.Property`2" type="API" />
  <topic id="Methods.T:W.Property`2" type="API" />
  <topic id="Properties.T:W.Property`2" type="API" />
  <topic id="Events.T:W.Property`2" type="API" />
  <topic id="Fields.T:W.Property`2" type="API" />
  <topic id="Overload:W.Property`2.#ctor" type="API" />
  <topic id="M:W.Property`2.#ctor" type="API" />
  <topic id="M:W.Property`2.#ctor(System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.Property`2.#ctor(`0)" type="API" />
  <topic id="M:W.Property`2.#ctor(`0,System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.Property`2.#ctor(`0,`1)" type="API" />
  <topic id="M:W.Property`2.#ctor(`0,`1,System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.Property`2.#ctor(`1)" type="API" />
  <topic id="M:W.Property`2.#ctor(`1,System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.Property`2.W#IOwnedProperty#SetOwner(System.Object)" type="API" />
  <topic id="T:W.PropertyBase`2" type="API" />
  <topic id="Methods.T:W.PropertyBase`2" type="API" />
  <topic id="Properties.T:W.PropertyBase`2" type="API" />
  <topic id="Events.T:W.PropertyBase`2" type="API" />
  <topic id="Fields.T:W.PropertyBase`2" type="API" />
  <topic id="Overload:W.PropertyBase`2.#ctor" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(`0)" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(`0,System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(`0,`1)" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(`0,`1,System.Action{System.Object,`1,`1})" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(`1)" type="API" />
  <topic id="M:W.PropertyBase`2.#ctor(`1,System.Action{System.Object,`1,`1})" type="API" />
  <topic id="P:W.PropertyBase`2.DefaultValue" type="API" />
  <topic id="P:W.PropertyBase`2.IsDirty" type="API" />
  <topic id="M:W.PropertyBase`2.LoadValue(`1)" type="API" />
  <topic id="M:W.PropertyBase`2.OnPropertyChanged(System.String)" type="API" />
  <topic id="M:W.PropertyBase`2.OnPropertyChanging(System.String)" type="API" />
  <topic id="M:W.PropertyBase`2.OnValueChanged(System.Object,`1,`1)" type="API" />
  <topic id="P:W.PropertyBase`2.Owner" type="API" />
  <topic id="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)" type="API" />
  <topic id="T:W.PropertyChangedNotifier" type="API" />
  <topic id="Methods.T:W.PropertyChangedNotifier" type="API" />
  <topic id="Events.T:W.PropertyChangedNotifier" type="API" />
  <topic id="M:W.PropertyChangedNotifier.#ctor" type="API" />
  <topic id="M:W.PropertyChangedNotifier.GetValue" type="API" />
  <topic id="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)" type="API" />
  <topic id="E:W.PropertyChangedNotifier.PropertyChanged" type="API" />
  <topic id="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)" type="API" />
  <topic id="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)" type="API" />
  <topic id="T:W.PropertyHost" type="API" />
  <topic id="Methods.T:W.PropertyHost" type="API" />
  <topic id="Properties.T:W.PropertyHost" type="API" />
  <topic id="M:W.PropertyHost.#ctor" type="API" />
  <topic id="P:W.PropertyHost.IsDirty" type="API" />
  <topic id="M:W.PropertyHost.MarkAsClean" type="API" />
  <topic id="T:W.PropertyHostNotifier" type="API" />
  <topic id="Methods.T:W.PropertyHostNotifier" type="API" />
  <topic id="Properties.T:W.PropertyHostNotifier" type="API" />
  <topic id="Events.T:W.PropertyHostNotifier" type="API" />
  <topic id="M:W.PropertyHostNotifier.#ctor" type="API" />
  <topic id="P:W.PropertyHostNotifier.IsDirty" type="API" />
  <topic id="M:W.PropertyHostNotifier.MarkAsClean" type="API" />
  <topic id="T:W.PropertySlim`1" type="API" />
  <topic id="Methods.T:W.PropertySlim`1" type="API" />
  <topic id="Properties.T:W.PropertySlim`1" type="API" />
  <topic id="Events.T:W.PropertySlim`1" type="API" />
  <topic id="Fields.T:W.PropertySlim`1" type="API" />
  <topic id="Overload:W.PropertySlim`1.#ctor" type="API" />
  <topic id="M:W.PropertySlim`1.#ctor" type="API" />
  <topic id="M:W.PropertySlim`1.#ctor(System.Action{System.Object,`0,`0})" type="API" />
  <topic id="M:W.PropertySlim`1.#ctor(`0)" type="API" />
  <topic id="M:W.PropertySlim`1.#ctor(`0,System.Action{System.Object,`0,`0})" type="API" />
  <topic id="M:W.PropertySlim`1.OnPropertyChanged(System.String)" type="API" />
  <topic id="M:W.PropertySlim`1.OnPropertyChanging(System.String)" type="API" />
  <topic id="E:W.PropertySlim`1.PropertyChanged" type="API" />
  <topic id="E:W.PropertySlim`1.PropertyChanging" type="API" />
  <topic id="M:W.PropertySlim`1.RaiseOnPropertyChanged(System.Object,System.String)" type="API" />
  <topic id="M:W.PropertySlim`1.RaiseOnPropertyChanging(System.Object,System.String)" type="API" />
  <topic id="M:W.PropertySlim`1.SetValue(`0)" type="API" />
  <topic id="T:W.Singleton`1" type="API" />
  <topic id="Methods.T:W.Singleton`1" type="API" />
  <topic id="Properties.T:W.Singleton`1" type="API" />
  <topic id="M:W.Singleton`1.#ctor" type="API" />
  <topic id="P:W.Singleton`1.Instance" type="API" />
  <topic id="T:W.ValueChangedDelegate`1" type="API" />
  <topic id="N:W.AsExtensions" type="API" />
  <topic id="T:W.AsExtensions.AsExtensions" type="API" />
  <topic id="Methods.T:W.AsExtensions.AsExtensions" type="API" />
  <topic id="Overload:W.AsExtensions.AsExtensions.AsBase64" type="API" />
  <topic id="Overload:W.AsExtensions.AsExtensions.AsStream" type="API" />
  <topic id="Overload:W.AsExtensions.AsExtensions.AsString" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.As``1(System.Object)" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsBase64(System.Byte[])" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsBase64(System.String)" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsBytes(System.String)" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsCompressed(System.Byte[])" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsDecompressed(System.Byte[])" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsJson``1(System.Object)" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsStream(System.Byte[])" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsStream(System.String)" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsString(System.Byte[])" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsString(System.Byte[],System.Int32,System.Int32)" type="API" />
  <topic id="M:W.AsExtensions.AsExtensions.AsXml``1(System.Object)" type="API" />
  <topic id="N:W.DelegateExtensions" type="API" />
  <topic id="T:W.DelegateExtensions.DelegateExtensions" type="API" />
  <topic id="Methods.T:W.DelegateExtensions.DelegateExtensions" type="API" />
  <topic id="M:W.DelegateExtensions.DelegateExtensions.Raise(System.Delegate,System.Object[])" type="API" />
  <topic id="N:W.Encryption" type="API" />
  <topic id="T:W.Encryption.AssymetricEncryption" type="API" />
  <topic id="Methods.T:W.Encryption.AssymetricEncryption" type="API" />
  <topic id="Properties.T:W.Encryption.AssymetricEncryption" type="API" />
  <topic id="M:W.Encryption.AssymetricEncryption.#ctor(System.Int32)" type="API" />
  <topic id="M:W.Encryption.AssymetricEncryption.Decrypt(System.Byte[]@)" type="API" />
  <topic id="M:W.Encryption.AssymetricEncryption.Encrypt(System.Byte[]@)" type="API" />
  <topic id="M:W.Encryption.AssymetricEncryption.ExchangeKeys(W.Encryption.AssymetricEncryption.ExchangeKeysDelegate)" type="API" />
  <topic id="P:W.Encryption.AssymetricEncryption.LegalKeySizes" type="API" />
  <topic id="P:W.Encryption.AssymetricEncryption.PublicKey" type="API" />
  <topic id="P:W.Encryption.AssymetricEncryption.RemotePublicKey" type="API" />
  <topic id="T:W.Encryption.AssymetricEncryption.ExchangeKeysDelegate" type="API" />
  <topic id="T:W.Encryption.MD5" type="API" />
  <topic id="Methods.T:W.Encryption.MD5" type="API" />
  <topic id="Overload:W.Encryption.MD5.GetMd5Hash" type="API" />
  <topic id="M:W.Encryption.MD5.#ctor" type="API" />
  <topic id="M:W.Encryption.MD5.GetMd5Hash(System.String)" type="API" />
  <topic id="M:W.Encryption.MD5.GetMd5Hash(System.String,System.Security.Cryptography.MD5)" type="API" />
  <topic id="M:W.Encryption.MD5.VerifyMd5Hash(System.String,System.String)" type="API" />
  <topic id="T:W.Encryption.PublicPrivateKeyPair" type="API" />
  <topic id="Methods.T:W.Encryption.PublicPrivateKeyPair" type="API" />
  <topic id="Properties.T:W.Encryption.PublicPrivateKeyPair" type="API" />
  <topic id="M:W.Encryption.PublicPrivateKeyPair.#ctor" type="API" />
  <topic id="P:W.Encryption.PublicPrivateKeyPair.PrivateKey" type="API" />
  <topic id="P:W.Encryption.PublicPrivateKeyPair.PublicKey" type="API" />
  <topic id="T:W.Encryption.RSAMethods" type="API" />
  <topic id="Methods.T:W.Encryption.RSAMethods" type="API" />
  <topic id="M:W.Encryption.RSAMethods.CreateKeyPair(System.Int32)" type="API" />
  <topic id="M:W.Encryption.RSAMethods.Decrypt(System.String,System.Security.Cryptography.RSAParameters)" type="API" />
  <topic id="M:W.Encryption.RSAMethods.DecryptAsync(System.String,System.Security.Cryptography.RSAParameters)" type="API" />
  <topic id="M:W.Encryption.RSAMethods.Encrypt(System.String,System.Security.Cryptography.RSAParameters)" type="API" />
  <topic id="M:W.Encryption.RSAMethods.EncryptAsync(System.String,System.Security.Cryptography.RSAParameters)" type="API" />
  <topic id="M:W.Encryption.RSAMethods.LegalKeySizes" type="API" />
  <topic id="N:W.FromExtensions" type="API" />
  <topic id="T:W.FromExtensions.FromExtensions" type="API" />
  <topic id="Methods.T:W.FromExtensions.FromExtensions" type="API" />
  <topic id="Overload:W.FromExtensions.FromExtensions.FromBase64" type="API" />
  <topic id="Overload:W.FromExtensions.FromExtensions.FromJson" type="API" />
  <topic id="Overload:W.FromExtensions.FromExtensions.FromXml" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromBase64(System.Byte[])" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromBase64(System.String)" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromCompressed(System.Byte[])" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromJson``1(System.Byte[])" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromJson``1(System.String)" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromXml``1(System.Byte[])" type="API" />
  <topic id="M:W.FromExtensions.FromExtensions.FromXml``1(System.String)" type="API" />
  <topic id="N:W.InvokeExtensions" type="API" />
  <topic id="T:W.InvokeExtensions.InvokeExtensions" type="API" />
  <topic id="Methods.T:W.InvokeExtensions.InvokeExtensions" type="API" />
  <topic id="Overload:W.InvokeExtensions.InvokeExtensions.InvokeEx" type="API" />
  <topic id="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" type="API" />
  <topic id="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" type="API" />
  <topic id="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" type="API" />
  <topic id="N:W.LockExtensions" type="API" />
  <topic id="T:W.LockExtensions.MonitorExtensions" type="API" />
  <topic id="Methods.T:W.LockExtensions.MonitorExtensions" type="API" />
  <topic id="Overload:W.LockExtensions.MonitorExtensions.InLock" type="API" />
  <topic id="Overload:W.LockExtensions.MonitorExtensions.InLockAsync" type="API" />
  <topic id="M:W.LockExtensions.MonitorExtensions.InLock(System.Object,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.MonitorExtensions.InLock``1(System.Object,System.Func{``0})" type="API" />
  <topic id="M:W.LockExtensions.MonitorExtensions.InLockAsync(System.Object,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.MonitorExtensions.InLockAsync``1(System.Object,System.Func{``0})" type="API" />
  <topic id="T:W.LockExtensions.ReaderWriterLockSlimExtensions" type="API" />
  <topic id="Methods.T:W.LockExtensions.ReaderWriterLockSlimExtensions" type="API" />
  <topic id="Overload:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock" type="API" />
  <topic id="Overload:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync" type="API" />
  <topic id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" type="API" />
  <topic id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" type="API" />
  <topic id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.Lock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum)" type="API" />
  <topic id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.Unlock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum)" type="API" />
  <topic id="T:W.LockExtensions.SemaphoreSlimExtensions" type="API" />
  <topic id="Methods.T:W.LockExtensions.SemaphoreSlimExtensions" type="API" />
  <topic id="Overload:W.LockExtensions.SemaphoreSlimExtensions.InLock" type="API" />
  <topic id="Overload:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync" type="API" />
  <topic id="M:W.LockExtensions.SemaphoreSlimExtensions.InLock(System.Threading.SemaphoreSlim,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.SemaphoreSlimExtensions.InLock``1(System.Threading.SemaphoreSlim,System.Func{``0})" type="API" />
  <topic id="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync(System.Threading.SemaphoreSlim,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync``1(System.Threading.SemaphoreSlim,System.Func{``0})" type="API" />
  <topic id="T:W.LockExtensions.SpinLockExtensions" type="API" />
  <topic id="Methods.T:W.LockExtensions.SpinLockExtensions" type="API" />
  <topic id="Overload:W.LockExtensions.SpinLockExtensions.InLock" type="API" />
  <topic id="Overload:W.LockExtensions.SpinLockExtensions.InLockAsync" type="API" />
  <topic id="M:W.LockExtensions.SpinLockExtensions.InLock(System.Threading.SpinLock,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.SpinLockExtensions.InLock``1(System.Threading.SpinLock,System.Func{``0})" type="API" />
  <topic id="M:W.LockExtensions.SpinLockExtensions.InLockAsync(System.Threading.SpinLock,System.Action)" type="API" />
  <topic id="M:W.LockExtensions.SpinLockExtensions.InLockAsync``1(System.Threading.SpinLock,System.Func{``0})" type="API" />
  <topic id="N:W.Logging" type="API" />
  <topic id="T:W.Logging.CustomLogger" type="API" />
  <topic id="Methods.T:W.Logging.CustomLogger" type="API" />
  <topic id="Properties.T:W.Logging.CustomLogger" type="API" />
  <topic id="M:W.Logging.CustomLogger.#ctor(System.String,System.Boolean)" type="API" />
  <topic id="P:W.Logging.CustomLogger.AddTimestamp" type="API" />
  <topic id="M:W.Logging.CustomLogger.Dispose" type="API" />
  <topic id="M:W.Logging.CustomLogger.FormatLogMessage(W.Logging.Log.LogMessageCategory,System.String)" type="API" />
  <topic id="P:W.Logging.CustomLogger.IsDisposed" type="API" />
  <topic id="M:W.Logging.CustomLogger.LogMessage(W.Logging.Log.LogMessageCategory,System.String)" type="API" />
  <topic id="P:W.Logging.CustomLogger.Name" type="API" />
  <topic id="M:W.Logging.CustomLogger.OnDispose" type="API" />
  <topic id="T:W.Logging.Log" type="API" />
  <topic id="Methods.T:W.Logging.Log" type="API" />
  <topic id="Properties.T:W.Logging.Log" type="API" />
  <topic id="Overload:W.Logging.Log.e" type="API" />
  <topic id="Overload:W.Logging.Log.i" type="API" />
  <topic id="Overload:W.Logging.Log.v" type="API" />
  <topic id="Overload:W.Logging.Log.w" type="API" />
  <topic id="M:W.Logging.Log.e(System.Exception)" type="API" />
  <topic id="M:W.Logging.Log.e(System.String,System.Object[])" type="API" />
  <topic id="M:W.Logging.Log.i(System.String,System.Object[])" type="API" />
  <topic id="M:W.Logging.Log.i(System.String,System.String,System.Int32)" type="API" />
  <topic id="P:W.Logging.Log.LogTheMessage" type="API" />
  <topic id="P:W.Logging.Log.MessageHistory" type="API" />
  <topic id="M:W.Logging.Log.v(System.String,System.Object[])" type="API" />
  <topic id="M:W.Logging.Log.v(System.String,System.String,System.Int32)" type="API" />
  <topic id="M:W.Logging.Log.w(System.String,System.Object[])" type="API" />
  <topic id="M:W.Logging.Log.w(System.String,System.String,System.Int32)" type="API" />
  <topic id="T:W.Logging.Log.LogMessageCategory" type="API" />
  <topic id="T:W.Logging.Log.LogMessageHistory" type="API" />
  <topic id="Methods.T:W.Logging.Log.LogMessageHistory" type="API" />
  <topic id="Properties.T:W.Logging.Log.LogMessageHistory" type="API" />
  <topic id="M:W.Logging.Log.LogMessageHistory.#ctor(System.Boolean)" type="API" />
  <topic id="P:W.Logging.Log.LogMessageHistory.Enabled" type="API" />
  <topic id="P:W.Logging.Log.LogMessageHistory.MaximumNumberOfMessages" type="API" />
  <topic id="P:W.Logging.Log.LogMessageHistory.Messages" type="API" />
  <topic id="T:W.Logging.Log.LogMessageHistory.LogMessage" type="API" />
  <topic id="Methods.T:W.Logging.Log.LogMessageHistory.LogMessage" type="API" />
  <topic id="Properties.T:W.Logging.Log.LogMessageHistory.LogMessage" type="API" />
  <topic id="M:W.Logging.Log.LogMessageHistory.LogMessage.#ctor" type="API" />
  <topic id="P:W.Logging.Log.LogMessageHistory.LogMessage.Category" type="API" />
  <topic id="P:W.Logging.Log.LogMessageHistory.LogMessage.Message" type="API" />
  <topic id="N:W.PropertyHostExtensions" type="API" />
  <topic id="T:W.PropertyHostExtensions.PropertyHostExtensions" type="API" />
  <topic id="Methods.T:W.PropertyHostExtensions.PropertyHostExtensions" type="API" />
  <topic id="M:W.PropertyHostExtensions.PropertyHostExtensions.InitializeProperties(System.Object)" type="API" />
  <topic id="M:W.PropertyHostExtensions.PropertyHostExtensions.IsDirty(System.Object)" type="API" />
  <topic id="M:W.PropertyHostExtensions.PropertyHostExtensions.MarkAsClean(System.Object)" type="API" />
  <topic id="N:W.StringExtensions" type="API" />
  <topic id="T:W.StringExtensions.StringExtensions" type="API" />
  <topic id="Methods.T:W.StringExtensions.StringExtensions" type="API" />
  <topic id="M:W.StringExtensions.StringExtensions.IsValidBase64(System.String)" type="API" />
  <topic id="N:W.Threading" type="API" />
  <topic id="T:W.Threading.AnyMethodDelegate" type="API" />
  <topic id="T:W.Threading.CPUProfileEnum" type="API" />
  <topic id="T:W.Threading.Gate" type="API" />
  <topic id="Methods.T:W.Threading.Gate" type="API" />
  <topic id="Properties.T:W.Threading.Gate" type="API" />
  <topic id="Overload:W.Threading.Gate.Join" type="API" />
  <topic id="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.Gate.CallAction(System.Threading.CancellationToken)" type="API" />
  <topic id="M:W.Threading.Gate.Cancel" type="API" />
  <topic id="M:W.Threading.Gate.Dispose" type="API" />
  <topic id="P:W.Threading.Gate.IsComplete" type="API" />
  <topic id="P:W.Threading.Gate.IsRunning" type="API" />
  <topic id="M:W.Threading.Gate.Join" type="API" />
  <topic id="M:W.Threading.Gate.Join(System.Int32)" type="API" />
  <topic id="M:W.Threading.Gate.Run" type="API" />
  <topic id="T:W.Threading.Gate`1" type="API" />
  <topic id="Methods.T:W.Threading.Gate`1" type="API" />
  <topic id="Properties.T:W.Threading.Gate`1" type="API" />
  <topic id="Overload:W.Threading.Gate`1.#ctor" type="API" />
  <topic id="Overload:W.Threading.Gate`1.Run" type="API" />
  <topic id="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationToken},`0)" type="API" />
  <topic id="M:W.Threading.Gate`1.CallAction(System.Threading.CancellationToken)" type="API" />
  <topic id="M:W.Threading.Gate`1.Run" type="API" />
  <topic id="M:W.Threading.Gate`1.Run(`0)" type="API" />
  <topic id="T:W.Threading.GenericThreadDelegate" type="API" />
  <topic id="T:W.Threading.ParameterizedThread" type="API" />
  <topic id="Methods.T:W.Threading.ParameterizedThread" type="API" />
  <topic id="Properties.T:W.Threading.ParameterizedThread" type="API" />
  <topic id="Fields.T:W.Threading.ParameterizedThread" type="API" />
  <topic id="Overload:W.Threading.ParameterizedThread.Join" type="API" />
  <topic id="Overload:W.Threading.ParameterizedThread.Start" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.#ctor(W.Threading.GenericThreadDelegate)" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.Create(W.Threading.GenericThreadDelegate)" type="API" />
  <topic id="P:W.Threading.ParameterizedThread.Exception" type="API" />
  <topic id="P:W.Threading.ParameterizedThread.IsComplete" type="API" />
  <topic id="P:W.Threading.ParameterizedThread.IsFaulted" type="API" />
  <topic id="P:W.Threading.ParameterizedThread.IsStarted" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.Join" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.Join(System.Int32)" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.OnDispose" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.Start(System.Int32,System.Object[])" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.Start(System.Object[])" type="API" />
  <topic id="M:W.Threading.ParameterizedThread.Stop" type="API" />
  <topic id="P:W.Threading.ParameterizedThread.Task" type="API" />
  <topic id="P:W.Threading.ParameterizedThread.Token" type="API" />
  <topic id="T:W.Threading.Thread" type="API" />
  <topic id="Methods.T:W.Threading.Thread" type="API" />
  <topic id="Properties.T:W.Threading.Thread" type="API" />
  <topic id="Overload:W.Threading.Thread.#ctor" type="API" />
  <topic id="Overload:W.Threading.Thread.Create" type="API" />
  <topic id="Overload:W.Threading.Thread.Join" type="API" />
  <topic id="Overload:W.Threading.Thread.Sleep" type="API" />
  <topic id="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.Thread.#ctor(W.Threading.ThreadDelegate)" type="API" />
  <topic id="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.Thread.Create``1(System.Action{System.Threading.CancellationToken,``0})" type="API" />
  <topic id="M:W.Threading.Thread.Dispose" type="API" />
  <topic id="M:W.Threading.Thread.Join" type="API" />
  <topic id="M:W.Threading.Thread.Join(System.Int32)" type="API" />
  <topic id="M:W.Threading.Thread.Join(System.Threading.CancellationToken)" type="API" />
  <topic id="M:W.Threading.Thread.Sleep(System.Int32)" type="API" />
  <topic id="M:W.Threading.Thread.Sleep(System.Int32,System.Boolean)" type="API" />
  <topic id="M:W.Threading.Thread.Sleep(W.Threading.CPUProfileEnum)" type="API" />
  <topic id="M:W.Threading.Thread.Sleep(W.Threading.CPUProfileEnum,System.Int32)" type="API" />
  <topic id="T:W.Threading.Thread`1" type="API" />
  <topic id="Methods.T:W.Threading.Thread`1" type="API" />
  <topic id="Properties.T:W.Threading.Thread`1" type="API" />
  <topic id="Overload:W.Threading.Thread`1.StartAsync" type="API" />
  <topic id="M:W.Threading.Thread`1.#ctor(System.Action{System.Threading.CancellationToken,`0})" type="API" />
  <topic id="M:W.Threading.Thread`1.StartAsync(`0)" type="API" />
  <topic id="T:W.Threading.ThreadDelegate" type="API" />
  <topic id="T:W.Threading.ThreadMethod" type="API" />
  <topic id="Methods.T:W.Threading.ThreadMethod" type="API" />
  <topic id="Properties.T:W.Threading.ThreadMethod" type="API" />
  <topic id="Overload:W.Threading.ThreadMethod.Create" type="API" />
  <topic id="Overload:W.Threading.ThreadMethod.Wait" type="API" />
  <topic id="M:W.Threading.ThreadMethod.#ctor(W.Threading.AnyMethodDelegate)" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create(System.Action)" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create``1(System.Action{``0})" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create``2(System.Action{``0,``1})" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create``3(System.Action{``0,``1,``2})" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Create(W.Threading.AnyMethodDelegate)" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Dispose" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Finalize" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Initialize" type="API" />
  <topic id="P:W.Threading.ThreadMethod.IsComplete" type="API" />
  <topic id="P:W.Threading.ThreadMethod.IsRunning" type="API" />
  <topic id="P:W.Threading.ThreadMethod.IsStarted" type="API" />
  <topic id="P:W.Threading.ThreadMethod.Name" type="API" />
  <topic id="M:W.Threading.ThreadMethod.RunSynchronously(System.Object[])" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Start(System.Object[])" type="API" />
  <topic id="M:W.Threading.ThreadMethod.StartAsync(System.Object[])" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Wait" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Wait(System.Int32)" type="API" />
  <topic id="M:W.Threading.ThreadMethod.Wait(System.Threading.CancellationToken)" type="API" />
  <topic id="T:W.Threading.ThreadSlim" type="API" />
  <topic id="Methods.T:W.Threading.ThreadSlim" type="API" />
  <topic id="Properties.T:W.Threading.ThreadSlim" type="API" />
  <topic id="Overload:W.Threading.ThreadSlim.#ctor" type="API" />
  <topic id="Overload:W.Threading.ThreadSlim.Create" type="API" />
  <topic id="Overload:W.Threading.ThreadSlim.Stop" type="API" />
  <topic id="Overload:W.Threading.ThreadSlim.Wait" type="API" />
  <topic id="M:W.Threading.ThreadSlim.#ctor(System.Action{System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.#ctor(W.Threading.ThreadDelegate)" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create(System.Action{System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create``1(System.Action{System.Threading.CancellationToken,``0})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create``2(System.Action{System.Threading.CancellationToken,``0,``1})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create``3(System.Action{System.Threading.CancellationToken,``0,``1,``2})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Create(W.Threading.ThreadDelegate)" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Dispose" type="API" />
  <topic id="P:W.Threading.ThreadSlim.IsComplete" type="API" />
  <topic id="P:W.Threading.ThreadSlim.IsRunning" type="API" />
  <topic id="P:W.Threading.ThreadSlim.IsStarted" type="API" />
  <topic id="P:W.Threading.ThreadSlim.Name" type="API" />
  <topic id="M:W.Threading.ThreadSlim.SignalToStop" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Start(System.Object[])" type="API" />
  <topic id="M:W.Threading.ThreadSlim.StartAsync(System.Object[])" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Stop" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Stop(System.Int32)" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Stop(System.Threading.CancellationToken)" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Wait" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Wait(System.Int32)" type="API" />
  <topic id="M:W.Threading.ThreadSlim.Wait(System.Threading.CancellationToken)" type="API" />
  <topic id="N:W.Threading.GateExtensions" type="API" />
  <topic id="T:W.Threading.GateExtensions.GateExtensions" type="API" />
  <topic id="Methods.T:W.Threading.GateExtensions.GateExtensions" type="API" />
  <topic id="Overload:W.Threading.GateExtensions.GateExtensions.AsGate" type="API" />
  <topic id="M:W.Threading.GateExtensions.GateExtensions.AsGate(System.Action{System.Threading.CancellationToken})" type="API" />
  <topic id="M:W.Threading.GateExtensions.GateExtensions.AsGate``1(System.Action{``0,System.Threading.CancellationToken})" type="API" />
  <topic id="N:W.Threading.Lockers" type="API" />
  <topic id="T:W.Threading.Lockers.ILocker" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.ILocker" type="API" />
  <topic id="Overload:W.Threading.Lockers.ILocker.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.ILocker.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.ILocker.InLock(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})" type="API" />
  <topic id="T:W.Threading.Lockers.ILocker`1" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.ILocker`1" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.ILocker`1" type="API" />
  <topic id="P:W.Threading.Lockers.ILocker`1.Locker" type="API" />
  <topic id="T:W.Threading.Lockers.IStateLocker`2" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.IStateLocker`2" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.IStateLocker`2" type="API" />
  <topic id="Overload:W.Threading.Lockers.IStateLocker`2.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.IStateLocker`2.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Action{`1})" type="API" />
  <topic id="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Func{`1,`1})" type="API" />
  <topic id="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Action{`1})" type="API" />
  <topic id="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Func{`1,`1})" type="API" />
  <topic id="T:W.Threading.Lockers.LockTypeEnum" type="API" />
  <topic id="T:W.Threading.Lockers.MonitorLocker" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.MonitorLocker" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.MonitorLocker" type="API" />
  <topic id="Overload:W.Threading.Lockers.MonitorLocker.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.MonitorLocker.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.MonitorLocker.#ctor" type="API" />
  <topic id="M:W.Threading.Lockers.MonitorLocker.InLock(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.MonitorLocker.InLock``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.MonitorLocker.InLockAsync(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.MonitorLocker.InLockAsync``1(System.Func{``0})" type="API" />
  <topic id="P:W.Threading.Lockers.MonitorLocker.Locker" type="API" />
  <topic id="T:W.Threading.Lockers.MonitorLocker`1" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.MonitorLocker`1" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.MonitorLocker`1" type="API" />
  <topic id="Fields.T:W.Threading.Lockers.MonitorLocker`1" type="API" />
  <topic id="M:W.Threading.Lockers.MonitorLocker`1.#ctor" type="API" />
  <topic id="T:W.Threading.Lockers.ReaderWriterLocker" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.ReaderWriterLocker" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.ReaderWriterLocker" type="API" />
  <topic id="Overload:W.Threading.Lockers.ReaderWriterLocker.#ctor" type="API" />
  <topic id="Overload:W.Threading.Lockers.ReaderWriterLocker.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.ReaderWriterLocker.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.#ctor" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.#ctor(System.Threading.LockRecursionPolicy)" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.Dispose" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLock(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLock(W.Threading.Lockers.LockTypeEnum,System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" type="API" />
  <topic id="P:W.Threading.Lockers.ReaderWriterLocker.Locker" type="API" />
  <topic id="T:W.Threading.Lockers.ReaderWriterLocker`1" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.ReaderWriterLocker`1" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.ReaderWriterLocker`1" type="API" />
  <topic id="Fields.T:W.Threading.Lockers.ReaderWriterLocker`1" type="API" />
  <topic id="Overload:W.Threading.Lockers.ReaderWriterLocker`1.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker`1.#ctor" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker`1.Dispose" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" type="API" />
  <topic id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" type="API" />
  <topic id="T:W.Threading.Lockers.SemaphoreSlimLocker" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.SemaphoreSlimLocker" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.SemaphoreSlimLocker" type="API" />
  <topic id="Overload:W.Threading.Lockers.SemaphoreSlimLocker.#ctor" type="API" />
  <topic id="Overload:W.Threading.Lockers.SemaphoreSlimLocker.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor(System.Int32)" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor(System.Int32,System.Int32)" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.Dispose" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync``1(System.Func{``0})" type="API" />
  <topic id="P:W.Threading.Lockers.SemaphoreSlimLocker.Locker" type="API" />
  <topic id="T:W.Threading.Lockers.SemaphoreSlimLocker`1" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.SemaphoreSlimLocker`1" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.SemaphoreSlimLocker`1" type="API" />
  <topic id="Fields.T:W.Threading.Lockers.SemaphoreSlimLocker`1" type="API" />
  <topic id="M:W.Threading.Lockers.SemaphoreSlimLocker`1.#ctor" type="API" />
  <topic id="T:W.Threading.Lockers.SpinLocker" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.SpinLocker" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.SpinLocker" type="API" />
  <topic id="Overload:W.Threading.Lockers.SpinLocker.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.SpinLocker.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.SpinLocker.#ctor" type="API" />
  <topic id="M:W.Threading.Lockers.SpinLocker.InLock(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.SpinLocker.InLock``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.SpinLocker.InLockAsync(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.SpinLocker.InLockAsync``1(System.Func{``0})" type="API" />
  <topic id="P:W.Threading.Lockers.SpinLocker.Locker" type="API" />
  <topic id="T:W.Threading.Lockers.SpinLocker`1" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.SpinLocker`1" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.SpinLocker`1" type="API" />
  <topic id="Fields.T:W.Threading.Lockers.SpinLocker`1" type="API" />
  <topic id="M:W.Threading.Lockers.SpinLocker`1.#ctor" type="API" />
  <topic id="T:W.Threading.Lockers.StateAssignmentDelegate`1" type="API" />
  <topic id="T:W.Threading.Lockers.StateLocker`2" type="API" />
  <topic id="Methods.T:W.Threading.Lockers.StateLocker`2" type="API" />
  <topic id="Properties.T:W.Threading.Lockers.StateLocker`2" type="API" />
  <topic id="Fields.T:W.Threading.Lockers.StateLocker`2" type="API" />
  <topic id="Overload:W.Threading.Lockers.StateLocker`2.InLock" type="API" />
  <topic id="Overload:W.Threading.Lockers.StateLocker`2.InLockAsync" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.#ctor" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" type="API" />
  <topic id="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" type="API" />
  <topic id="P:W.Threading.Lockers.StateLocker`2.Locker" type="API" />
  <topic id="F:W.Threading.Lockers.StateLocker`2.State" type="API" />
  <topic id="N:W.Threading.ThreadExtensions" type="API" />
  <topic id="T:W.Threading.ThreadExtensions.ThreadExtensions" type="API" />
  <topic id="R:Project_Tungsten" type="API" />
</topics>