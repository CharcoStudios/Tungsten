<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Tungsten">
      <assemblydata version="2.0.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>2.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:W">
      <apidata name="W" group="namespace" />
      <elements>
        <element api="T:W.ActionQueue`1" />
        <element api="T:W.ArrayMethods" />
        <element api="T:W.CallResult`1" />
        <element api="T:W.CallResult" />
        <element api="T:W.Disposable" />
        <element api="T:W.Disposer" />
        <element api="T:W.EventTemplateDelegate" />
        <element api="T:W.EventTemplateDelegate`1" />
        <element api="T:W.EventTemplateDelegate`2" />
        <element api="T:W.EventTemplateDelegate`3" />
        <element api="T:W.EventTemplateDelegate`4" />
        <element api="T:W.EventTemplateDelegate`5" />
        <element api="T:W.EventTemplate" />
        <element api="T:W.EventTemplate`1" />
        <element api="T:W.EventTemplate`2" />
        <element api="T:W.EventTemplate`3" />
        <element api="T:W.EventTemplate`4" />
        <element api="T:W.EventTemplate`5" />
        <element api="T:W.ValueChangedDelegate`1" />
        <element api="T:W.Lockable`1" />
        <element api="T:W.LockableSlim`1" />
        <element api="T:W.IOwnedProperty" />
        <element api="T:W.IProperty`1" />
        <element api="T:W.IProperty" />
        <element api="T:W.Property`1" />
        <element api="T:W.Property`2" />
        <element api="T:W.PropertyBase`2" />
        <element api="T:W.PropertyChangedNotifier" />
        <element api="T:W.PropertyHost" />
        <element api="T:W.PropertyHostNotifier" />
        <element api="T:W.PropertySlim`1" />
        <element api="T:W.Singleton`1" />
      </elements>
    </api>
    <api id="T:W.ActionQueue`1">
      <apidata name="ActionQueue" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.ActionQueue`1.Enqueue(`0)" />
        <element api="M:W.ActionQueue`1.Cancel" />
        <element api="M:W.ActionQueue`1.Dispose" />
        <element api="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)" />
        <element api="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)" />
        <element api="M:W.ActionQueue`1.Finalize" />
        <element api="P:W.ActionQueue`1.Count" />
        <element api="P:W.ActionQueue`1.Queue" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.#ctor(System.Action{`0},System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onItemAdded">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.ActionQueue`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.#ctor(System.Func{`0,System.Boolean},System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onItemAdded">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:W.ActionQueue`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.Cancel">
      <apidata name="Cancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.ActionQueue`1.Count">
      <apidata name="Count" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Count" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.Enqueue(`0)">
      <apidata name="Enqueue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:W.ActionQueue`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.ActionQueue`1.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.ActionQueue`1.Queue">
      <apidata name="Queue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Queue" />
      <returns>
        <type api="T:System.Collections.Concurrent.ConcurrentQueue`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:W.ActionQueue`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ActionQueue`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.ArrayMethods">
      <apidata name="ArrayMethods" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.ArrayMethods.PeekStart``1(``0[],System.Int32)" />
        <element api="M:W.ArrayMethods.Peek``1(``0[],System.Int32,System.Int32)" />
        <element api="M:W.ArrayMethods.PeekEnd``1(``0[],System.Int32)" />
        <element api="M:W.ArrayMethods.TakeFromStart``1(``0[]@,System.Int32)" />
        <element api="M:W.ArrayMethods.Take``1(``0[]@,System.Int32,System.Int32)" />
        <element api="M:W.ArrayMethods.TakeFromEnd``1(``0[]@,System.Int32)" />
        <element api="M:W.ArrayMethods.TrimStart``1(``0[]@,System.Int32)" />
        <element api="M:W.ArrayMethods.Trim``1(``0[]@,System.Int32,System.Int32)" />
        <element api="M:W.ArrayMethods.TrimEnd``1(``0[]@,System.Int32)" />
        <element api="M:W.ArrayMethods.Append``1(``0[]@,``0[])" />
        <element api="M:W.ArrayMethods.Insert``1(``0[]@,``0[],System.Int32)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.Append``1(``0[]@,``0[])">
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.Append``1(``0[]@,``0[])" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="itemsToAdd">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:W.ArrayMethods.Append``1(``0[]@,``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.Append``1(``0[]@,``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.Insert``1(``0[]@,``0[],System.Int32)">
      <apidata name="Insert" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.Insert``1(``0[]@,``0[],System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="itemsToInsert">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:W.ArrayMethods.Insert``1(``0[]@,``0[],System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.Insert``1(``0[]@,``0[],System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.Peek``1(``0[],System.Int32,System.Int32)">
      <apidata name="Peek" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:W.ArrayMethods.Peek``1(``0[],System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="startIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.Peek``1(``0[],System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.PeekEnd``1(``0[],System.Int32)">
      <apidata name="PeekEnd" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:W.ArrayMethods.PeekEnd``1(``0[],System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.PeekEnd``1(``0[],System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.PeekStart``1(``0[],System.Int32)">
      <apidata name="PeekStart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:W.ArrayMethods.PeekStart``1(``0[],System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.PeekStart``1(``0[],System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.Take``1(``0[]@,System.Int32,System.Int32)">
      <apidata name="Take" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.Take``1(``0[]@,System.Int32,System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="startIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.Take``1(``0[]@,System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.TakeFromEnd``1(``0[]@,System.Int32)">
      <apidata name="TakeFromEnd" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.TakeFromEnd``1(``0[]@,System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.TakeFromEnd``1(``0[]@,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.TakeFromStart``1(``0[]@,System.Int32)">
      <apidata name="TakeFromStart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.TakeFromStart``1(``0[]@,System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.TakeFromStart``1(``0[]@,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.Trim``1(``0[]@,System.Int32,System.Int32)">
      <apidata name="Trim" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.Trim``1(``0[]@,System.Int32,System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="startIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.Trim``1(``0[]@,System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.TrimEnd``1(``0[]@,System.Int32)">
      <apidata name="TrimEnd" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.TrimEnd``1(``0[]@,System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.TrimEnd``1(``0[]@,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.ArrayMethods.TrimStart``1(``0[]@,System.Int32)">
      <apidata name="TrimStart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <referenceTo>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:W.ArrayMethods.TrimStart``1(``0[]@,System.Int32)" />
            </arrayOf>
          </referenceTo>
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:W.ArrayMethods.TrimStart``1(``0[]@,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.ArrayMethods" ref="true" />
      </containers>
    </api>
    <api id="T:W.CallResult">
      <apidata name="CallResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.CallResult`1" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:W.CallResult.#ctor" />
        <element api="M:W.CallResult.#ctor(System.Boolean)" />
        <element api="M:W.CallResult.#ctor(System.Boolean,System.Exception)" />
        <element api="P:W.CallResult.Success" />
        <element api="P:W.CallResult.Exception" />
        <element api="P:W.CallResult.Empty" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.CallResult.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult.#ctor(System.Boolean,System.Exception)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult.Empty">
      <apidata name="Empty" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Empty" />
      <returns>
        <type api="T:W.CallResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult.Exception">
      <apidata name="Exception" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Exception" />
      <setter name="set_Exception" />
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult.Success">
      <apidata name="Success" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Success" />
      <setter name="set_Success" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult" ref="true" />
      </containers>
    </api>
    <api id="T:W.CallResult`1">
      <apidata name="CallResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.CallResult" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TResult" />
      </templates>
      <elements>
        <element api="M:W.CallResult`1.#ctor" />
        <element api="M:W.CallResult`1.#ctor(System.Boolean)" />
        <element api="M:W.CallResult`1.#ctor(System.Boolean,`0)" />
        <element api="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)" />
        <element api="P:W.CallResult`1.Result" />
        <element api="P:W.CallResult`1.Empty" />
        <element api="P:W.CallResult.Success" />
        <element api="P:W.CallResult.Exception" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor(System.Boolean,`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="result">
          <template name="TResult" index="0" api="T:W.CallResult`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.CallResult`1.#ctor(System.Boolean,`0,System.Exception)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="success">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="result">
          <template name="TResult" index="0" api="T:W.CallResult`1" />
        </parameter>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult`1.Empty">
      <apidata name="Empty" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Empty" />
      <returns>
        <type api="T:W.CallResult`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="T:W.CallResult`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.CallResult`1.Result">
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Result" />
      <setter name="set_Result" />
      <returns>
        <template name="TResult" index="0" api="T:W.CallResult`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.CallResult`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Disposable">
      <apidata name="Disposable" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.ParameterizedThread" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="F:W.Disposable.IsDisposed" />
        <element api="F:W.Disposable.IsDisposing" />
        <element api="M:W.Disposable.OnDisposeUnmanaged" />
        <element api="M:W.Disposable.OnDispose" />
        <element api="M:W.Disposable.Dispose" />
        <element api="M:W.Disposable.#ctor" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Disposable.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposable" ref="true" />
      </containers>
    </api>
    <api id="M:W.Disposable.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposable" ref="true" />
      </containers>
    </api>
    <api id="F:W.Disposable.IsDisposed">
      <apidata name="IsDisposed" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposable" ref="true" />
      </containers>
    </api>
    <api id="F:W.Disposable.IsDisposing">
      <apidata name="IsDisposing" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposable" ref="true" />
      </containers>
    </api>
    <api id="M:W.Disposable.OnDispose">
      <apidata name="OnDispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposable" ref="true" />
      </containers>
    </api>
    <api id="M:W.Disposable.OnDisposeUnmanaged">
      <apidata name="OnDisposeUnmanaged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposable" ref="true" />
      </containers>
    </api>
    <api id="T:W.Disposer">
      <apidata name="Disposer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Disposer.Cleanup(System.Action)" />
        <element api="M:W.Disposer.Cleanup(System.Object,System.Action)" />
        <element api="M:W.Disposer.#ctor" />
        <element api="P:W.Disposer.IsDisposed" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Disposer.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposer" ref="true" />
      </containers>
    </api>
    <api id="M:W.Disposer.Cleanup(System.Action)">
      <apidata name="Cleanup" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cleanupAction">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposer" ref="true" />
      </containers>
    </api>
    <api id="M:W.Disposer.Cleanup(System.Object,System.Action)">
      <apidata name="Cleanup" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="objToSupressFinalize">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="cleanupAction">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposer" ref="true" />
      </containers>
    </api>
    <api id="P:W.Disposer.IsDisposed">
      <apidata name="IsDisposed" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDisposed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Disposer" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplate">
      <apidata name="EventTemplate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.EventTemplate.Raise(System.Object,System.String,System.Object[])" />
        <element api="M:W.EventTemplate.#ctor" />
        <element api="E:W.EventTemplate.OnRaised" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.EventTemplate.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate" ref="true" />
      </containers>
    </api>
    <api id="E:W.EventTemplate.OnRaised">
      <apidata name="OnRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OnRaised" />
      <remover name="remove_OnRaised" />
      <eventhandler>
        <type api="T:W.EventTemplateDelegate" ref="true" />
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate" ref="true" />
      </containers>
    </api>
    <api id="M:W.EventTemplate.Raise(System.Object,System.String,System.Object[])">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplate`1">
      <apidata name="EventTemplate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TEventArg" />
      </templates>
      <elements>
        <element api="M:W.EventTemplate`1.Raise(System.Object,`0,System.String)" />
        <element api="M:W.EventTemplate`1.#ctor" />
        <element api="E:W.EventTemplate`1.OnRaised" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`1" ref="true" />
      </containers>
    </api>
    <api id="E:W.EventTemplate`1.OnRaised">
      <apidata name="OnRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OnRaised" />
      <remover name="remove_OnRaised" />
      <eventhandler>
        <type api="T:W.EventTemplateDelegate`1" ref="true">
          <specialization>
            <template name="TEventArg" index="0" api="T:W.EventTemplate`1" />
          </specialization>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`1.Raise(System.Object,`0,System.String)">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg">
          <template name="TEventArg" index="0" api="T:W.EventTemplate`1" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplate`2">
      <apidata name="EventTemplate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
      </templates>
      <elements>
        <element api="M:W.EventTemplate`2.Raise(System.Object,`0,`1,System.String)" />
        <element api="M:W.EventTemplate`2.#ctor" />
        <element api="E:W.EventTemplate`2.OnRaised" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`2.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`2" ref="true" />
      </containers>
    </api>
    <api id="E:W.EventTemplate`2.OnRaised">
      <apidata name="OnRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OnRaised" />
      <remover name="remove_OnRaised" />
      <eventhandler>
        <type api="T:W.EventTemplateDelegate`2" ref="true">
          <specialization>
            <template name="TEventArg1" index="0" api="T:W.EventTemplate`2" />
            <template name="TEventArg2" index="1" api="T:W.EventTemplate`2" />
          </specialization>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`2.Raise(System.Object,`0,`1,System.String)">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplate`2" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplate`2" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplate`3">
      <apidata name="EventTemplate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
        <template name="TEventArg3" />
      </templates>
      <elements>
        <element api="M:W.EventTemplate`3.Raise(System.Object,`0,`1,`2,System.String)" />
        <element api="M:W.EventTemplate`3.#ctor" />
        <element api="E:W.EventTemplate`3.OnRaised" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`3.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`3" ref="true" />
      </containers>
    </api>
    <api id="E:W.EventTemplate`3.OnRaised">
      <apidata name="OnRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OnRaised" />
      <remover name="remove_OnRaised" />
      <eventhandler>
        <type api="T:W.EventTemplateDelegate`3" ref="true">
          <specialization>
            <template name="TEventArg1" index="0" api="T:W.EventTemplate`3" />
            <template name="TEventArg2" index="1" api="T:W.EventTemplate`3" />
            <template name="TEventArg3" index="2" api="T:W.EventTemplate`3" />
          </specialization>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`3" ref="true" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`3.Raise(System.Object,`0,`1,`2,System.String)">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplate`3" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplate`3" />
        </parameter>
        <parameter name="arg3">
          <template name="TEventArg3" index="2" api="T:W.EventTemplate`3" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`3" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplate`4">
      <apidata name="EventTemplate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
        <template name="TEventArg3" />
        <template name="TEventArg4" />
      </templates>
      <elements>
        <element api="M:W.EventTemplate`4.Raise(System.Object,`0,`1,`2,`3,System.String)" />
        <element api="M:W.EventTemplate`4.#ctor" />
        <element api="E:W.EventTemplate`4.OnRaised" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`4.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`4" ref="true" />
      </containers>
    </api>
    <api id="E:W.EventTemplate`4.OnRaised">
      <apidata name="OnRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OnRaised" />
      <remover name="remove_OnRaised" />
      <eventhandler>
        <type api="T:W.EventTemplateDelegate`4" ref="true">
          <specialization>
            <template name="TEventArg1" index="0" api="T:W.EventTemplate`4" />
            <template name="TEventArg2" index="1" api="T:W.EventTemplate`4" />
            <template name="TEventArg3" index="2" api="T:W.EventTemplate`4" />
            <template name="TEventArg4" index="3" api="T:W.EventTemplate`4" />
          </specialization>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`4" ref="true" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`4.Raise(System.Object,`0,`1,`2,`3,System.String)">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplate`4" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplate`4" />
        </parameter>
        <parameter name="arg3">
          <template name="TEventArg3" index="2" api="T:W.EventTemplate`4" />
        </parameter>
        <parameter name="arg4">
          <template name="TEventArg4" index="3" api="T:W.EventTemplate`4" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`4" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplate`5">
      <apidata name="EventTemplate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
        <template name="TEventArg3" />
        <template name="TEventArg4" />
        <template name="TEventArg5" />
      </templates>
      <elements>
        <element api="M:W.EventTemplate`5.Raise(System.Object,`0,`1,`2,`3,`4,System.String)" />
        <element api="M:W.EventTemplate`5.#ctor" />
        <element api="E:W.EventTemplate`5.OnRaised" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`5.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`5" ref="true" />
      </containers>
    </api>
    <api id="E:W.EventTemplate`5.OnRaised">
      <apidata name="OnRaised" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OnRaised" />
      <remover name="remove_OnRaised" />
      <eventhandler>
        <type api="T:W.EventTemplateDelegate`5" ref="true">
          <specialization>
            <template name="TEventArg1" index="0" api="T:W.EventTemplate`5" />
            <template name="TEventArg2" index="1" api="T:W.EventTemplate`5" />
            <template name="TEventArg3" index="2" api="T:W.EventTemplate`5" />
            <template name="TEventArg4" index="3" api="T:W.EventTemplate`5" />
            <template name="TEventArg5" index="4" api="T:W.EventTemplate`5" />
          </specialization>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`5" ref="true" />
      </containers>
    </api>
    <api id="M:W.EventTemplate`5.Raise(System.Object,`0,`1,`2,`3,`4,System.String)">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplate`5" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplate`5" />
        </parameter>
        <parameter name="arg3">
          <template name="TEventArg3" index="2" api="T:W.EventTemplate`5" />
        </parameter>
        <parameter name="arg4">
          <template name="TEventArg4" index="3" api="T:W.EventTemplate`5" />
        </parameter>
        <parameter name="arg5">
          <template name="TEventArg5" index="4" api="T:W.EventTemplate`5" />
        </parameter>
        <parameter name="callerMemberName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.EventTemplate`5" ref="true" />
      </containers>
    </api>
    <api id="T:W.EventTemplateDelegate">
      <apidata name="EventTemplateDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="callerMemberName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="T:W.EventTemplateDelegate`1">
      <apidata name="EventTemplateDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TEventArg" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg">
          <template name="TEventArg" index="0" api="T:W.EventTemplateDelegate`1" />
        </parameter>
        <parameter name="callerMemberName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="T:W.EventTemplateDelegate`2">
      <apidata name="EventTemplateDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplateDelegate`2" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplateDelegate`2" />
        </parameter>
        <parameter name="callerMemberName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="T:W.EventTemplateDelegate`3">
      <apidata name="EventTemplateDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
        <template name="TEventArg3" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplateDelegate`3" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplateDelegate`3" />
        </parameter>
        <parameter name="arg3">
          <template name="TEventArg3" index="2" api="T:W.EventTemplateDelegate`3" />
        </parameter>
        <parameter name="callerMemberName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="T:W.EventTemplateDelegate`4">
      <apidata name="EventTemplateDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
        <template name="TEventArg3" />
        <template name="TEventArg4" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplateDelegate`4" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplateDelegate`4" />
        </parameter>
        <parameter name="arg3">
          <template name="TEventArg3" index="2" api="T:W.EventTemplateDelegate`4" />
        </parameter>
        <parameter name="arg4">
          <template name="TEventArg4" index="3" api="T:W.EventTemplateDelegate`4" />
        </parameter>
        <parameter name="callerMemberName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="T:W.EventTemplateDelegate`5">
      <apidata name="EventTemplateDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TEventArg1" />
        <template name="TEventArg2" />
        <template name="TEventArg3" />
        <template name="TEventArg4" />
        <template name="TEventArg5" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="arg1">
          <template name="TEventArg1" index="0" api="T:W.EventTemplateDelegate`5" />
        </parameter>
        <parameter name="arg2">
          <template name="TEventArg2" index="1" api="T:W.EventTemplateDelegate`5" />
        </parameter>
        <parameter name="arg3">
          <template name="TEventArg3" index="2" api="T:W.EventTemplateDelegate`5" />
        </parameter>
        <parameter name="arg4">
          <template name="TEventArg4" index="3" api="T:W.EventTemplateDelegate`5" />
        </parameter>
        <parameter name="arg5">
          <template name="TEventArg5" index="4" api="T:W.EventTemplateDelegate`5" />
        </parameter>
        <parameter name="callerMemberName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="T:W.IOwnedProperty">
      <apidata name="IOwnedProperty" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.Property`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.IOwnedProperty.SetOwner(System.Object)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.IOwnedProperty.SetOwner(System.Object)">
      <apidata name="SetOwner" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="owner">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.IOwnedProperty" ref="true" />
      </containers>
    </api>
    <api id="T:W.IProperty">
      <apidata name="IProperty" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.IProperty`1" ref="true" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </implementors>
      <elements>
        <element api="P:W.IProperty.IsDirty" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="P:W.IProperty.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDirty" />
      <setter name="set_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.IProperty" ref="true" />
      </containers>
    </api>
    <api id="T:W.IProperty`1">
      <apidata name="IProperty" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:W.IProperty" ref="true" />
      </implements>
      <implementors>
        <type api="T:W.PropertyBase`2" ref="true" />
      </implementors>
      <elements>
        <element api="P:W.IProperty`1.Value" />
        <element api="P:W.IProperty.IsDirty" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="P:W.IProperty`1.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <template name="TValue" index="0" api="T:W.IProperty`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.IProperty`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Lockable`1">
      <apidata name="Lockable" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.LockableSlim`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Lockable`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Lockable`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TValue" index="0" api="T:W.Lockable`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.PropertySlim`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Lockable`1.InformWaiters" />
        <element api="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.OnValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.WaitForValueChanged(System.Int32)" />
        <element api="M:W.Lockable`1.SetValue(`0)" />
        <element api="M:W.Lockable`1.Dispose" />
        <element api="M:W.Lockable`1.#ctor" />
        <element api="M:W.Lockable`1.#ctor(`0)" />
        <element api="M:W.Lockable`1.#ctor(System.Action{System.Object,`0,`0})" />
        <element api="M:W.Lockable`1.#ctor(`0,System.Action{System.Object,`0,`0})" />
        <element api="E:W.Lockable`1.ValueChanged" />
        <element api="M:W.LockableSlim`1.GetValue" />
        <element api="P:W.LockableSlim`1.Value" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.#ctor(System.Action{System.Object,`0,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="0" api="T:W.Lockable`1" />
              <template name="TValue" index="0" api="T:W.Lockable`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.#ctor(`0,System.Action{System.Object,`0,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="0" api="T:W.Lockable`1" />
              <template name="TValue" index="0" api="T:W.Lockable`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.InformWaiters">
      <apidata name="InformWaiters" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.OnValueChanged(System.Object,`0,`0)">
      <apidata name="OnValueChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)">
      <apidata name="RaiseValueChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.SetValue(`0)">
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.LockableSlim`1.SetValue(`0)">
          <type api="T:W.LockableSlim`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Lockable`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="newValue">
          <template name="TValue" index="0" api="T:W.Lockable`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="E:W.Lockable`1.ValueChanged">
      <apidata name="ValueChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ValueChanged" />
      <remover name="remove_ValueChanged" />
      <eventhandler>
        <type api="T:W.ValueChangedDelegate`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:W.Lockable`1" />
          </specialization>
        </type>
      </eventhandler>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Lockable`1.WaitForValueChanged(System.Int32)">
      <apidata name="WaitForValueChanged" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>-1</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Lockable`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.LockableSlim`1">
      <apidata name="LockableSlim" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.LockableSlim`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TValue" index="0" api="T:W.LockableSlim`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Lockable`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:W.LockableSlim`1.GetValue" />
        <element api="M:W.LockableSlim`1.SetValue(`0)" />
        <element api="M:W.LockableSlim`1.#ctor" />
        <element api="M:W.LockableSlim`1.#ctor(`0)" />
        <element api="P:W.LockableSlim`1.Value" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.Dispose" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.LockableSlim`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.LockableSlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.LockableSlim`1.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialValue">
          <template name="TValue" index="0" api="T:W.LockableSlim`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.LockableSlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.LockableSlim`1.GetValue">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <template name="TValue" index="0" api="T:W.LockableSlim`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.LockableSlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.LockableSlim`1.SetValue(`0)">
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <template name="TValue" index="0" api="T:W.LockableSlim`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.LockableSlim`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.LockableSlim`1.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <template name="TValue" index="0" api="T:W.LockableSlim`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.LockableSlim`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Property`1">
      <apidata name="Property" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <type api="T:W.Property`1" ref="true">
                <specialization>
                  <template name="TValue" index="0" api="T:W.Property`1" />
                </specialization>
              </type>
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:W.PropertySlim`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:W.Lockable`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:W.LockableSlim`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:W.Property`1.#ctor" />
        <element api="M:W.Property`1.#ctor(`0)" />
        <element api="M:W.Property`1.#ctor(System.Action{System.Object,`0,`0})" />
        <element api="M:W.Property`1.#ctor(`0,System.Action{System.Object,`0,`0})" />
        <element api="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanging(System.String)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyBase`2.OnValueChanged(System.Object,`1,`1)" />
        <element api="M:W.PropertyBase`2.LoadValue(`1)" />
        <element api="P:W.PropertyBase`2.IsDirty" />
        <element api="P:W.PropertyBase`2.Owner" />
        <element api="P:W.PropertyBase`2.DefaultValue" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanging(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.SetValue(`0)" />
        <element api="E:W.PropertySlim`1.PropertyChanging" />
        <element api="E:W.PropertySlim`1.PropertyChanged" />
        <element api="M:W.Lockable`1.InformWaiters" />
        <element api="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.WaitForValueChanged(System.Int32)" />
        <element api="M:W.Lockable`1.Dispose" />
        <element api="E:W.Lockable`1.ValueChanged" />
        <element api="M:W.LockableSlim`1.GetValue" />
        <element api="P:W.LockableSlim`1.Value" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor(System.Action{System.Object,`0,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="0" api="T:W.Property`1" />
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="0" api="T:W.Property`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`1.#ctor(`0,System.Action{System.Object,`0,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="0" api="T:W.Property`1" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="0" api="T:W.Property`1" />
              <template name="TValue" index="0" api="T:W.Property`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Property`2">
      <apidata name="Property" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyBase`2" ref="true">
            <specialization>
              <template name="TOwner" index="0" api="T:W.Property`2" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:W.PropertySlim`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:W.Lockable`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:W.LockableSlim`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TOwner">
          <constrained ref="true" />
        </template>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:W.IOwnedProperty" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Property`2.W#IOwnedProperty#SetOwner(System.Object)" />
        <element api="M:W.Property`2.#ctor" />
        <element api="M:W.Property`2.#ctor(`0)" />
        <element api="M:W.Property`2.#ctor(`1)" />
        <element api="M:W.Property`2.#ctor(`0,`1)" />
        <element api="M:W.Property`2.#ctor(System.Action{System.Object,`1,`1})" />
        <element api="M:W.Property`2.#ctor(`0,System.Action{System.Object,`1,`1})" />
        <element api="M:W.Property`2.#ctor(`1,System.Action{System.Object,`1,`1})" />
        <element api="M:W.Property`2.#ctor(`0,`1,System.Action{System.Object,`1,`1})" />
        <element api="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanging(System.String)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyBase`2.OnValueChanged(System.Object,`1,`1)" />
        <element api="M:W.PropertyBase`2.LoadValue(`1)" />
        <element api="P:W.PropertyBase`2.IsDirty" />
        <element api="P:W.PropertyBase`2.Owner" />
        <element api="P:W.PropertyBase`2.DefaultValue" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanging(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.SetValue(`0)" />
        <element api="E:W.PropertySlim`1.PropertyChanging" />
        <element api="E:W.PropertySlim`1.PropertyChanged" />
        <element api="M:W.Lockable`1.InformWaiters" />
        <element api="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.WaitForValueChanged(System.Int32)" />
        <element api="M:W.Lockable`1.Dispose" />
        <element api="E:W.Lockable`1.ValueChanged" />
        <element api="M:W.LockableSlim`1.GetValue" />
        <element api="P:W.LockableSlim`1.Value" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.Property`2" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0,System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.Property`2" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0,`1)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`0,`1,System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.Property`2" />
        </parameter>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.Property`2" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`1)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.#ctor(`1,System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.Property`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.Property`2" />
              <template name="TValue" index="1" api="T:W.Property`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Property`2.W#IOwnedProperty#SetOwner(System.Object)">
      <apidata name="SetOwner" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="owner">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.IOwnedProperty.SetOwner(System.Object)">
          <type api="T:W.IOwnedProperty" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Property`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyBase`2">
      <apidata name="PropertyBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertySlim`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
          <type api="T:W.Lockable`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
          <type api="T:W.LockableSlim`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Property`1" ref="true" />
          <type api="T:W.Property`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TOwner" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:W.IProperty`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:W.PropertyBase`2" />
          </specialization>
        </type>
        <type api="T:W.IProperty" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanging(System.String)" />
        <element api="M:W.PropertyBase`2.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyBase`2.OnValueChanged(System.Object,`1,`1)" />
        <element api="M:W.PropertyBase`2.LoadValue(`1)" />
        <element api="M:W.PropertyBase`2.#ctor" />
        <element api="M:W.PropertyBase`2.#ctor(`0)" />
        <element api="M:W.PropertyBase`2.#ctor(`1)" />
        <element api="M:W.PropertyBase`2.#ctor(`0,`1)" />
        <element api="M:W.PropertyBase`2.#ctor(System.Action{System.Object,`1,`1})" />
        <element api="M:W.PropertyBase`2.#ctor(`0,System.Action{System.Object,`1,`1})" />
        <element api="M:W.PropertyBase`2.#ctor(`1,System.Action{System.Object,`1,`1})" />
        <element api="M:W.PropertyBase`2.#ctor(`0,`1,System.Action{System.Object,`1,`1})" />
        <element api="P:W.PropertyBase`2.IsDirty" />
        <element api="P:W.PropertyBase`2.Owner" />
        <element api="P:W.PropertyBase`2.DefaultValue" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanging(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.SetValue(`0)" />
        <element api="E:W.PropertySlim`1.PropertyChanging" />
        <element api="E:W.PropertySlim`1.PropertyChanged" />
        <element api="M:W.Lockable`1.InformWaiters" />
        <element api="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.WaitForValueChanged(System.Int32)" />
        <element api="M:W.Lockable`1.Dispose" />
        <element api="E:W.Lockable`1.ValueChanged" />
        <element api="M:W.LockableSlim`1.GetValue" />
        <element api="P:W.LockableSlim`1.Value" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(`0,System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(`0,`1)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(`0,`1,System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="owner">
          <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(`1)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.#ctor(`1,System.Action{System.Object,`1,`1})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="defaultValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.DefaultValue">
      <apidata name="DefaultValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DefaultValue" />
      <setter name="set_DefaultValue" />
      <returns>
        <template name="TValue" index="1" api="T:W.PropertyBase`2" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_IsDirty" />
      <setter name="set_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:W.IProperty.IsDirty">
          <type api="T:W.IProperty" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.LoadValue(`1)">
      <apidata name="LoadValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.OnPropertyChanged(System.String)">
      <apidata name="OnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.PropertySlim`1.OnPropertyChanged(System.String)">
          <type api="T:W.PropertySlim`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.OnPropertyChanging(System.String)">
      <apidata name="OnPropertyChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.PropertySlim`1.OnPropertyChanging(System.String)">
          <type api="T:W.PropertySlim`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.OnValueChanged(System.Object,`1,`1)">
      <apidata name="OnValueChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Lockable`1.OnValueChanged(System.Object,`0,`0)">
          <type api="T:W.Lockable`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:W.PropertyBase`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="1" api="T:W.PropertyBase`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyBase`2.Owner">
      <apidata name="Owner" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Owner" />
      <setter name="set_Owner" />
      <returns>
        <template name="TOwner" index="0" api="T:W.PropertyBase`2" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyBase`2.ResetToDefaultValue(System.Boolean)">
      <apidata name="ResetToDefaultValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="raise">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyChangedNotifier">
      <apidata name="PropertyChangedNotifier" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.PropertyHostNotifier" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
      </implements>
      <elements>
        <element api="M:W.PropertyChangedNotifier.GetValue" />
        <element api="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)" />
        <element api="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="M:W.PropertyChangedNotifier.#ctor" />
        <element api="E:W.PropertyChangedNotifier.PropertyChanged" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.GetValue">
      <apidata name="GetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)">
      <apidata name="OnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="E:W.PropertyChangedNotifier.PropertyChanged">
      <apidata name="PropertyChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanged" />
      <remover name="remove_PropertyChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
          <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)">
      <apidata name="RaiseOnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)">
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyChangedNotifier" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyHost">
      <apidata name="PropertyHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
            <type api="T:W.Logging.Log" ref="true" />
          </type>
        </descendents>
      </family>
      <elements>
        <element api="M:W.PropertyHost.MarkAsClean" />
        <element api="M:W.PropertyHost.#ctor" />
        <element api="P:W.PropertyHost.IsDirty" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyHost.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHost" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyHost.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHost" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyHost.MarkAsClean">
      <apidata name="MarkAsClean" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHost" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertyHostNotifier">
      <apidata name="PropertyHostNotifier" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyChangedNotifier" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.PropertyHostNotifier.MarkAsClean" />
        <element api="M:W.PropertyHostNotifier.#ctor" />
        <element api="P:W.PropertyHostNotifier.IsDirty" />
        <element api="M:W.PropertyChangedNotifier.GetValue" />
        <element api="M:W.PropertyChangedNotifier.SetValue(System.Object,System.String)" />
        <element api="M:W.PropertyChangedNotifier.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertyChangedNotifier.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="E:W.PropertyChangedNotifier.PropertyChanged" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertyHostNotifier.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostNotifier" ref="true" />
      </containers>
    </api>
    <api id="P:W.PropertyHostNotifier.IsDirty">
      <apidata name="IsDirty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDirty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostNotifier" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertyHostNotifier.MarkAsClean">
      <apidata name="MarkAsClean" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertyHostNotifier" ref="true" />
      </containers>
    </api>
    <api id="T:W.PropertySlim`1">
      <apidata name="PropertySlim" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Lockable`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
          <type api="T:W.LockableSlim`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.PropertyBase`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.ComponentModel.INotifyPropertyChanging" ref="true" />
        <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
      </implements>
      <elements>
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanging(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.OnPropertyChanging(System.String)" />
        <element api="M:W.PropertySlim`1.RaiseOnPropertyChanged(System.Object,System.String)" />
        <element api="M:W.PropertySlim`1.OnPropertyChanged(System.String)" />
        <element api="M:W.PropertySlim`1.SetValue(`0)" />
        <element api="M:W.PropertySlim`1.#ctor" />
        <element api="M:W.PropertySlim`1.#ctor(`0)" />
        <element api="M:W.PropertySlim`1.#ctor(System.Action{System.Object,`0,`0})" />
        <element api="M:W.PropertySlim`1.#ctor(`0,System.Action{System.Object,`0,`0})" />
        <element api="E:W.PropertySlim`1.PropertyChanging" />
        <element api="E:W.PropertySlim`1.PropertyChanged" />
        <element api="M:W.Lockable`1.InformWaiters" />
        <element api="M:W.Lockable`1.RaiseValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.OnValueChanged(System.Object,`0,`0)" />
        <element api="M:W.Lockable`1.WaitForValueChanged(System.Int32)" />
        <element api="M:W.Lockable`1.Dispose" />
        <element api="E:W.Lockable`1.ValueChanged" />
        <element api="M:W.LockableSlim`1.GetValue" />
        <element api="P:W.LockableSlim`1.Value" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.#ctor(System.Action{System.Object,`0,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.#ctor(`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialValue">
          <template name="TValue" index="0" api="T:W.PropertySlim`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.#ctor(`0,System.Action{System.Object,`0,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialValue">
          <template name="TValue" index="0" api="T:W.PropertySlim`1" />
        </parameter>
        <parameter name="onValueChanged">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.OnPropertyChanged(System.String)">
      <apidata name="OnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.OnPropertyChanging(System.String)">
      <apidata name="OnPropertyChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="propertyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="E:W.PropertySlim`1.PropertyChanged">
      <apidata name="PropertyChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanged" />
      <remover name="remove_PropertyChanged" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangedEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
          <type api="T:System.ComponentModel.INotifyPropertyChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="E:W.PropertySlim`1.PropertyChanging">
      <apidata name="PropertyChanging" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_PropertyChanging" />
      <remover name="remove_PropertyChanging" />
      <eventhandler>
        <type api="T:System.ComponentModel.PropertyChangingEventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.PropertyChangingEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
          <type api="T:System.ComponentModel.INotifyPropertyChanging" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.RaiseOnPropertyChanged(System.Object,System.String)">
      <apidata name="RaiseOnPropertyChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.RaiseOnPropertyChanging(System.Object,System.String)">
      <apidata name="RaiseOnPropertyChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.PropertySlim`1.SetValue(`0)">
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Lockable`1.SetValue(`0)">
          <type api="T:W.Lockable`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:W.PropertySlim`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="value">
          <template name="TValue" index="0" api="T:W.PropertySlim`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.PropertySlim`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Singleton`1">
      <apidata name="Singleton" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TSingletonType">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <elements>
        <element api="M:W.Singleton`1.#ctor" />
        <element api="P:W.Singleton`1.Instance" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="M:W.Singleton`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Singleton`1" ref="true" />
      </containers>
    </api>
    <api id="P:W.Singleton`1.Instance">
      <apidata name="Instance" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Instance" />
      <returns>
        <template name="TSingletonType" index="0" api="T:W.Singleton`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
        <type api="T:W.Singleton`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.ValueChangedDelegate`1">
      <apidata name="ValueChangedDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="oldValue">
          <template name="TValue" index="0" api="T:W.ValueChangedDelegate`1" />
        </parameter>
        <parameter name="newValue">
          <template name="TValue" index="0" api="T:W.ValueChangedDelegate`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W" />
      </containers>
    </api>
    <api id="N:W.AsExtensions">
      <apidata name="W.AsExtensions" group="namespace" />
      <elements>
        <element api="T:W.AsExtensions.AsExtensions" />
      </elements>
    </api>
    <api id="T:W.AsExtensions.AsExtensions">
      <apidata name="AsExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.AsExtensions.AsExtensions.As``1(System.Object)" />
        <element api="M:W.AsExtensions.AsExtensions.AsBase64(System.String)" />
        <element api="M:W.AsExtensions.AsExtensions.AsBase64(System.Byte[])" />
        <element api="M:W.AsExtensions.AsExtensions.AsBytes(System.String)" />
        <element api="M:W.AsExtensions.AsExtensions.AsString(System.Byte[])" />
        <element api="M:W.AsExtensions.AsExtensions.AsString(System.Byte[],System.Int32,System.Int32)" />
        <element api="M:W.AsExtensions.AsExtensions.AsStream(System.Byte[])" />
        <element api="M:W.AsExtensions.AsExtensions.AsStream(System.String)" />
        <element api="M:W.AsExtensions.AsExtensions.AsJson``1(System.Object)" />
        <element api="M:W.AsExtensions.AsExtensions.AsXml``1(System.Object)" />
        <element api="M:W.AsExtensions.AsExtensions.AsCompressed(System.Byte[])" />
        <element api="M:W.AsExtensions.AsExtensions.AsDecompressed(System.Byte[])" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.As``1(System.Object)">
      <apidata name="As" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType">
          <constrained ref="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.AsExtensions.AsExtensions.As``1(System.Object)" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsBase64(System.Byte[])">
      <apidata name="AsBase64" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsBase64(System.String)">
      <apidata name="AsBase64" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsBytes(System.String)">
      <apidata name="AsBytes" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsCompressed(System.Byte[])">
      <apidata name="AsCompressed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="bytes">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsDecompressed(System.Byte[])">
      <apidata name="AsDecompressed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="bytes">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Use FromCompressed instead.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsJson``1(System.Object)">
      <apidata name="AsJson" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsStream(System.Byte[])">
      <apidata name="AsStream" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IO.MemoryStream" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsStream(System.String)">
      <apidata name="AsStream" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IO.MemoryStream" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsString(System.Byte[])">
      <apidata name="AsString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsString(System.Byte[],System.Int32,System.Int32)">
      <apidata name="AsString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.AsExtensions.AsExtensions.AsXml``1(System.Object)">
      <apidata name="AsXml" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.AsExtensions" />
        <type api="T:W.AsExtensions.AsExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.DelegateExtensions">
      <apidata name="W.DelegateExtensions" group="namespace" />
      <elements>
        <element api="T:W.DelegateExtensions.DelegateExtensions" />
      </elements>
    </api>
    <api id="T:W.DelegateExtensions.DelegateExtensions">
      <apidata name="DelegateExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.DelegateExtensions.DelegateExtensions.Raise(System.Delegate,System.Object[])" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.DelegateExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.DelegateExtensions.DelegateExtensions.Raise(System.Delegate,System.Object[])">
      <apidata name="Raise" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="del">
          <type api="T:System.Delegate" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.Exception" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.DelegateExtensions" />
        <type api="T:W.DelegateExtensions.DelegateExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.Encryption">
      <apidata name="W.Encryption" group="namespace" />
      <elements>
        <element api="T:W.Encryption.AssymetricEncryption" />
        <element api="T:W.Encryption.AssymetricEncryption.ExchangeKeysDelegate" />
        <element api="T:W.Encryption.MD5" />
        <element api="T:W.Encryption.PublicPrivateKeyPair" />
        <element api="T:W.Encryption.RSAMethods" />
      </elements>
    </api>
    <api id="T:W.Encryption.AssymetricEncryption">
      <apidata name="AssymetricEncryption" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Encryption.AssymetricEncryption.ExchangeKeys(W.Encryption.AssymetricEncryption.ExchangeKeysDelegate)" />
        <element api="M:W.Encryption.AssymetricEncryption.Encrypt(System.Byte[]@)" />
        <element api="M:W.Encryption.AssymetricEncryption.Decrypt(System.Byte[]@)" />
        <element api="M:W.Encryption.AssymetricEncryption.#ctor(System.Int32)" />
        <element api="P:W.Encryption.AssymetricEncryption.PublicKey" />
        <element api="P:W.Encryption.AssymetricEncryption.RemotePublicKey" />
        <element api="P:W.Encryption.AssymetricEncryption.LegalKeySizes" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
      </containers>
    </api>
    <api id="M:W.Encryption.AssymetricEncryption.#ctor(System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="keySize" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>2048</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.AssymetricEncryption.Decrypt(System.Byte[]@)">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="bytes">
          <referenceTo>
            <arrayOf rank="1">
              <type api="T:System.Byte" ref="false" />
            </arrayOf>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.AssymetricEncryption.Encrypt(System.Byte[]@)">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="bytes">
          <referenceTo>
            <arrayOf rank="1">
              <type api="T:System.Byte" ref="false" />
            </arrayOf>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.AssymetricEncryption.ExchangeKeys(W.Encryption.AssymetricEncryption.ExchangeKeysDelegate)">
      <apidata name="ExchangeKeys" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="del">
          <type api="T:W.Encryption.AssymetricEncryption.ExchangeKeysDelegate" ref="true">
            <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="P:W.Encryption.AssymetricEncryption.LegalKeySizes">
      <apidata name="LegalKeySizes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LegalKeySizes" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Security.Cryptography.KeySizes" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="P:W.Encryption.AssymetricEncryption.PublicKey">
      <apidata name="PublicKey" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_PublicKey" />
      <returns>
        <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="P:W.Encryption.AssymetricEncryption.RemotePublicKey">
      <apidata name="RemotePublicKey" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RemotePublicKey" />
      <setter name="set_RemotePublicKey" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="T:W.Encryption.AssymetricEncryption.ExchangeKeysDelegate">
      <apidata name="ExchangeKeysDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="localPublicKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.AssymetricEncryption" ref="true" />
      </containers>
    </api>
    <api id="T:W.Encryption.MD5">
      <apidata name="MD5" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Encryption.MD5.GetMd5Hash(System.String)" />
        <element api="M:W.Encryption.MD5.GetMd5Hash(System.String,System.Security.Cryptography.MD5)" />
        <element api="M:W.Encryption.MD5.VerifyMd5Hash(System.String,System.String)" />
        <element api="M:W.Encryption.MD5.#ctor" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
      </containers>
    </api>
    <api id="M:W.Encryption.MD5.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.MD5" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.MD5.GetMd5Hash(System.String)">
      <apidata name="GetMd5Hash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="input">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.MD5" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.MD5.GetMd5Hash(System.String,System.Security.Cryptography.MD5)">
      <apidata name="GetMd5Hash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="input">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="md5">
          <type api="T:System.Security.Cryptography.MD5" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.MD5" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.MD5.VerifyMd5Hash(System.String,System.String)">
      <apidata name="VerifyMd5Hash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="input">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="hash">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.MD5" ref="true" />
      </containers>
    </api>
    <api id="T:W.Encryption.PublicPrivateKeyPair">
      <apidata name="PublicPrivateKeyPair" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Encryption.PublicPrivateKeyPair.#ctor" />
        <element api="P:W.Encryption.PublicPrivateKeyPair.PrivateKey" />
        <element api="P:W.Encryption.PublicPrivateKeyPair.PublicKey" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
      </containers>
    </api>
    <api id="M:W.Encryption.PublicPrivateKeyPair.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.PublicPrivateKeyPair" ref="true" />
      </containers>
    </api>
    <api id="P:W.Encryption.PublicPrivateKeyPair.PrivateKey">
      <apidata name="PrivateKey" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PrivateKey" />
      <setter name="set_PrivateKey" />
      <returns>
        <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.PublicPrivateKeyPair" ref="true" />
      </containers>
    </api>
    <api id="P:W.Encryption.PublicPrivateKeyPair.PublicKey">
      <apidata name="PublicKey" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PublicKey" />
      <setter name="set_PublicKey" />
      <returns>
        <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.PublicPrivateKeyPair" ref="true" />
      </containers>
    </api>
    <api id="T:W.Encryption.RSAMethods">
      <apidata name="RSAMethods" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Encryption.RSAMethods.LegalKeySizes" />
        <element api="M:W.Encryption.RSAMethods.CreateKeyPair(System.Int32)" />
        <element api="M:W.Encryption.RSAMethods.Encrypt(System.String,System.Security.Cryptography.RSAParameters)" />
        <element api="M:W.Encryption.RSAMethods.Decrypt(System.String,System.Security.Cryptography.RSAParameters)" />
        <element api="M:W.Encryption.RSAMethods.EncryptAsync(System.String,System.Security.Cryptography.RSAParameters)" />
        <element api="M:W.Encryption.RSAMethods.DecryptAsync(System.String,System.Security.Cryptography.RSAParameters)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
      </containers>
    </api>
    <api id="M:W.Encryption.RSAMethods.CreateKeyPair(System.Int32)">
      <apidata name="CreateKeyPair" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="keySize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Encryption.PublicPrivateKeyPair" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.RSAMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.RSAMethods.Decrypt(System.String,System.Security.Cryptography.RSAParameters)">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cipher">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="privateKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.RSAMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.RSAMethods.DecryptAsync(System.String,System.Security.Cryptography.RSAParameters)">
      <apidata name="DecryptAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cipher">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="privateKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.RSAMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.RSAMethods.Encrypt(System.String,System.Security.Cryptography.RSAParameters)">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputString">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="publicKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.RSAMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.RSAMethods.EncryptAsync(System.String,System.Security.Cryptography.RSAParameters)">
      <apidata name="EncryptAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputString">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="publicKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.RSAMethods" ref="true" />
      </containers>
    </api>
    <api id="M:W.Encryption.RSAMethods.LegalKeySizes">
      <apidata name="LegalKeySizes" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Security.Cryptography.KeySizes" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Encryption" />
        <type api="T:W.Encryption.RSAMethods" ref="true" />
      </containers>
    </api>
    <api id="N:W.FromExtensions">
      <apidata name="W.FromExtensions" group="namespace" />
      <elements>
        <element api="T:W.FromExtensions.FromExtensions" />
      </elements>
    </api>
    <api id="T:W.FromExtensions.FromExtensions">
      <apidata name="FromExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.FromExtensions.FromExtensions.FromBase64(System.String)" />
        <element api="M:W.FromExtensions.FromExtensions.FromBase64(System.Byte[])" />
        <element api="M:W.FromExtensions.FromExtensions.FromJson``1(System.String)" />
        <element api="M:W.FromExtensions.FromExtensions.FromJson``1(System.Byte[])" />
        <element api="M:W.FromExtensions.FromExtensions.FromXml``1(System.String)" />
        <element api="M:W.FromExtensions.FromExtensions.FromXml``1(System.Byte[])" />
        <element api="M:W.FromExtensions.FromExtensions.FromCompressed(System.Byte[])" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromBase64(System.Byte[])">
      <apidata name="FromBase64" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromBase64(System.String)">
      <apidata name="FromBase64" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromCompressed(System.Byte[])">
      <apidata name="FromCompressed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="bytes">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromJson``1(System.Byte[])">
      <apidata name="FromJson" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.FromExtensions.FromExtensions.FromJson``1(System.Byte[])" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromJson``1(System.String)">
      <apidata name="FromJson" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.FromExtensions.FromExtensions.FromJson``1(System.String)" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromXml``1(System.Byte[])">
      <apidata name="FromXml" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.FromExtensions.FromExtensions.FromXml``1(System.Byte[])" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.FromExtensions.FromExtensions.FromXml``1(System.String)">
      <apidata name="FromXml" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.FromExtensions.FromExtensions.FromXml``1(System.String)" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.FromExtensions" />
        <type api="T:W.FromExtensions.FromExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.InvokeExtensions">
      <apidata name="W.InvokeExtensions" group="namespace" />
      <elements>
        <element api="T:W.InvokeExtensions.InvokeExtensions" />
      </elements>
    </api>
    <api id="T:W.InvokeExtensions.InvokeExtensions">
      <apidata name="InvokeExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" />
        <element api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
        <element api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.InvokeExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})">
      <apidata name="InvokeEx" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ComponentModel.ISynchronizeInvoke" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Action{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.InvokeExtensions" />
        <type api="T:W.InvokeExtensions.InvokeExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})">
      <apidata name="InvokeEx" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ComponentModel.ISynchronizeInvoke" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``1(``0,System.Func{``0,System.Object})" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.InvokeExtensions" />
        <type api="T:W.InvokeExtensions.InvokeExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})">
      <apidata name="InvokeEx" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ComponentModel.ISynchronizeInvoke" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="U" />
      </templates>
      <parameters>
        <parameter name="this">
          <template name="T" index="0" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
              <template name="U" index="1" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="U" index="1" api="M:W.InvokeExtensions.InvokeExtensions.InvokeEx``2(``0,System.Func{``0,``1})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.InvokeExtensions" />
        <type api="T:W.InvokeExtensions.InvokeExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.LockExtensions">
      <apidata name="W.LockExtensions" group="namespace" />
      <elements>
        <element api="T:W.LockExtensions.SemaphoreSlimExtensions" />
        <element api="T:W.LockExtensions.SpinLockExtensions" />
        <element api="T:W.LockExtensions.MonitorExtensions" />
        <element api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" />
      </elements>
    </api>
    <api id="T:W.LockExtensions.MonitorExtensions">
      <apidata name="MonitorExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.LockExtensions.MonitorExtensions.InLock(System.Object,System.Action)" />
        <element api="M:W.LockExtensions.MonitorExtensions.InLock``1(System.Object,System.Func{``0})" />
        <element api="M:W.LockExtensions.MonitorExtensions.InLockAsync(System.Object,System.Action)" />
        <element api="M:W.LockExtensions.MonitorExtensions.InLockAsync``1(System.Object,System.Func{``0})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.MonitorExtensions.InLock(System.Object,System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.MonitorExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.MonitorExtensions.InLock``1(System.Object,System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.MonitorExtensions.InLock``1(System.Object,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.LockExtensions.MonitorExtensions.InLock``1(System.Object,System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.MonitorExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.MonitorExtensions.InLockAsync(System.Object,System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.MonitorExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.MonitorExtensions.InLockAsync``1(System.Object,System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.MonitorExtensions.InLockAsync``1(System.Object,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TType" index="0" api="M:W.LockExtensions.MonitorExtensions.InLockAsync``1(System.Object,System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.MonitorExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:W.LockExtensions.ReaderWriterLockSlimExtensions">
      <apidata name="ReaderWriterLockSlimExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.Lock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum)" />
        <element api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.Unlock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum)" />
        <element api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Action)" />
        <element api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
        <element api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Action)" />
        <element api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
        </parameter>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
        </parameter>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLock``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
        </parameter>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
        </parameter>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TType" index="0" api="M:W.LockExtensions.ReaderWriterLockSlimExtensions.InLockAsync``1(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.Lock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum)">
      <apidata name="Lock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
        </parameter>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.ReaderWriterLockSlimExtensions.Unlock(System.Threading.ReaderWriterLockSlim,W.Threading.Lockers.LockTypeEnum)">
      <apidata name="Unlock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
        </parameter>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.ReaderWriterLockSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:W.LockExtensions.SemaphoreSlimExtensions">
      <apidata name="SemaphoreSlimExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.LockExtensions.SemaphoreSlimExtensions.InLock(System.Threading.SemaphoreSlim,System.Action)" />
        <element api="M:W.LockExtensions.SemaphoreSlimExtensions.InLock``1(System.Threading.SemaphoreSlim,System.Func{``0})" />
        <element api="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync(System.Threading.SemaphoreSlim,System.Action)" />
        <element api="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync``1(System.Threading.SemaphoreSlim,System.Func{``0})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SemaphoreSlimExtensions.InLock(System.Threading.SemaphoreSlim,System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SemaphoreSlim" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SemaphoreSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SemaphoreSlimExtensions.InLock``1(System.Threading.SemaphoreSlim,System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SemaphoreSlim" ref="true" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.SemaphoreSlimExtensions.InLock``1(System.Threading.SemaphoreSlim,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.LockExtensions.SemaphoreSlimExtensions.InLock``1(System.Threading.SemaphoreSlim,System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SemaphoreSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync(System.Threading.SemaphoreSlim,System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SemaphoreSlim" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SemaphoreSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync``1(System.Threading.SemaphoreSlim,System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SemaphoreSlim" ref="true" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync``1(System.Threading.SemaphoreSlim,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TType" index="0" api="M:W.LockExtensions.SemaphoreSlimExtensions.InLockAsync``1(System.Threading.SemaphoreSlim,System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SemaphoreSlimExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:W.LockExtensions.SpinLockExtensions">
      <apidata name="SpinLockExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.LockExtensions.SpinLockExtensions.InLock(System.Threading.SpinLock,System.Action)" />
        <element api="M:W.LockExtensions.SpinLockExtensions.InLock``1(System.Threading.SpinLock,System.Func{``0})" />
        <element api="M:W.LockExtensions.SpinLockExtensions.InLockAsync(System.Threading.SpinLock,System.Action)" />
        <element api="M:W.LockExtensions.SpinLockExtensions.InLockAsync``1(System.Threading.SpinLock,System.Func{``0})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SpinLockExtensions.InLock(System.Threading.SpinLock,System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SpinLock" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SpinLockExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SpinLockExtensions.InLock``1(System.Threading.SpinLock,System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SpinLock" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.SpinLockExtensions.InLock``1(System.Threading.SpinLock,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TType" index="0" api="M:W.LockExtensions.SpinLockExtensions.InLock``1(System.Threading.SpinLock,System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SpinLockExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SpinLockExtensions.InLockAsync(System.Threading.SpinLock,System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SpinLock" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SpinLockExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.LockExtensions.SpinLockExtensions.InLockAsync``1(System.Threading.SpinLock,System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="this">
          <type api="T:System.Threading.SpinLock" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TType" index="0" api="M:W.LockExtensions.SpinLockExtensions.InLockAsync``1(System.Threading.SpinLock,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TType" index="0" api="M:W.LockExtensions.SpinLockExtensions.InLockAsync``1(System.Threading.SpinLock,System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.LockExtensions" />
        <type api="T:W.LockExtensions.SpinLockExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.Logging">
      <apidata name="W.Logging" group="namespace" />
      <elements>
        <element api="T:W.Logging.CustomLogger" />
        <element api="T:W.Logging.Log" />
        <element api="T:W.Logging.Log.LogMessageCategory" />
        <element api="T:W.Logging.Log.LogMessageHistory" />
        <element api="T:W.Logging.Log.LogMessageHistory.LogMessage" />
      </elements>
    </api>
    <api id="T:W.Logging.CustomLogger">
      <apidata name="CustomLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Logging.CustomLogger.FormatLogMessage(W.Logging.Log.LogMessageCategory,System.String)" />
        <element api="M:W.Logging.CustomLogger.LogMessage(W.Logging.Log.LogMessageCategory,System.String)" />
        <element api="M:W.Logging.CustomLogger.OnDispose" />
        <element api="M:W.Logging.CustomLogger.Dispose" />
        <element api="M:W.Logging.CustomLogger.#ctor(System.String,System.Boolean)" />
        <element api="P:W.Logging.CustomLogger.Name" />
        <element api="P:W.Logging.CustomLogger.AddTimestamp" />
        <element api="P:W.Logging.CustomLogger.IsDisposed" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
      </containers>
    </api>
    <api id="M:W.Logging.CustomLogger.#ctor(System.String,System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="addTimestamp">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="P:W.Logging.CustomLogger.AddTimestamp">
      <apidata name="AddTimestamp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AddTimestamp" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.CustomLogger.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.CustomLogger.FormatLogMessage(W.Logging.Log.LogMessageCategory,System.String)">
      <apidata name="FormatLogMessage" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="category">
          <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
            <type api="T:W.Logging.Log" ref="true" />
          </type>
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="P:W.Logging.CustomLogger.IsDisposed">
      <apidata name="IsDisposed" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDisposed" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.CustomLogger.LogMessage(W.Logging.Log.LogMessageCategory,System.String)">
      <apidata name="LogMessage" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="category">
          <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
            <type api="T:W.Logging.Log" ref="true" />
          </type>
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="P:W.Logging.CustomLogger.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.CustomLogger.OnDispose">
      <apidata name="OnDispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.CustomLogger" ref="true" />
      </containers>
    </api>
    <api id="T:W.Logging.Log">
      <apidata name="Log" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Logging.Log.e(System.Exception)" />
        <element api="M:W.Logging.Log.e(System.String,System.Object[])" />
        <element api="M:W.Logging.Log.w(System.String,System.String,System.Int32)" />
        <element api="M:W.Logging.Log.w(System.String,System.Object[])" />
        <element api="M:W.Logging.Log.i(System.String,System.String,System.Int32)" />
        <element api="M:W.Logging.Log.i(System.String,System.Object[])" />
        <element api="M:W.Logging.Log.v(System.String,System.String,System.Int32)" />
        <element api="M:W.Logging.Log.v(System.String,System.Object[])" />
        <element api="P:W.Logging.Log.LogTheMessage" />
        <element api="P:W.Logging.Log.MessageHistory" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.e(System.Exception)">
      <apidata name="e" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="e">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.e(System.String,System.Object[])">
      <apidata name="e" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.i(System.String,System.Object[])">
      <apidata name="i" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.i(System.String,System.String,System.Int32)">
      <apidata name="i" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="callerName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerLineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogTheMessage">
      <apidata name="LogTheMessage" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogTheMessage" />
      <setter name="set_LogTheMessage" />
      <returns>
        <type api="T:System.Action`2" ref="true">
          <specialization>
            <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
              <type api="T:W.Logging.Log" ref="true" />
            </type>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="P:W.Logging.Log.MessageHistory">
      <apidata name="MessageHistory" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MessageHistory" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.v(System.String,System.Object[])">
      <apidata name="v" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.v(System.String,System.String,System.Int32)">
      <apidata name="v" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="callerName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerLineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.w(System.String,System.Object[])">
      <apidata name="w" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="format">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.w(System.String,System.String,System.Int32)">
      <apidata name="w" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="callerName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="callerLineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="T:W.Logging.Log.LogMessageCategory">
      <apidata name="LogMessageCategory" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:W.Logging.Log.LogMessageCategory.Verbose" />
        <element api="F:W.Logging.Log.LogMessageCategory.Information" />
        <element api="F:W.Logging.Log.LogMessageCategory.Warning" />
        <element api="F:W.Logging.Log.LogMessageCategory.Error" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Error">
      <apidata name="Error" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Information">
      <apidata name="Information" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Verbose">
      <apidata name="Verbose" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:W.Logging.Log.LogMessageCategory.Warning">
      <apidata name="Warning" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:W.Logging.Log.LogMessageHistory">
      <apidata name="LogMessageHistory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.PropertyHost" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Logging.Log.LogMessageHistory.#ctor(System.Boolean)" />
        <element api="P:W.Logging.Log.LogMessageHistory.Messages" />
        <element api="P:W.Logging.Log.LogMessageHistory.MaximumNumberOfMessages" />
        <element api="P:W.Logging.Log.LogMessageHistory.Enabled" />
        <element api="M:W.PropertyHost.MarkAsClean" />
        <element api="P:W.PropertyHost.IsDirty" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log" ref="true" />
      </containers>
    </api>
    <api id="M:W.Logging.Log.LogMessageHistory.#ctor(System.Boolean)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="newestFirst" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogMessageHistory.Enabled">
      <apidata name="Enabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Enabled" />
      <setter name="set_Enabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogMessageHistory.MaximumNumberOfMessages">
      <apidata name="MaximumNumberOfMessages" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MaximumNumberOfMessages" />
      <returns>
        <type api="T:W.Property`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogMessageHistory.Messages">
      <apidata name="Messages" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Messages" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ObservableCollection`1" ref="true">
          <specialization>
            <type api="T:W.Logging.Log.LogMessageHistory.LogMessage" ref="true">
              <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
                <type api="T:W.Logging.Log" ref="true" />
              </type>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:W.Logging.Log.LogMessageHistory.LogMessage">
      <apidata name="LogMessage" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Logging.Log.LogMessageHistory.LogMessage.#ctor" />
        <element api="P:W.Logging.Log.LogMessageHistory.LogMessage.Category" />
        <element api="P:W.Logging.Log.LogMessageHistory.LogMessage.Message" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
          <type api="T:W.Logging.Log" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:W.Logging.Log.LogMessageHistory.LogMessage.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory.LogMessage" ref="true">
          <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
            <type api="T:W.Logging.Log" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogMessageHistory.LogMessage.Category">
      <apidata name="Category" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Category" />
      <returns>
        <type api="T:W.Property`1" ref="true">
          <specialization>
            <type api="T:W.Logging.Log.LogMessageCategory" ref="false">
              <type api="T:W.Logging.Log" ref="true" />
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory.LogMessage" ref="true">
          <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
            <type api="T:W.Logging.Log" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="P:W.Logging.Log.LogMessageHistory.LogMessage.Message">
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Message" />
      <returns>
        <type api="T:W.Property`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Logging" />
        <type api="T:W.Logging.Log.LogMessageHistory.LogMessage" ref="true">
          <type api="T:W.Logging.Log.LogMessageHistory" ref="true">
            <type api="T:W.Logging.Log" ref="true" />
          </type>
        </type>
      </containers>
    </api>
    <api id="N:W.PropertyHostExtensions">
      <apidata name="W.PropertyHostExtensions" group="namespace" />
      <elements>
        <element api="T:W.PropertyHostExtensions.PropertyHostExtensions" />
      </elements>
    </api>
    <api id="T:W.PropertyHostExtensions.PropertyHostExtensions">
      <apidata name="PropertyHostExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.PropertyHostExtensions.PropertyHostExtensions.InitializeProperties(System.Object)" />
        <element api="M:W.PropertyHostExtensions.PropertyHostExtensions.IsDirty(System.Object)" />
        <element api="M:W.PropertyHostExtensions.PropertyHostExtensions.MarkAsClean(System.Object)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.PropertyHostExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.PropertyHostExtensions.PropertyHostExtensions.InitializeProperties(System.Object)">
      <apidata name="InitializeProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.PropertyHostExtensions" />
        <type api="T:W.PropertyHostExtensions.PropertyHostExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.PropertyHostExtensions.PropertyHostExtensions.IsDirty(System.Object)">
      <apidata name="IsDirty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.PropertyHostExtensions" />
        <type api="T:W.PropertyHostExtensions.PropertyHostExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.PropertyHostExtensions.PropertyHostExtensions.MarkAsClean(System.Object)">
      <apidata name="MarkAsClean" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="this">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.PropertyHostExtensions" />
        <type api="T:W.PropertyHostExtensions.PropertyHostExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:W.StringExtensions">
      <apidata name="W.StringExtensions" group="namespace" />
      <elements>
        <element api="T:W.StringExtensions.StringExtensions" />
      </elements>
    </api>
    <api id="T:W.StringExtensions.StringExtensions">
      <apidata name="StringExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.StringExtensions.StringExtensions.IsValidBase64(System.String)" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.StringExtensions" />
      </containers>
    </api>
    <api id="M:W.StringExtensions.StringExtensions.IsValidBase64(System.String)">
      <apidata name="IsValidBase64" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.StringExtensions" />
        <type api="T:W.StringExtensions.StringExtensions" ref="true" />
      </containers>
    </api>
    <api id="N:W.Threading">
      <apidata name="W.Threading" group="namespace" />
      <elements>
        <element api="T:W.Threading.CPUProfileEnum" />
        <element api="T:W.Threading.Gate`1" />
        <element api="T:W.Threading.Gate" />
        <element api="T:W.Threading.GenericThreadDelegate" />
        <element api="T:W.Threading.ParameterizedThread" />
        <element api="T:W.Threading.Thread" />
        <element api="T:W.Threading.Thread`1" />
        <element api="T:W.Threading.AnyMethodDelegate" />
        <element api="T:W.Threading.ThreadMethod" />
        <element api="T:W.Threading.ThreadDelegate" />
        <element api="T:W.Threading.ThreadSlim" />
      </elements>
    </api>
    <api id="T:W.Threading.AnyMethodDelegate">
      <apidata name="AnyMethodDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="T:W.Threading.CPUProfileEnum">
      <apidata name="CPUProfileEnum" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:W.Threading.CPUProfileEnum.SpinWait0" />
        <element api="F:W.Threading.CPUProfileEnum.Sleep" />
        <element api="F:W.Threading.CPUProfileEnum.SpinWait1" />
        <element api="F:W.Threading.CPUProfileEnum.Yield" />
        <element api="F:W.Threading.CPUProfileEnum.SpinUntil" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="F:W.Threading.CPUProfileEnum.Sleep">
      <apidata name="Sleep" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </containers>
    </api>
    <api id="F:W.Threading.CPUProfileEnum.SpinUntil">
      <apidata name="SpinUntil" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </containers>
    </api>
    <api id="F:W.Threading.CPUProfileEnum.SpinWait0">
      <apidata name="SpinWait0" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </containers>
    </api>
    <api id="F:W.Threading.CPUProfileEnum.SpinWait1">
      <apidata name="SpinWait1" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </containers>
    </api>
    <api id="F:W.Threading.CPUProfileEnum.Yield">
      <apidata name="Yield" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.CPUProfileEnum" ref="false" />
      </containers>
    </api>
    <api id="T:W.Threading.Gate">
      <apidata name="Gate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Gate`1" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.Gate.CallAction(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.Gate.Run" />
        <element api="M:W.Threading.Gate.Join" />
        <element api="M:W.Threading.Gate.Join(System.Int32)" />
        <element api="M:W.Threading.Gate.Cancel" />
        <element api="M:W.Threading.Gate.Dispose" />
        <element api="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationToken})" />
        <element api="P:W.Threading.Gate.IsRunning" />
        <element api="P:W.Threading.Gate.IsComplete" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Gate is incorrectly implemented and will be removed at a later date.  Please use ThreadMethod instead.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:W.Threading.Gate.#ctor(System.Action{System.Threading.CancellationToken})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.CallAction(System.Threading.CancellationToken)">
      <apidata name="CallAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.Cancel">
      <apidata name="Cancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Gate.IsComplete">
      <apidata name="IsComplete" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsComplete" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Gate.IsRunning">
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.Join">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.Join(System.Int32)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate.Run">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Gate`1">
      <apidata name="Gate" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Gate" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TParameterType" />
      </templates>
      <elements>
        <element api="M:W.Threading.Gate`1.CallAction(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.Gate`1.Run" />
        <element api="M:W.Threading.Gate`1.Run(`0)" />
        <element api="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationToken})" />
        <element api="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationToken},`0)" />
        <element api="M:W.Threading.Gate.Join" />
        <element api="M:W.Threading.Gate.Join(System.Int32)" />
        <element api="M:W.Threading.Gate.Cancel" />
        <element api="M:W.Threading.Gate.Dispose" />
        <element api="P:W.Threading.Gate.IsRunning" />
        <element api="P:W.Threading.Gate.IsComplete" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Gate is incorrectly implemented and will be removed at a later date.  Please use ThreadMethod instead.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationToken})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="TParameterType" index="0" api="T:W.Threading.Gate`1" />
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.#ctor(System.Action{`0,System.Threading.CancellationToken},`0)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="TParameterType" index="0" api="T:W.Threading.Gate`1" />
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="defaultArg">
          <template name="TParameterType" index="0" api="T:W.Threading.Gate`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.CallAction(System.Threading.CancellationToken)">
      <apidata name="CallAction" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.Gate.CallAction(System.Threading.CancellationToken)">
          <type api="T:W.Threading.Gate" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.Run">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Threading.Gate.Run">
          <type api="T:W.Threading.Gate" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Gate`1.Run(`0)">
      <apidata name="Run" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arg">
          <template name="TParameterType" index="0" api="T:W.Threading.Gate`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Gate`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.GenericThreadDelegate">
      <apidata name="GenericThreadDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="T:W.Threading.ParameterizedThread">
      <apidata name="ParameterizedThread" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Disposable" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Threading.ParameterizedThread.OnDispose" />
        <element api="M:W.Threading.ParameterizedThread.Join" />
        <element api="M:W.Threading.ParameterizedThread.Join(System.Int32)" />
        <element api="M:W.Threading.ParameterizedThread.Start(System.Object[])" />
        <element api="M:W.Threading.ParameterizedThread.Start(System.Int32,System.Object[])" />
        <element api="M:W.Threading.ParameterizedThread.Stop" />
        <element api="M:W.Threading.ParameterizedThread.#ctor(W.Threading.GenericThreadDelegate)" />
        <element api="M:W.Threading.ParameterizedThread.Create(W.Threading.GenericThreadDelegate)" />
        <element api="P:W.Threading.ParameterizedThread.Task" />
        <element api="P:W.Threading.ParameterizedThread.IsStarted" />
        <element api="P:W.Threading.ParameterizedThread.IsComplete" />
        <element api="P:W.Threading.ParameterizedThread.IsFaulted" />
        <element api="P:W.Threading.ParameterizedThread.Exception" />
        <element api="P:W.Threading.ParameterizedThread.Token" />
        <element api="F:W.Disposable.IsDisposed" />
        <element api="F:W.Disposable.IsDisposing" />
        <element api="M:W.Disposable.OnDisposeUnmanaged" />
        <element api="M:W.Disposable.Dispose" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.#ctor(W.Threading.GenericThreadDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:W.Threading.GenericThreadDelegate" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.Create(W.Threading.GenericThreadDelegate)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:W.Threading.GenericThreadDelegate" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ParameterizedThread.Exception">
      <apidata name="Exception" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Exception" />
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ParameterizedThread.IsComplete">
      <apidata name="IsComplete" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsComplete" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ParameterizedThread.IsFaulted">
      <apidata name="IsFaulted" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsFaulted" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ParameterizedThread.IsStarted">
      <apidata name="IsStarted" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsStarted" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.Join">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.Join(System.Int32)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.OnDispose">
      <apidata name="OnDispose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:W.Disposable.OnDispose">
          <type api="T:W.Disposable" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.Start(System.Int32,System.Object[])">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msLifetime">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.Start(System.Object[])">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ParameterizedThread.Stop">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ParameterizedThread.Task">
      <apidata name="Task" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Task" />
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ParameterizedThread.Token">
      <apidata name="Token" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Token" />
      <returns>
        <type api="T:System.Threading.CancellationToken" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ParameterizedThread" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Thread">
      <apidata name="Thread" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.ThreadSlim" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Thread`1" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:W.Threading.Thread.Join" />
        <element api="M:W.Threading.Thread.Join(System.Int32)" />
        <element api="M:W.Threading.Thread.Join(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.Thread.Dispose" />
        <element api="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationToken})" />
        <element api="M:W.Threading.Thread.#ctor(W.Threading.ThreadDelegate)" />
        <element api="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationToken})" />
        <element api="M:W.Threading.Thread.Create``1(System.Action{System.Threading.CancellationToken,``0})" />
        <element api="M:W.Threading.Thread.Sleep(System.Int32)" />
        <element api="M:W.Threading.Thread.Sleep(System.Int32,System.Boolean)" />
        <element api="M:W.Threading.Thread.Sleep(W.Threading.CPUProfileEnum)" />
        <element api="M:W.Threading.Thread.Sleep(W.Threading.CPUProfileEnum,System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.SignalToStop" />
        <element api="M:W.Threading.ThreadSlim.Stop" />
        <element api="M:W.Threading.ThreadSlim.Stop(System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.Stop(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.ThreadSlim.Start(System.Object[])" />
        <element api="M:W.Threading.ThreadSlim.StartAsync(System.Object[])" />
        <element api="M:W.Threading.ThreadSlim.Wait" />
        <element api="M:W.Threading.ThreadSlim.Wait(System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.Wait(System.Threading.CancellationToken)" />
        <element api="P:W.Threading.ThreadSlim.Name" />
        <element api="P:W.Threading.ThreadSlim.IsStarted" />
        <element api="P:W.Threading.ThreadSlim.IsRunning" />
        <element api="P:W.Threading.ThreadSlim.IsComplete" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.#ctor(System.Action{System.Threading.CancellationToken})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.#ctor(W.Threading.ThreadDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="delegate">
          <type api="T:W.Threading.ThreadDelegate" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Create(System.Action{System.Threading.CancellationToken})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Thread" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Create``1(System.Action{System.Threading.CancellationToken,``0})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TType" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TType" index="0" api="M:W.Threading.Thread.Create``1(System.Action{System.Threading.CancellationToken,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Thread`1" ref="true">
          <specialization>
            <template name="TType" index="0" api="M:W.Threading.Thread.Create``1(System.Action{System.Threading.CancellationToken,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Join">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Join(System.Int32)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Join(System.Threading.CancellationToken)">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Sleep(System.Int32)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msDelay">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Sleep(System.Int32,System.Boolean)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msDelay">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="useSpinWait">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Sleep(W.Threading.CPUProfileEnum)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:W.Threading.CPUProfileEnum" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread.Sleep(W.Threading.CPUProfileEnum,System.Int32)">
      <apidata name="Sleep" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:W.Threading.CPUProfileEnum" ref="false" />
        </parameter>
        <parameter name="msTimeout" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>1</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Thread`1">
      <apidata name="Thread" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Thread" ref="true" />
          <type api="T:W.Threading.ThreadSlim" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TType" />
      </templates>
      <elements>
        <element api="M:W.Threading.Thread`1.StartAsync(`0)" />
        <element api="M:W.Threading.ThreadSlim.StartAsync(System.Object[])" />
        <element api="M:W.Threading.Thread`1.#ctor(System.Action{System.Threading.CancellationToken,`0})" />
        <element api="M:W.Threading.Thread.Join" />
        <element api="M:W.Threading.Thread.Join(System.Int32)" />
        <element api="M:W.Threading.Thread.Join(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.Thread.Dispose" />
        <element api="M:W.Threading.ThreadSlim.SignalToStop" />
        <element api="M:W.Threading.ThreadSlim.Stop" />
        <element api="M:W.Threading.ThreadSlim.Stop(System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.Stop(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.ThreadSlim.Start(System.Object[])" />
        <element api="M:W.Threading.ThreadSlim.Wait" />
        <element api="M:W.Threading.ThreadSlim.Wait(System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.Wait(System.Threading.CancellationToken)" />
        <element api="P:W.Threading.ThreadSlim.Name" />
        <element api="P:W.Threading.ThreadSlim.IsStarted" />
        <element api="P:W.Threading.ThreadSlim.IsRunning" />
        <element api="P:W.Threading.ThreadSlim.IsComplete" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread`1.#ctor(System.Action{System.Threading.CancellationToken,`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TType" index="0" api="T:W.Threading.Thread`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Thread`1.StartAsync(`0)">
      <apidata name="StartAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arg">
          <template name="TType" index="0" api="T:W.Threading.Thread`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.Thread`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.ThreadDelegate">
      <apidata name="ThreadDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="T:W.Threading.ThreadMethod">
      <apidata name="ThreadMethod" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.ThreadMethod.Initialize" />
        <element api="M:W.Threading.ThreadMethod.RunSynchronously(System.Object[])" />
        <element api="M:W.Threading.ThreadMethod.Start(System.Object[])" />
        <element api="M:W.Threading.ThreadMethod.StartAsync(System.Object[])" />
        <element api="M:W.Threading.ThreadMethod.Wait" />
        <element api="M:W.Threading.ThreadMethod.Wait(System.Int32)" />
        <element api="M:W.Threading.ThreadMethod.Wait(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.ThreadMethod.Dispose" />
        <element api="M:W.Threading.ThreadMethod.#ctor(W.Threading.AnyMethodDelegate)" />
        <element api="M:W.Threading.ThreadMethod.Finalize" />
        <element api="M:W.Threading.ThreadMethod.Create(W.Threading.AnyMethodDelegate)" />
        <element api="M:W.Threading.ThreadMethod.Create(System.Action)" />
        <element api="M:W.Threading.ThreadMethod.Create``1(System.Action{``0})" />
        <element api="M:W.Threading.ThreadMethod.Create``2(System.Action{``0,``1})" />
        <element api="M:W.Threading.ThreadMethod.Create``3(System.Action{``0,``1,``2})" />
        <element api="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})" />
        <element api="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" />
        <element api="P:W.Threading.ThreadMethod.Name" />
        <element api="P:W.Threading.ThreadMethod.IsStarted" />
        <element api="P:W.Threading.ThreadMethod.IsRunning" />
        <element api="P:W.Threading.ThreadMethod.IsComplete" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.#ctor(W.Threading.AnyMethodDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="delegate">
          <type api="T:W.Threading.AnyMethodDelegate" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create(System.Action)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create``1(System.Action{``0})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:W.Threading.ThreadMethod.Create``1(System.Action{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create``2(System.Action{``0,``1})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:W.Threading.ThreadMethod.Create``2(System.Action{``0,``1})" />
              <template name="T2" index="1" api="M:W.Threading.ThreadMethod.Create``2(System.Action{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create``3(System.Action{``0,``1,``2})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:W.Threading.ThreadMethod.Create``3(System.Action{``0,``1,``2})" />
              <template name="T2" index="1" api="M:W.Threading.ThreadMethod.Create``3(System.Action{``0,``1,``2})" />
              <template name="T3" index="2" api="M:W.Threading.ThreadMethod.Create``3(System.Action{``0,``1,``2})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
        <template name="T4" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`4" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})" />
              <template name="T2" index="1" api="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})" />
              <template name="T3" index="2" api="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})" />
              <template name="T4" index="3" api="M:W.Threading.ThreadMethod.Create``4(System.Action{``0,``1,``2,``3})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
        <template name="T4" />
        <template name="T5" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`5" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" />
              <template name="T2" index="1" api="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" />
              <template name="T3" index="2" api="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" />
              <template name="T4" index="3" api="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" />
              <template name="T5" index="4" api="M:W.Threading.ThreadMethod.Create``5(System.Action{``0,``1,``2,``3,``4})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Create(W.Threading.AnyMethodDelegate)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegate">
          <type api="T:W.Threading.AnyMethodDelegate" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Finalize">
      <apidata name="Finalize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <implements>
        <member api="M:System.Object.Finalize">
          <type api="T:System.Object" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Initialize">
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadMethod.IsComplete">
      <apidata name="IsComplete" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsComplete" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadMethod.IsRunning">
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadMethod.IsStarted">
      <apidata name="IsStarted" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsStarted" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadMethod.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.RunSynchronously(System.Object[])">
      <apidata name="RunSynchronously" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Start(System.Object[])">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.StartAsync(System.Object[])">
      <apidata name="StartAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Wait">
      <apidata name="Wait" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Wait(System.Int32)">
      <apidata name="Wait" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadMethod.Wait(System.Threading.CancellationToken)">
      <apidata name="Wait" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadMethod" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.ThreadSlim">
      <apidata name="ThreadSlim" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Thread" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.ThreadSlim.SignalToStop" />
        <element api="M:W.Threading.ThreadSlim.Stop" />
        <element api="M:W.Threading.ThreadSlim.Stop(System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.Stop(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.ThreadSlim.Start(System.Object[])" />
        <element api="M:W.Threading.ThreadSlim.StartAsync(System.Object[])" />
        <element api="M:W.Threading.ThreadSlim.Wait" />
        <element api="M:W.Threading.ThreadSlim.Wait(System.Int32)" />
        <element api="M:W.Threading.ThreadSlim.Wait(System.Threading.CancellationToken)" />
        <element api="M:W.Threading.ThreadSlim.Dispose" />
        <element api="M:W.Threading.ThreadSlim.#ctor(W.Threading.ThreadDelegate)" />
        <element api="M:W.Threading.ThreadSlim.#ctor(System.Action{System.Threading.CancellationToken})" />
        <element api="M:W.Threading.ThreadSlim.Create(W.Threading.ThreadDelegate)" />
        <element api="M:W.Threading.ThreadSlim.Create(System.Action{System.Threading.CancellationToken})" />
        <element api="M:W.Threading.ThreadSlim.Create``1(System.Action{System.Threading.CancellationToken,``0})" />
        <element api="M:W.Threading.ThreadSlim.Create``2(System.Action{System.Threading.CancellationToken,``0,``1})" />
        <element api="M:W.Threading.ThreadSlim.Create``3(System.Action{System.Threading.CancellationToken,``0,``1,``2})" />
        <element api="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})" />
        <element api="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" />
        <element api="P:W.Threading.ThreadSlim.Name" />
        <element api="P:W.Threading.ThreadSlim.IsStarted" />
        <element api="P:W.Threading.ThreadSlim.IsRunning" />
        <element api="P:W.Threading.ThreadSlim.IsComplete" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.#ctor(System.Action{System.Threading.CancellationToken})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.#ctor(W.Threading.ThreadDelegate)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="delegate">
          <type api="T:W.Threading.ThreadDelegate" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create(System.Action{System.Threading.CancellationToken})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create``1(System.Action{System.Threading.CancellationToken,``0})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TArg" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TArg" index="0" api="M:W.Threading.ThreadSlim.Create``1(System.Action{System.Threading.CancellationToken,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create``2(System.Action{System.Threading.CancellationToken,``0,``1})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TArg1" />
        <template name="TArg2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`3" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TArg1" index="0" api="M:W.Threading.ThreadSlim.Create``2(System.Action{System.Threading.CancellationToken,``0,``1})" />
              <template name="TArg2" index="1" api="M:W.Threading.ThreadSlim.Create``2(System.Action{System.Threading.CancellationToken,``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create``3(System.Action{System.Threading.CancellationToken,``0,``1,``2})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TArg1" />
        <template name="TArg2" />
        <template name="TArg3" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`4" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TArg1" index="0" api="M:W.Threading.ThreadSlim.Create``3(System.Action{System.Threading.CancellationToken,``0,``1,``2})" />
              <template name="TArg2" index="1" api="M:W.Threading.ThreadSlim.Create``3(System.Action{System.Threading.CancellationToken,``0,``1,``2})" />
              <template name="TArg3" index="2" api="M:W.Threading.ThreadSlim.Create``3(System.Action{System.Threading.CancellationToken,``0,``1,``2})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TArg1" />
        <template name="TArg2" />
        <template name="TArg3" />
        <template name="TArg4" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`5" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TArg1" index="0" api="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})" />
              <template name="TArg2" index="1" api="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})" />
              <template name="TArg3" index="2" api="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})" />
              <template name="TArg4" index="3" api="M:W.Threading.ThreadSlim.Create``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TArg1" />
        <template name="TArg2" />
        <template name="TArg3" />
        <template name="TArg4" />
        <template name="TArg5" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`6" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
              <template name="TArg1" index="0" api="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" />
              <template name="TArg2" index="1" api="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" />
              <template name="TArg3" index="2" api="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" />
              <template name="TArg4" index="3" api="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" />
              <template name="TArg5" index="4" api="M:W.Threading.ThreadSlim.Create``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Create(W.Threading.ThreadDelegate)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegate">
          <type api="T:W.Threading.ThreadDelegate" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadSlim.IsComplete">
      <apidata name="IsComplete" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsComplete" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadSlim.IsRunning">
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadSlim.IsStarted">
      <apidata name="IsStarted" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsStarted" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.ThreadSlim.Name">
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.SignalToStop">
      <apidata name="SignalToStop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Start(System.Object[])">
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.StartAsync(System.Object[])">
      <apidata name="StartAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Stop">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Stop(System.Int32)">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Stop(System.Threading.CancellationToken)">
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Wait">
      <apidata name="Wait" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Wait(System.Int32)">
      <apidata name="Wait" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="msTimeout">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.ThreadSlim.Wait(System.Threading.CancellationToken)">
      <apidata name="Wait" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="token">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading" />
        <type api="T:W.Threading.ThreadSlim" ref="true" />
      </containers>
    </api>
    <api id="N:W.Threading.GateExtensions">
      <apidata name="W.Threading.GateExtensions" group="namespace" />
      <elements>
        <element api="T:W.Threading.GateExtensions.GateExtensions" />
      </elements>
    </api>
    <api id="T:W.Threading.GateExtensions.GateExtensions">
      <apidata name="GateExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:W.Threading.GateExtensions.GateExtensions.AsGate(System.Action{System.Threading.CancellationToken})" />
        <element api="M:W.Threading.GateExtensions.GateExtensions.AsGate``1(System.Action{``0,System.Threading.CancellationToken})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.GateExtensions" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:W.Threading.GateExtensions.GateExtensions.AsGate(System.Action{System.Threading.CancellationToken})">
      <apidata name="AsGate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Gate" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.GateExtensions" />
        <type api="T:W.Threading.GateExtensions.GateExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>This extension will be removed at a later date.  Please use ThreadMethod instead of W.Threading.Gate.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:W.Threading.GateExtensions.GateExtensions.AsGate``1(System.Action{``0,System.Threading.CancellationToken})">
      <apidata name="AsGate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TParameterType" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="TParameterType" index="0" api="M:W.Threading.GateExtensions.GateExtensions.AsGate``1(System.Action{``0,System.Threading.CancellationToken})" />
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:W.Threading.Gate`1" ref="true">
          <specialization>
            <template name="TParameterType" index="0" api="M:W.Threading.GateExtensions.GateExtensions.AsGate``1(System.Action{``0,System.Threading.CancellationToken})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.GateExtensions" />
        <type api="T:W.Threading.GateExtensions.GateExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>This extension will be removed at a later date.  Please use ThreadMethod instead of W.Threading.Gate.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="N:W.Threading.Lockers">
      <apidata name="W.Threading.Lockers" group="namespace" />
      <elements>
        <element api="T:W.Threading.Lockers.ILocker" />
        <element api="T:W.Threading.Lockers.ILocker`1" />
        <element api="T:W.Threading.Lockers.StateAssignmentDelegate`1" />
        <element api="T:W.Threading.Lockers.IStateLocker`2" />
        <element api="T:W.Threading.Lockers.MonitorLocker" />
        <element api="T:W.Threading.Lockers.MonitorLocker`1" />
        <element api="T:W.Threading.Lockers.LockTypeEnum" />
        <element api="T:W.Threading.Lockers.ReaderWriterLocker" />
        <element api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
        <element api="T:W.Threading.Lockers.SemaphoreSlimLocker" />
        <element api="T:W.Threading.Lockers.SemaphoreSlimLocker`1" />
        <element api="T:W.Threading.Lockers.SpinLocker" />
        <element api="T:W.Threading.Lockers.SpinLocker`1" />
        <element api="T:W.Threading.Lockers.StateLocker`2" />
      </elements>
    </api>
    <api id="T:W.Threading.Lockers.ILocker">
      <apidata name="ILocker" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true" />
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.Threading.Lockers.ILocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ILocker.InLock(System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.ILocker`1">
      <apidata name="ILocker" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TLocker" />
      </templates>
      <implements>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </implements>
      <implementors>
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </implementors>
      <elements>
        <element api="P:W.Threading.Lockers.ILocker`1.Locker" />
        <element api="M:W.Threading.Lockers.ILocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="P:W.Threading.Lockers.ILocker`1.Locker">
      <apidata name="Locker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Locker" />
      <returns>
        <template name="TLocker" index="0" api="T:W.Threading.Lockers.ILocker`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.IStateLocker`2">
      <apidata name="IStateLocker" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TLocker" />
        <template name="TState" />
      </templates>
      <implements>
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
          <specialization>
            <template name="TLocker" index="0" api="T:W.Threading.Lockers.IStateLocker`2" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </implements>
      <implementors>
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ILocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})" />
        <element api="P:W.Threading.Lockers.ILocker`1.Locker" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Action{`1})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Func{`1,`1})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Action{`1})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Func{`1,`1})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TState" index="1" api="T:W.Threading.Lockers.IStateLocker`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.LockTypeEnum">
      <apidata name="LockTypeEnum" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:W.Threading.Lockers.LockTypeEnum.Read" />
        <element api="F:W.Threading.Lockers.LockTypeEnum.Write" />
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="F:W.Threading.Lockers.LockTypeEnum.Read">
      <apidata name="Read" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
      </containers>
    </api>
    <api id="F:W.Threading.Lockers.LockTypeEnum.Write">
      <apidata name="Write" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.MonitorLocker">
      <apidata name="MonitorLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.Lockers.MonitorLocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.MonitorLocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.MonitorLocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.MonitorLocker.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.MonitorLocker.#ctor" />
        <element api="P:W.Threading.Lockers.MonitorLocker.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.MonitorLocker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.MonitorLocker.InLock(System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.MonitorLocker.InLock``1(System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="M:W.Threading.Lockers.MonitorLocker.InLock``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="M:W.Threading.Lockers.MonitorLocker.InLock``1(System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.MonitorLocker.InLockAsync(System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.MonitorLocker.InLockAsync``1(System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="M:W.Threading.Lockers.MonitorLocker.InLockAsync``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="M:W.Threading.Lockers.MonitorLocker.InLockAsync``1(System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Lockers.MonitorLocker.Locker">
      <apidata name="Locker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Locker" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:W.Threading.Lockers.ILocker`1.Locker">
          <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.MonitorLocker`1">
      <apidata name="MonitorLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.MonitorLocker" ref="true" />
              <template name="TState" index="0" api="T:W.Threading.Lockers.MonitorLocker`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TState" />
      </templates>
      <elements>
        <element api="M:W.Threading.Lockers.MonitorLocker`1.#ctor" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.MonitorLocker`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.MonitorLocker`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.ReaderWriterLocker">
      <apidata name="ReaderWriterLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
          <specialization>
            <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLock(W.Threading.Lockers.LockTypeEnum,System.Action)" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action)" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.Dispose" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.#ctor" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker.#ctor(System.Threading.LockRecursionPolicy)" />
        <element api="P:W.Threading.Lockers.ReaderWriterLocker.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.#ctor(System.Threading.LockRecursionPolicy)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="lockPolicy">
          <type api="T:System.Threading.LockRecursionPolicy" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLock(System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(System.Func{``0})" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLock(W.Threading.Lockers.LockTypeEnum,System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLock``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync(System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="M:W.Threading.Lockers.ReaderWriterLocker.InLockAsync``1(W.Threading.Lockers.LockTypeEnum,System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Lockers.ReaderWriterLocker.Locker">
      <apidata name="Locker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Locker" />
      <returns>
        <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
      </returns>
      <implements>
        <member api="P:W.Threading.Lockers.ILocker`1.Locker">
          <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
            <specialization>
              <type api="T:System.Threading.ReaderWriterLockSlim" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.ReaderWriterLocker`1">
      <apidata name="ReaderWriterLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.ReaderWriterLocker" ref="true" />
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.LockableSlim`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TState" />
      </templates>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.Dispose" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.ReaderWriterLocker`1.#ctor" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker`1.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Action{`0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLock(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Action{`0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.ReaderWriterLocker`1.InLockAsync(W.Threading.Lockers.LockTypeEnum,System.Func{`0,`0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lockType">
          <type api="T:W.Threading.Lockers.LockTypeEnum" ref="false" />
        </parameter>
        <parameter name="func">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
              <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TState" index="0" api="T:W.Threading.Lockers.ReaderWriterLocker`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.SemaphoreSlimLocker">
      <apidata name="SemaphoreSlimLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
          <specialization>
            <type api="T:System.Threading.SemaphoreSlim" ref="true" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.Dispose" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor(System.Int32)" />
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor(System.Int32,System.Int32)" />
        <element api="P:W.Threading.Lockers.SemaphoreSlimLocker.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor(System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialCount">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.#ctor(System.Int32,System.Int32)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialCount">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="maxCount">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock(System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock``1(System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLock``1(System.Func{``0})" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync(System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync``1(System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="M:W.Threading.Lockers.SemaphoreSlimLocker.InLockAsync``1(System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Lockers.SemaphoreSlimLocker.Locker">
      <apidata name="Locker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Locker" />
      <returns>
        <type api="T:System.Threading.SemaphoreSlim" ref="true" />
      </returns>
      <implements>
        <member api="P:W.Threading.Lockers.ILocker`1.Locker">
          <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
            <specialization>
              <type api="T:System.Threading.SemaphoreSlim" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.SemaphoreSlimLocker`1">
      <apidata name="SemaphoreSlimLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.SemaphoreSlimLocker" ref="true" />
              <template name="TState" index="0" api="T:W.Threading.Lockers.SemaphoreSlimLocker`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TState" />
      </templates>
      <elements>
        <element api="M:W.Threading.Lockers.SemaphoreSlimLocker`1.#ctor" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SemaphoreSlimLocker`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SemaphoreSlimLocker`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.SpinLocker">
      <apidata name="SpinLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
          <specialization>
            <type api="T:System.Threading.SpinLock" ref="false" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </implements>
      <elements>
        <element api="M:W.Threading.Lockers.SpinLocker.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.SpinLocker.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.SpinLocker.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.SpinLocker.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.SpinLocker.#ctor" />
        <element api="P:W.Threading.Lockers.SpinLocker.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SpinLocker.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SpinLocker.InLock(System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SpinLocker.InLock``1(System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.SpinLocker.InLock``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Threading.Lockers.SpinLocker.InLock``1(System.Func{``0})" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SpinLocker.InLockAsync(System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SpinLocker.InLockAsync``1(System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.SpinLocker.InLockAsync``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="M:W.Threading.Lockers.SpinLocker.InLockAsync``1(System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Lockers.SpinLocker.Locker">
      <apidata name="Locker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Locker" />
      <returns>
        <type api="T:System.Threading.SpinLock" ref="false" />
      </returns>
      <implements>
        <member api="P:W.Threading.Lockers.ILocker`1.Locker">
          <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
            <specialization>
              <type api="T:System.Threading.SpinLock" ref="false" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.SpinLocker`1">
      <apidata name="SpinLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:W.Threading.Lockers.StateLocker`2" ref="true">
            <specialization>
              <type api="T:W.Threading.Lockers.SpinLocker" ref="true" />
              <template name="TState" index="0" api="T:W.Threading.Lockers.SpinLocker`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TState" />
      </templates>
      <elements>
        <element api="M:W.Threading.Lockers.SpinLocker`1.#ctor" />
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.SpinLocker`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.SpinLocker`1" ref="true" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.StateAssignmentDelegate`1">
      <apidata name="StateAssignmentDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="state">
          <template name="TState" index="0" api="T:W.Threading.Lockers.StateAssignmentDelegate`1" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="0" api="T:W.Threading.Lockers.StateAssignmentDelegate`1" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="T:W.Threading.Lockers.StateLocker`2">
      <apidata name="StateLocker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:W.Threading.Lockers.MonitorLocker`1" ref="true" />
          <type api="T:W.Threading.Lockers.ReaderWriterLocker`1" ref="true" />
          <type api="T:W.Threading.Lockers.SemaphoreSlimLocker`1" ref="true" />
          <type api="T:W.Threading.Lockers.SpinLocker`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TLocker">
          <constrained ctor="true">
            <implements>
              <type api="T:W.Threading.Lockers.ILocker" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="TState" />
      </templates>
      <implements>
        <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true">
          <specialization>
            <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
            <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
          <specialization>
            <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
          </specialization>
        </type>
        <type api="T:W.Threading.Lockers.ILocker" ref="true" />
      </implements>
      <elements>
        <element api="F:W.Threading.Lockers.StateLocker`2.State" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})" />
        <element api="M:W.Threading.Lockers.StateLocker`2.#ctor" />
        <element api="P:W.Threading.Lockers.StateLocker`2.Locker" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action)">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLock(System.Action{`1})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <implements>
        <member api="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Action{`1})">
          <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true">
            <specialization>
              <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:W.Threading.Lockers.StateLocker`2.InLock``1(System.Func{``0})" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLock``1(System.Func{``0})">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLock(System.Func{`1,`1})">
      <apidata name="InLock" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.IStateLocker`2.InLock(System.Func{`1,`1})">
          <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true">
            <specialization>
              <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action)">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync(System.Action)">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Action{`1})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Action{`1})">
          <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true">
            <specialization>
              <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="M:W.Threading.Lockers.StateLocker`2.InLockAsync``1(System.Func{``0})" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.ILocker.InLockAsync``1(System.Func{``0})">
          <type api="T:W.Threading.Lockers.ILocker" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="M:W.Threading.Lockers.StateLocker`2.InLockAsync(System.Func{`1,`1})">
      <apidata name="InLockAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="func">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:W.Threading.Lockers.IStateLocker`2.InLockAsync(System.Func{`1,`1})">
          <type api="T:W.Threading.Lockers.IStateLocker`2" ref="true">
            <specialization>
              <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
              <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="P:W.Threading.Lockers.StateLocker`2.Locker">
      <apidata name="Locker" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Locker" />
      <returns>
        <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
      </returns>
      <implements>
        <member api="P:W.Threading.Lockers.ILocker`1.Locker">
          <type api="T:W.Threading.Lockers.ILocker`1" ref="true">
            <specialization>
              <template name="TLocker" index="0" api="T:W.Threading.Lockers.StateLocker`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="F:W.Threading.Lockers.StateLocker`2.State">
      <apidata name="State" group="member" subgroup="field" />
      <memberdata visibility="family" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <template name="TState" index="1" api="T:W.Threading.Lockers.StateLocker`2" />
      </returns>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.Lockers" />
        <type api="T:W.Threading.Lockers.StateLocker`2" ref="true" />
      </containers>
    </api>
    <api id="N:W.Threading.ThreadExtensions">
      <apidata name="W.Threading.ThreadExtensions" group="namespace" />
      <elements>
        <element api="T:W.Threading.ThreadExtensions.ThreadExtensions" />
      </elements>
    </api>
    <api id="T:W.Threading.ThreadExtensions.ThreadExtensions">
      <apidata name="ThreadExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="Tungsten" module="Tungsten" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:W.Threading.ThreadExtensions" />
      </containers>
    </api>
  </apis>
</reflection>